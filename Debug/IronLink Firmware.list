
IronLink Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  08004e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f24  200001e8  08005070  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000210c  08005070  0002210c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00030217  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000062ef  00000000  00000000  00050427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010909  00000000  00000000  00056716  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001510  00000000  00000000  00067020  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001da0  00000000  00000000  00068530  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d0e6  00000000  00000000  0006a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006e35  00000000  00000000  000773b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007e1eb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004030  00000000  00000000  0007e268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c6c 	.word	0x08004c6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08004c6c 	.word	0x08004c6c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <StartServiceTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServiceTask */
void StartServiceTask(void const * argument)
{
 8000248:	b510      	push	{r4, lr}
  /* USER CODE BEGIN StartServiceTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f003 f9ac 	bl	80035a8 <osDelay>
 8000250:	e7fb      	b.n	800024a <StartServiceTask+0x2>
	...

08000254 <StartDefaultTask>:
{
 8000254:	b510      	push	{r4, lr}
  MX_USB_DEVICE_Init();
 8000256:	f003 fe33 	bl	8003ec0 <MX_USB_DEVICE_Init>
  osDelay(3000);
 800025a:	482b      	ldr	r0, [pc, #172]	; (8000308 <StartDefaultTask+0xb4>)
 800025c:	f003 f9a4 	bl	80035a8 <osDelay>
  lora_module_reboot();
 8000260:	f000 f956 	bl	8000510 <lora_module_reboot>
  osDelay(3000);
 8000264:	4828      	ldr	r0, [pc, #160]	; (8000308 <StartDefaultTask+0xb4>)
 8000266:	f003 f99f 	bl	80035a8 <osDelay>
  lora_module_set_gpio("GPIO3", 1);
 800026a:	2101      	movs	r1, #1
 800026c:	4827      	ldr	r0, [pc, #156]	; (800030c <StartDefaultTask+0xb8>)
 800026e:	f000 f97b 	bl	8000568 <lora_module_set_gpio>
  lora_module_set_gpio("GPIO4", 1);
 8000272:	2101      	movs	r1, #1
 8000274:	4826      	ldr	r0, [pc, #152]	; (8000310 <StartDefaultTask+0xbc>)
 8000276:	f000 f977 	bl	8000568 <lora_module_set_gpio>
  lora_module_set_gpio("GPIO5", 1);
 800027a:	2101      	movs	r1, #1
 800027c:	4825      	ldr	r0, [pc, #148]	; (8000314 <StartDefaultTask+0xc0>)
 800027e:	f000 f973 	bl	8000568 <lora_module_set_gpio>
  osDelay(50);
 8000282:	2032      	movs	r0, #50	; 0x32
 8000284:	f003 f990 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_RESET_CMD, NULL);
 8000288:	2100      	movs	r1, #0
 800028a:	4823      	ldr	r0, [pc, #140]	; (8000318 <StartDefaultTask+0xc4>)
 800028c:	f000 f9a2 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 8000290:	2032      	movs	r0, #50	; 0x32
 8000292:	f003 f989 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SET_DEV_EUI, hweui);
 8000296:	4b21      	ldr	r3, [pc, #132]	; (800031c <StartDefaultTask+0xc8>)
 8000298:	4821      	ldr	r0, [pc, #132]	; (8000320 <StartDefaultTask+0xcc>)
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	f000 f99a 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002a0:	2032      	movs	r0, #50	; 0x32
 80002a2:	f003 f981 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SET_APP_KEY, appKey);
 80002a6:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <StartDefaultTask+0xd0>)
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <StartDefaultTask+0xd4>)
 80002aa:	6819      	ldr	r1, [r3, #0]
 80002ac:	f000 f992 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002b0:	2032      	movs	r0, #50	; 0x32
 80002b2:	f003 f979 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SET_APP_EUI, appEui);
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <StartDefaultTask+0xd8>)
 80002b8:	481d      	ldr	r0, [pc, #116]	; (8000330 <StartDefaultTask+0xdc>)
 80002ba:	6819      	ldr	r1, [r3, #0]
 80002bc:	f000 f98a 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002c0:	2032      	movs	r0, #50	; 0x32
 80002c2:	f003 f971 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SET_PWRIDX, "1");
 80002c6:	491b      	ldr	r1, [pc, #108]	; (8000334 <StartDefaultTask+0xe0>)
 80002c8:	481b      	ldr	r0, [pc, #108]	; (8000338 <StartDefaultTask+0xe4>)
 80002ca:	f000 f983 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002ce:	2032      	movs	r0, #50	; 0x32
 80002d0:	f003 f96a 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SET_ADR_ON_CMD, "off");
 80002d4:	4c19      	ldr	r4, [pc, #100]	; (800033c <StartDefaultTask+0xe8>)
 80002d6:	481a      	ldr	r0, [pc, #104]	; (8000340 <StartDefaultTask+0xec>)
 80002d8:	0021      	movs	r1, r4
 80002da:	f000 f97b 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002de:	2032      	movs	r0, #50	; 0x32
 80002e0:	f003 f962 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SET_AR_ON_CMD, "off");
 80002e4:	0021      	movs	r1, r4
 80002e6:	4817      	ldr	r0, [pc, #92]	; (8000344 <StartDefaultTask+0xf0>)
 80002e8:	f000 f974 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002ec:	2032      	movs	r0, #50	; 0x32
 80002ee:	f003 f95b 	bl	80035a8 <osDelay>
  lora_module_send_command(RN_MAC_SAVE_CMD, NULL);
 80002f2:	4815      	ldr	r0, [pc, #84]	; (8000348 <StartDefaultTask+0xf4>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	f000 f96d 	bl	80005d4 <lora_module_send_command>
  osDelay(50);
 80002fa:	2032      	movs	r0, #50	; 0x32
 80002fc:	f003 f954 	bl	80035a8 <osDelay>
	  lora_module_join_otaa();
 8000300:	f000 f9b4 	bl	800066c <lora_module_join_otaa>
	  osDelay(9000);
 8000304:	4811      	ldr	r0, [pc, #68]	; (800034c <StartDefaultTask+0xf8>)
 8000306:	e7f9      	b.n	80002fc <StartDefaultTask+0xa8>
 8000308:	00000bb8 	.word	0x00000bb8
 800030c:	08004ccc 	.word	0x08004ccc
 8000310:	08004cd2 	.word	0x08004cd2
 8000314:	08004cd8 	.word	0x08004cd8
 8000318:	08004cde 	.word	0x08004cde
 800031c:	20000008 	.word	0x20000008
 8000320:	08004cec 	.word	0x08004cec
 8000324:	20000004 	.word	0x20000004
 8000328:	08004cfb 	.word	0x08004cfb
 800032c:	20000000 	.word	0x20000000
 8000330:	08004d0a 	.word	0x08004d0a
 8000334:	08004d19 	.word	0x08004d19
 8000338:	08004d1b 	.word	0x08004d1b
 800033c:	08004d2a 	.word	0x08004d2a
 8000340:	08004d2e 	.word	0x08004d2e
 8000344:	08004d3a 	.word	0x08004d3a
 8000348:	08004d45 	.word	0x08004d45
 800034c:	00002328 	.word	0x00002328

08000350 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000350:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000352:	4c0e      	ldr	r4, [pc, #56]	; (800038c <MX_FREERTOS_Init+0x3c>)
void MX_FREERTOS_Init(void) {
 8000354:	b08a      	sub	sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000356:	466b      	mov	r3, sp
 8000358:	0022      	movs	r2, r4
 800035a:	ca62      	ldmia	r2!, {r1, r5, r6}
 800035c:	c362      	stmia	r3!, {r1, r5, r6}
 800035e:	4668      	mov	r0, sp
 8000360:	ca22      	ldmia	r2!, {r1, r5}
 8000362:	c322      	stmia	r3!, {r1, r5}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000364:	2100      	movs	r1, #0
 8000366:	f003 f907 	bl	8003578 <osThreadCreate>
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_FREERTOS_Init+0x40>)
  osThreadDef(serviceTask, StartServiceTask, osPriorityIdle, 0, 128);
 800036c:	3414      	adds	r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800036e:	6018      	str	r0, [r3, #0]
  osThreadDef(serviceTask, StartServiceTask, osPriorityIdle, 0, 128);
 8000370:	a805      	add	r0, sp, #20
 8000372:	0002      	movs	r2, r0
 8000374:	cc2a      	ldmia	r4!, {r1, r3, r5}
 8000376:	c22a      	stmia	r2!, {r1, r3, r5}
 8000378:	cc0a      	ldmia	r4!, {r1, r3}
 800037a:	c20a      	stmia	r2!, {r1, r3}
  serviceTaskHandle = osThreadCreate(osThread(serviceTask), NULL);
 800037c:	2100      	movs	r1, #0
 800037e:	f003 f8fb 	bl	8003578 <osThreadCreate>
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <MX_FREERTOS_Init+0x44>)
 8000384:	6018      	str	r0, [r3, #0]
}
 8000386:	b00a      	add	sp, #40	; 0x28
 8000388:	bd70      	pop	{r4, r5, r6, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	08004c84 	.word	0x08004c84
 8000390:	2000117c 	.word	0x2000117c
 8000394:	20001178 	.word	0x20001178

08000398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	2214      	movs	r2, #20
 800039e:	2100      	movs	r1, #0
 80003a0:	a805      	add	r0, sp, #20
 80003a2:	f004 f82a 	bl	80043fa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	2080      	movs	r0, #128	; 0x80
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <MX_GPIO_Init+0xa4>)
 80003aa:	0300      	lsls	r0, r0, #12
 80003ac:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003ae:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4301      	orrs	r1, r0
 80003b2:	6159      	str	r1, [r3, #20]
 80003b4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003b6:	4d22      	ldr	r5, [pc, #136]	; (8000440 <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ba:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	9201      	str	r2, [sp, #4]
 80003be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c0:	6959      	ldr	r1, [r3, #20]
 80003c2:	03c0      	lsls	r0, r0, #15
 80003c4:	4301      	orrs	r1, r0
 80003c6:	6159      	str	r1, [r3, #20]
 80003c8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003ca:	0176      	lsls	r6, r6, #5
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003cc:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ce:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d0:	9202      	str	r2, [sp, #8]
 80003d2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	6959      	ldr	r1, [r3, #20]
 80003d6:	0280      	lsls	r0, r0, #10
 80003d8:	4301      	orrs	r1, r0
 80003da:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4002      	ands	r2, r0
 80003e4:	9203      	str	r2, [sp, #12]
 80003e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003ea:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	400b      	ands	r3, r1
 80003f6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003f8:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003fc:	f000 fc52 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000400:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000402:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000404:	019b      	lsls	r3, r3, #6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000406:	a905      	add	r1, sp, #20
 8000408:	480e      	ldr	r0, [pc, #56]	; (8000444 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800040a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000410:	f000 fb98 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000414:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000416:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000418:	33ff      	adds	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 800041c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f000 fb8f 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	a905      	add	r1, sp, #20
 800042a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800042c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000434:	f000 fb86 	bl	8000b44 <HAL_GPIO_Init>

}
 8000438:	b00a      	add	sp, #40	; 0x28
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	48000400 	.word	0x48000400
 8000444:	48000800 	.word	0x48000800

08000448 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000448:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_I2C1_Init+0x50>)
 800044c:	4c13      	ldr	r4, [pc, #76]	; (800049c <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044e:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000450:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000454:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8000456:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000458:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 800045c:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800045e:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000460:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000462:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000464:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000466:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000468:	f000 fc22 	bl	8000cb0 <HAL_I2C_Init>
 800046c:	2800      	cmp	r0, #0
 800046e:	d001      	beq.n	8000474 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000470:	f000 f984 	bl	800077c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000474:	2100      	movs	r1, #0
 8000476:	0020      	movs	r0, r4
 8000478:	f000 fc70 	bl	8000d5c <HAL_I2CEx_ConfigAnalogFilter>
 800047c:	2800      	cmp	r0, #0
 800047e:	d001      	beq.n	8000484 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000480:	f000 f97c 	bl	800077c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000484:	2100      	movs	r1, #0
 8000486:	0020      	movs	r0, r4
 8000488:	f000 fc8e 	bl	8000da8 <HAL_I2CEx_ConfigDigitalFilter>
 800048c:	2800      	cmp	r0, #0
 800048e:	d001      	beq.n	8000494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000490:	f000 f974 	bl	800077c <Error_Handler>
  }

}
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40005400 	.word	0x40005400
 800049c:	20001184 	.word	0x20001184
 80004a0:	2000090e 	.word	0x2000090e

080004a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a4:	b510      	push	{r4, lr}
 80004a6:	0004      	movs	r4, r0
 80004a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	2214      	movs	r2, #20
 80004ac:	2100      	movs	r1, #0
 80004ae:	a803      	add	r0, sp, #12
 80004b0:	f003 ffa3 	bl	80043fa <memset>
  if(i2cHandle->Instance==I2C1)
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_I2C_MspInit+0x60>)
 80004b6:	6822      	ldr	r2, [r4, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d120      	bne.n	80004fe <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	4c12      	ldr	r4, [pc, #72]	; (8000508 <HAL_I2C_MspInit+0x64>)
 80004c0:	02c9      	lsls	r1, r1, #11
 80004c2:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c4:	4811      	ldr	r0, [pc, #68]	; (800050c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	430a      	orrs	r2, r1
 80004c8:	6162      	str	r2, [r4, #20]
 80004ca:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	400b      	ands	r3, r1
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004da:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004e0:	3b11      	subs	r3, #17
 80004e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80004e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f000 fb2c 	bl	8000b44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	69e2      	ldr	r2, [r4, #28]
 80004f0:	0389      	lsls	r1, r1, #14
 80004f2:	430a      	orrs	r2, r1
 80004f4:	61e2      	str	r2, [r4, #28]
 80004f6:	69e3      	ldr	r3, [r4, #28]
 80004f8:	400b      	ands	r3, r1
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004fe:	b008      	add	sp, #32
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40005400 	.word	0x40005400
 8000508:	40021000 	.word	0x40021000
 800050c:	48000400 	.word	0x48000400

08000510 <lora_module_reboot>:
 *      Author: frazer
 */

#include "lora.h"

void lora_module_reboot() {
 8000510:	b530      	push	{r4, r5, lr}

	char buffer[50] = {'\0'};
 8000512:	2432      	movs	r4, #50	; 0x32
void lora_module_reboot() {
 8000514:	b08f      	sub	sp, #60	; 0x3c
	char buffer[50] = {'\0'};
 8000516:	0022      	movs	r2, r4
 8000518:	2100      	movs	r1, #0
 800051a:	a801      	add	r0, sp, #4
 800051c:	f003 ff6d 	bl	80043fa <memset>
	uint8_t len = 0;

	len = sprintf(buffer, "%s\r\n", RN_SYS_RESET);
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <lora_module_reboot+0x4c>)
 8000522:	490f      	ldr	r1, [pc, #60]	; (8000560 <lora_module_reboot+0x50>)
 8000524:	a801      	add	r0, sp, #4
 8000526:	f003 ff71 	bl	800440c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, 100);
 800052a:	4d0e      	ldr	r5, [pc, #56]	; (8000564 <lora_module_reboot+0x54>)
 800052c:	b2c2      	uxtb	r2, r0
 800052e:	2364      	movs	r3, #100	; 0x64
 8000530:	a901      	add	r1, sp, #4
 8000532:	0028      	movs	r0, r5
 8000534:	f002 f97c 	bl	8002830 <HAL_UART_Transmit>
	memset(buffer, '\0', 50);
 8000538:	0022      	movs	r2, r4
 800053a:	2100      	movs	r1, #0
 800053c:	a801      	add	r0, sp, #4
 800053e:	f003 ff5c 	bl	80043fa <memset>
	HAL_UART_Receive(&huart3, (uint8_t*)buffer, 50, 1000);
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	0022      	movs	r2, r4
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	a901      	add	r1, sp, #4
 800054a:	0028      	movs	r0, r5
 800054c:	f002 f9d6 	bl	80028fc <HAL_UART_Receive>

	CDC_Transmit_FS((uint8_t*)buffer, 50);
 8000550:	0021      	movs	r1, r4
 8000552:	a801      	add	r0, sp, #4
 8000554:	f003 fd06 	bl	8003f64 <CDC_Transmit_FS>
}
 8000558:	b00f      	add	sp, #60	; 0x3c
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	08004db7 	.word	0x08004db7
 8000560:	08004dc4 	.word	0x08004dc4
 8000564:	20001210 	.word	0x20001210

08000568 <lora_module_set_gpio>:

void lora_module_set_gpio(char *gpio, uint8_t state) {
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b089      	sub	sp, #36	; 0x24
 800056c:	0006      	movs	r6, r0
 800056e:	000f      	movs	r7, r1

	char buffer[30] = {'\0'};
 8000570:	221e      	movs	r2, #30
 8000572:	2100      	movs	r1, #0
 8000574:	4668      	mov	r0, sp
 8000576:	f003 ff40 	bl	80043fa <memset>
	uint8_t len = 0;

	while(strstr(buffer, "ok") == NULL) {
 800057a:	4913      	ldr	r1, [pc, #76]	; (80005c8 <lora_module_set_gpio+0x60>)
 800057c:	4668      	mov	r0, sp
 800057e:	f003 ff67 	bl	8004450 <strstr>
 8000582:	1e04      	subs	r4, r0, #0
 8000584:	d001      	beq.n	800058a <lora_module_set_gpio+0x22>
		memset(buffer, '\0', 30);
		HAL_UART_Receive(&huart3, (uint8_t*)buffer, 30, 200);

		//CDC_Transmit_FS((uint8_t*)buffer, 30);
	}
}
 8000586:	b009      	add	sp, #36	; 0x24
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(buffer, '\0', 30);
 800058a:	0021      	movs	r1, r4
 800058c:	221e      	movs	r2, #30
 800058e:	4668      	mov	r0, sp
 8000590:	f003 ff33 	bl	80043fa <memset>
		len = sprintf(buffer, "sys set pindig %s %u\r\n", gpio, state);
 8000594:	003b      	movs	r3, r7
 8000596:	0032      	movs	r2, r6
 8000598:	490c      	ldr	r1, [pc, #48]	; (80005cc <lora_module_set_gpio+0x64>)
 800059a:	4668      	mov	r0, sp
 800059c:	f003 ff36 	bl	800440c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, 100);
 80005a0:	4d0b      	ldr	r5, [pc, #44]	; (80005d0 <lora_module_set_gpio+0x68>)
 80005a2:	b2c2      	uxtb	r2, r0
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	4669      	mov	r1, sp
 80005a8:	0028      	movs	r0, r5
 80005aa:	f002 f941 	bl	8002830 <HAL_UART_Transmit>
		memset(buffer, '\0', 30);
 80005ae:	0021      	movs	r1, r4
 80005b0:	221e      	movs	r2, #30
 80005b2:	4668      	mov	r0, sp
 80005b4:	f003 ff21 	bl	80043fa <memset>
		HAL_UART_Receive(&huart3, (uint8_t*)buffer, 30, 200);
 80005b8:	23c8      	movs	r3, #200	; 0xc8
 80005ba:	221e      	movs	r2, #30
 80005bc:	4669      	mov	r1, sp
 80005be:	0028      	movs	r0, r5
 80005c0:	f002 f99c 	bl	80028fc <HAL_UART_Receive>
 80005c4:	e7d9      	b.n	800057a <lora_module_set_gpio+0x12>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	08004de0 	.word	0x08004de0
 80005cc:	08004dc9 	.word	0x08004dc9
 80005d0:	20001210 	.word	0x20001210

080005d4 <lora_module_send_command>:

void lora_module_send_command(char *command, char *value) {
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	b08f      	sub	sp, #60	; 0x3c
 80005d8:	0006      	movs	r6, r0
 80005da:	000f      	movs	r7, r1

	char buffer[50] = {'\0'};
 80005dc:	2232      	movs	r2, #50	; 0x32
 80005de:	2100      	movs	r1, #0
 80005e0:	a801      	add	r0, sp, #4
 80005e2:	f003 ff0a 	bl	80043fa <memset>
	uint8_t len = 0;
	uint8_t loop_count = 0;

	while(strstr(buffer, "ok") == NULL) {
 80005e6:	2504      	movs	r5, #4
 80005e8:	491c      	ldr	r1, [pc, #112]	; (800065c <lora_module_send_command+0x88>)
 80005ea:	a801      	add	r0, sp, #4
 80005ec:	f003 ff30 	bl	8004450 <strstr>
 80005f0:	1e01      	subs	r1, r0, #0
 80005f2:	d12a      	bne.n	800064a <lora_module_send_command+0x76>

		memset(buffer, '\0', 50);
 80005f4:	2232      	movs	r2, #50	; 0x32
 80005f6:	a801      	add	r0, sp, #4
 80005f8:	f003 feff 	bl	80043fa <memset>

		if(value != NULL) {
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d026      	beq.n	800064e <lora_module_send_command+0x7a>
			len = sprintf(buffer, "%s %s\r\n", command, value);
 8000600:	003b      	movs	r3, r7
 8000602:	0032      	movs	r2, r6
 8000604:	4916      	ldr	r1, [pc, #88]	; (8000660 <lora_module_send_command+0x8c>)
 8000606:	a801      	add	r0, sp, #4
 8000608:	f003 ff00 	bl	800440c <siprintf>
			CDC_Transmit_FS((uint8_t*)buffer, 50);
		}
		else {
			len = sprintf(buffer, "%s\r\n", command);
 800060c:	b2c4      	uxtb	r4, r0
			CDC_Transmit_FS((uint8_t*)buffer, 50);
 800060e:	2132      	movs	r1, #50	; 0x32
 8000610:	a801      	add	r0, sp, #4
 8000612:	f003 fca7 	bl	8003f64 <CDC_Transmit_FS>
		}

		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, 100);
 8000616:	b2a2      	uxth	r2, r4
 8000618:	4c12      	ldr	r4, [pc, #72]	; (8000664 <lora_module_send_command+0x90>)
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	a901      	add	r1, sp, #4
 800061e:	0020      	movs	r0, r4
 8000620:	f002 f906 	bl	8002830 <HAL_UART_Transmit>

		memset(buffer, '\0', 50);
 8000624:	2232      	movs	r2, #50	; 0x32
 8000626:	2100      	movs	r1, #0
 8000628:	a801      	add	r0, sp, #4
 800062a:	f003 fee6 	bl	80043fa <memset>
 800062e:	3d01      	subs	r5, #1
		HAL_UART_Receive(&huart3, (uint8_t*)buffer, 50, 200);
 8000630:	23c8      	movs	r3, #200	; 0xc8
 8000632:	2232      	movs	r2, #50	; 0x32
 8000634:	a901      	add	r1, sp, #4
 8000636:	0020      	movs	r0, r4
 8000638:	f002 f960 	bl	80028fc <HAL_UART_Receive>
 800063c:	b2ed      	uxtb	r5, r5

		CDC_Transmit_FS((uint8_t*)buffer, 50);
 800063e:	2132      	movs	r1, #50	; 0x32
 8000640:	a801      	add	r0, sp, #4
 8000642:	f003 fc8f 	bl	8003f64 <CDC_Transmit_FS>

		if(loop_count >= 3) {
 8000646:	2d00      	cmp	r5, #0
 8000648:	d1ce      	bne.n	80005e8 <lora_module_send_command+0x14>
		else {
			loop_count++;
		}

	}
}
 800064a:	b00f      	add	sp, #60	; 0x3c
 800064c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			len = sprintf(buffer, "%s\r\n", command);
 800064e:	0032      	movs	r2, r6
 8000650:	4905      	ldr	r1, [pc, #20]	; (8000668 <lora_module_send_command+0x94>)
 8000652:	a801      	add	r0, sp, #4
 8000654:	f003 feda 	bl	800440c <siprintf>
 8000658:	e7d8      	b.n	800060c <lora_module_send_command+0x38>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	08004de0 	.word	0x08004de0
 8000660:	08004dc1 	.word	0x08004dc1
 8000664:	20001210 	.word	0x20001210
 8000668:	08004dc4 	.word	0x08004dc4

0800066c <lora_module_join_otaa>:

void lora_module_join_otaa() {
 800066c:	b530      	push	{r4, r5, lr}

	char buffer[50] = {'\0'};
 800066e:	2432      	movs	r4, #50	; 0x32
void lora_module_join_otaa() {
 8000670:	b08f      	sub	sp, #60	; 0x3c
	char buffer[50] = {'\0'};
 8000672:	0022      	movs	r2, r4
 8000674:	2100      	movs	r1, #0
 8000676:	a801      	add	r0, sp, #4
 8000678:	f003 febf 	bl	80043fa <memset>
	uint8_t len = 0;

	len = sprintf(buffer, "%s\r\n", RN_JOIN_OTAA_MODE);
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <lora_module_join_otaa+0x4c>)
 800067e:	490f      	ldr	r1, [pc, #60]	; (80006bc <lora_module_join_otaa+0x50>)
 8000680:	a801      	add	r0, sp, #4
 8000682:	f003 fec3 	bl	800440c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, 100);
 8000686:	4d0e      	ldr	r5, [pc, #56]	; (80006c0 <lora_module_join_otaa+0x54>)
 8000688:	b2c2      	uxtb	r2, r0
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	a901      	add	r1, sp, #4
 800068e:	0028      	movs	r0, r5
 8000690:	f002 f8ce 	bl	8002830 <HAL_UART_Transmit>
	memset(buffer, '\0', 50);
 8000694:	0022      	movs	r2, r4
 8000696:	2100      	movs	r1, #0
 8000698:	a801      	add	r0, sp, #4
 800069a:	f003 feae 	bl	80043fa <memset>
	HAL_UART_Receive(&huart3, (uint8_t*)buffer, 50, 1000);
 800069e:	23fa      	movs	r3, #250	; 0xfa
 80006a0:	0022      	movs	r2, r4
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	a901      	add	r1, sp, #4
 80006a6:	0028      	movs	r0, r5
 80006a8:	f002 f928 	bl	80028fc <HAL_UART_Receive>

	CDC_Transmit_FS((uint8_t*)buffer, 50);
 80006ac:	0021      	movs	r1, r4
 80006ae:	a801      	add	r0, sp, #4
 80006b0:	f003 fc58 	bl	8003f64 <CDC_Transmit_FS>
}
 80006b4:	b00f      	add	sp, #60	; 0x3c
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	08004da9 	.word	0x08004da9
 80006bc:	08004dc4 	.word	0x08004dc4
 80006c0:	20001210 	.word	0x20001210

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2410      	movs	r4, #16
{
 80006c8:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	a80a      	add	r0, sp, #40	; 0x28
 80006d0:	f003 fe93 	bl	80043fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	0022      	movs	r2, r4
 80006d6:	2100      	movs	r1, #0
 80006d8:	a801      	add	r0, sp, #4
 80006da:	f003 fe8e 	bl	80043fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006de:	2214      	movs	r2, #20
 80006e0:	2100      	movs	r1, #0
 80006e2:	a805      	add	r0, sp, #20
 80006e4:	f003 fe89 	bl	80043fa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006e8:	2303      	movs	r3, #3
 80006ea:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	025b      	lsls	r3, r3, #9
 80006f0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006f2:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006f8:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000700:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000702:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f001 fa7b 	bl	8001c00 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000710:	0029      	movs	r1, r5
 8000712:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071a:	f001 fc89 	bl	8002030 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SystemClock_Config+0x70>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000722:	9305      	str	r3, [sp, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000724:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000726:	9408      	str	r4, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000728:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072a:	f001 fd43 	bl	80021b4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800072e:	b017      	add	sp, #92	; 0x5c
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	00020020 	.word	0x00020020

08000738 <main>:
{
 8000738:	b510      	push	{r4, lr}
  HAL_Init();
 800073a:	f000 f987 	bl	8000a4c <HAL_Init>
  SystemClock_Config();
 800073e:	f7ff ffc1 	bl	80006c4 <SystemClock_Config>
  MX_GPIO_Init();
 8000742:	f7ff fe29 	bl	8000398 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000746:	f7ff fe7f 	bl	8000448 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800074a:	f000 f8e3 	bl	8000914 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800074e:	f000 f8fd 	bl	800094c <MX_USART3_UART_Init>
  MX_FREERTOS_Init();
 8000752:	f7ff fdfd 	bl	8000350 <MX_FREERTOS_Init>
  osKernelStart();
 8000756:	f002 ff0a 	bl	800356e <osKernelStart>
 800075a:	e7fe      	b.n	800075a <main+0x22>

0800075c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800075e:	6802      	ldr	r2, [r0, #0]
{
 8000760:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8000762:	429a      	cmp	r2, r3
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000766:	f000 f981 	bl	8000a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bd10      	pop	{r4, pc}
 800076c:	40012c00 	.word	0x40012c00

08000770 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	uart_rx_flag = 1;
 8000770:	2201      	movs	r2, #1
 8000772:	4b01      	ldr	r3, [pc, #4]	; (8000778 <HAL_UART_RxCpltCallback+0x8>)
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	4770      	bx	lr
 8000778:	20001180 	.word	0x20001180

0800077c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800077c:	4770      	bx	lr
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2001      	movs	r0, #1
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x34>)
 8000786:	6999      	ldr	r1, [r3, #24]
 8000788:	4301      	orrs	r1, r0
 800078a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4002      	ands	r2, r0
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800079a:	3803      	subs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007a2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	400b      	ands	r3, r1
 80007a6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007a8:	2103      	movs	r1, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007ac:	f000 f96c 	bl	8000a88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bd07      	pop	{r0, r1, r2, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b510      	push	{r4, lr}
 80007ba:	0001      	movs	r1, r0
 80007bc:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80007be:	2200      	movs	r2, #0
 80007c0:	200d      	movs	r0, #13
 80007c2:	f000 f961 	bl	8000a88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80007c6:	200d      	movs	r0, #13
 80007c8:	f000 f98e 	bl	8000ae8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007cc:	2080      	movs	r0, #128	; 0x80
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_InitTick+0x68>)
 80007d0:	0100      	lsls	r0, r0, #4
 80007d2:	6991      	ldr	r1, [r2, #24]
 80007d4:	4301      	orrs	r1, r0
 80007d6:	6191      	str	r1, [r2, #24]
 80007d8:	6993      	ldr	r3, [r2, #24]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007da:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007dc:	4003      	ands	r3, r0
 80007de:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e0:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007e2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e4:	f001 fcca 	bl	800217c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007e8:	f001 fcb8 	bl	800215c <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007ec:	4c0d      	ldr	r4, [pc, #52]	; (8000824 <HAL_InitTick+0x6c>)
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007f0:	490e      	ldr	r1, [pc, #56]	; (800082c <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 80007f2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_InitTick+0x78>)
 80007f6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007f8:	f7ff fc9a 	bl	8000130 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80007fc:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007fe:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000800:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000802:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8000804:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000808:	f001 fe5c 	bl	80024c4 <HAL_TIM_Base_Init>
 800080c:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800080e:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim1);
 8000814:	0020      	movs	r0, r4
 8000816:	f001 fd5a 	bl	80022ce <HAL_TIM_Base_Start_IT>
}
 800081a:	b006      	add	sp, #24
 800081c:	bd10      	pop	{r4, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40021000 	.word	0x40021000
 8000824:	200011d0 	.word	0x200011d0
 8000828:	40012c00 	.word	0x40012c00
 800082c:	000f4240 	.word	0x000f4240
 8000830:	000003e7 	.word	0x000003e7

08000834 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000834:	4770      	bx	lr

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler>

08000838 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000838:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800083a:	4802      	ldr	r0, [pc, #8]	; (8000844 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 800083c:	f001 fd55 	bl	80022ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000840:	bd10      	pop	{r4, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	200011d0 	.word	0x200011d0

08000848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000848:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800084a:	4802      	ldr	r0, [pc, #8]	; (8000854 <USART2_IRQHandler+0xc>)
 800084c:	f002 f954 	bl	8002af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000850:	bd10      	pop	{r4, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20001280 	.word	0x20001280

08000858 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800085a:	4802      	ldr	r0, [pc, #8]	; (8000864 <USART3_4_IRQHandler+0xc>)
 800085c:	f002 f94c 	bl	8002af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000860:	bd10      	pop	{r4, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20001210 	.word	0x20001210

08000868 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800086a:	4802      	ldr	r0, [pc, #8]	; (8000874 <USB_IRQHandler+0xc>)
 800086c:	f000 ff74 	bl	8001758 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000870:	bd10      	pop	{r4, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20001ee8 	.word	0x20001ee8

08000878 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <_sbrk+0x2c>)
{
 800087a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800087c:	6819      	ldr	r1, [r3, #0]
{
 800087e:	0002      	movs	r2, r0
	if (heap_end == 0)
 8000880:	2900      	cmp	r1, #0
 8000882:	d101      	bne.n	8000888 <_sbrk+0x10>
		heap_end = &end;
 8000884:	4908      	ldr	r1, [pc, #32]	; (80008a8 <_sbrk+0x30>)
 8000886:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000888:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800088a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800088c:	1882      	adds	r2, r0, r2
 800088e:	428a      	cmp	r2, r1
 8000890:	d906      	bls.n	80008a0 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000892:	f003 fd7f 	bl	8004394 <__errno>
 8000896:	230c      	movs	r3, #12
 8000898:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800089a:	2001      	movs	r0, #1
 800089c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800089e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80008a0:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80008a2:	e7fc      	b.n	800089e <_sbrk+0x26>
 80008a4:	20000204 	.word	0x20000204
 80008a8:	2000210c 	.word	0x2000210c

080008ac <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80008ac:	2101      	movs	r1, #1
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <SystemInit+0x50>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <SystemInit+0x54>)
  RCC->CR |= (uint32_t)0x00000001U;
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	4002      	ands	r2, r0
 80008bc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4810      	ldr	r0, [pc, #64]	; (8000904 <SystemInit+0x58>)
 80008c2:	4002      	ands	r2, r0
 80008c4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <SystemInit+0x5c>)
 80008ca:	4002      	ands	r2, r0
 80008cc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	480e      	ldr	r0, [pc, #56]	; (800090c <SystemInit+0x60>)
 80008d2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80008d4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80008d6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4382      	bics	r2, r0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <SystemInit+0x64>)
 80008e2:	4002      	ands	r2, r0
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80008ea:	4302      	orrs	r2, r0
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80008ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f0:	438a      	bics	r2, r1
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]

}
 80008f8:	4770      	bx	lr
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000
 8000900:	08ffb80c 	.word	0x08ffb80c
 8000904:	fef6ffff 	.word	0xfef6ffff
 8000908:	fffbffff 	.word	0xfffbffff
 800090c:	ffc0ffff 	.word	0xffc0ffff
 8000910:	fffffe6c 	.word	0xfffffe6c

08000914 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x30>)
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x34>)
{
 8000918:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800091a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 800091c:	2396      	movs	r3, #150	; 0x96
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000922:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000924:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000926:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000928:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	f001 ff0d 	bl	8002754 <HAL_UART_Init>
 800093a:	2800      	cmp	r0, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 800093e:	f7ff ff1d 	bl	800077c <Error_Handler>
  }

}
 8000942:	bd10      	pop	{r4, pc}
 8000944:	20001280 	.word	0x20001280
 8000948:	40004400 	.word	0x40004400

0800094c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_USART3_UART_Init+0x30>)
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART3_UART_Init+0x34>)
{
 8000950:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 8000952:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 57600;
 8000954:	23e1      	movs	r3, #225	; 0xe1
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000960:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000962:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000964:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	f001 fef1 	bl	8002754 <HAL_UART_Init>
 8000972:	2800      	cmp	r0, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x2e>
  {
    Error_Handler();
 8000976:	f7ff ff01 	bl	800077c <Error_Handler>
  }

}
 800097a:	bd10      	pop	{r4, pc}
 800097c:	20001210 	.word	0x20001210
 8000980:	40004800 	.word	0x40004800

08000984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000984:	b510      	push	{r4, lr}
 8000986:	0004      	movs	r4, r0
 8000988:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	2214      	movs	r2, #20
 800098c:	2100      	movs	r1, #0
 800098e:	a805      	add	r0, sp, #20
 8000990:	f003 fd33 	bl	80043fa <memset>
  if(uartHandle->Instance==USART2)
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <HAL_UART_MspInit+0xb8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d127      	bne.n	80009ec <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <HAL_UART_MspInit+0xbc>)
 80009a0:	0292      	lsls	r2, r2, #10
 80009a2:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4311      	orrs	r1, r2
 80009a8:	61d9      	str	r1, [r3, #28]
 80009aa:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ae:	4011      	ands	r1, r2
 80009b0:	9101      	str	r1, [sp, #4]
 80009b2:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4311      	orrs	r1, r2
 80009ba:	6159      	str	r1, [r3, #20]
 80009bc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	401a      	ands	r2, r3
 80009c2:	9202      	str	r2, [sp, #8]
 80009c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c6:	230c      	movs	r3, #12
 80009c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	3b0a      	subs	r3, #10
 80009cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009ce:	3b01      	subs	r3, #1
 80009d0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f000 f8b6 	bl	8000b44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80009d8:	201c      	movs	r0, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	0021      	movs	r1, r4
 80009de:	f000 f853 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009e2:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80009e4:	f000 f880 	bl	8000ae8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009e8:	b00a      	add	sp, #40	; 0x28
 80009ea:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0xc0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d1fa      	bne.n	80009e8 <HAL_UART_MspInit+0x64>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_UART_MspInit+0xbc>)
 80009f6:	02d2      	lsls	r2, r2, #11
 80009f8:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fa:	2403      	movs	r4, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fc:	4311      	orrs	r1, r2
 80009fe:	61d9      	str	r1, [r3, #28]
 8000a00:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a04:	4011      	ands	r1, r2
 8000a06:	9103      	str	r1, [sp, #12]
 8000a08:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	6959      	ldr	r1, [r3, #20]
 8000a0c:	4311      	orrs	r1, r2
 8000a0e:	6159      	str	r1, [r3, #20]
 8000a10:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	401a      	ands	r2, r3
 8000a16:	9204      	str	r2, [sp, #16]
 8000a18:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a1a:	23c0      	movs	r3, #192	; 0xc0
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000a24:	18db      	adds	r3, r3, r3
 8000a26:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f000 f88b 	bl	8000b44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8000a2e:	201d      	movs	r0, #29
 8000a30:	2200      	movs	r2, #0
 8000a32:	0021      	movs	r1, r4
 8000a34:	f000 f828 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000a38:	201d      	movs	r0, #29
 8000a3a:	e7d3      	b.n	80009e4 <HAL_UART_MspInit+0x60>
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40004800 	.word	0x40004800
 8000a48:	48000400 	.word	0x48000400

08000a4c <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_Init+0x1c>)
{
 8000a50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a52:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a54:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	f7ff fead 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5e:	f7ff fe8f 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000a62:	2000      	movs	r0, #0
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a6c:	4a02      	ldr	r2, [pc, #8]	; (8000a78 <HAL_IncTick+0xc>)
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	4770      	bx	lr
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200012f0 	.word	0x200012f0

08000a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a7c:	4b01      	ldr	r3, [pc, #4]	; (8000a84 <HAL_GetTick+0x8>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
}
 8000a80:	4770      	bx	lr
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	200012f0 	.word	0x200012f0

08000a88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	da14      	bge.n	8000aba <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	230f      	movs	r3, #15
 8000a92:	b2c0      	uxtb	r0, r0
 8000a94:	4003      	ands	r3, r0
 8000a96:	3b08      	subs	r3, #8
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <HAL_NVIC_SetPriority+0x58>)
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4010      	ands	r0, r2
 8000aa4:	4090      	lsls	r0, r2
 8000aa6:	32fc      	adds	r2, #252	; 0xfc
 8000aa8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	69dc      	ldr	r4, [r3, #28]
 8000ab2:	43ac      	bics	r4, r5
 8000ab4:	4321      	orrs	r1, r4
 8000ab6:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	2503      	movs	r5, #3
 8000abc:	0883      	lsrs	r3, r0, #2
 8000abe:	4028      	ands	r0, r5
 8000ac0:	40a8      	lsls	r0, r5
 8000ac2:	35fc      	adds	r5, #252	; 0xfc
 8000ac4:	002e      	movs	r6, r5
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_NVIC_SetPriority+0x5c>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	189b      	adds	r3, r3, r2
 8000acc:	22c0      	movs	r2, #192	; 0xc0
 8000ace:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad0:	4029      	ands	r1, r5
 8000ad2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	589c      	ldr	r4, [r3, r2]
 8000ad8:	43b4      	bics	r4, r6
 8000ada:	4321      	orrs	r1, r4
 8000adc:	5099      	str	r1, [r3, r2]
 8000ade:	e7eb      	b.n	8000ab8 <HAL_NVIC_SetPriority+0x30>
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ae8:	231f      	movs	r3, #31
 8000aea:	4018      	ands	r0, r3
 8000aec:	3b1e      	subs	r3, #30
 8000aee:	4083      	lsls	r3, r0
 8000af0:	4a01      	ldr	r2, [pc, #4]	; (8000af8 <HAL_NVIC_EnableIRQ+0x10>)
 8000af2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000af4:	4770      	bx	lr
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	e000e100 	.word	0xe000e100

08000afc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000afc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000afe:	1c84      	adds	r4, r0, #2
 8000b00:	7fe3      	ldrb	r3, [r4, #31]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d004      	beq.n	8000b10 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b06:	2304      	movs	r3, #4
 8000b08:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b0a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b10:	210e      	movs	r1, #14
 8000b12:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b14:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	438a      	bics	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	4391      	bics	r1, r2
 8000b22:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b24:	0011      	movs	r1, r2
 8000b26:	40a9      	lsls	r1, r5
 8000b28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b2a:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000b2e:	2400      	movs	r4, #0
 8000b30:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000b32:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000b34:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000b36:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000b38:	42a2      	cmp	r2, r4
 8000b3a:	d0e7      	beq.n	8000b0c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000b3c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000b3e:	0023      	movs	r3, r4
 8000b40:	e7e4      	b.n	8000b0c <HAL_DMA_Abort_IT+0x10>
	...

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b46:	680b      	ldr	r3, [r1, #0]
{ 
 8000b48:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b4a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000b4c:	2300      	movs	r3, #0
{ 
 8000b4e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b50:	9a02      	ldr	r2, [sp, #8]
 8000b52:	40da      	lsrs	r2, r3
 8000b54:	d101      	bne.n	8000b5a <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000b56:	b007      	add	sp, #28
 8000b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	9203      	str	r2, [sp, #12]
 8000b60:	9903      	ldr	r1, [sp, #12]
 8000b62:	9a02      	ldr	r2, [sp, #8]
 8000b64:	400a      	ands	r2, r1
 8000b66:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000b68:	d100      	bne.n	8000b6c <HAL_GPIO_Init+0x28>
 8000b6a:	e08c      	b.n	8000c86 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b6c:	9a01      	ldr	r2, [sp, #4]
 8000b6e:	2110      	movs	r1, #16
 8000b70:	6852      	ldr	r2, [r2, #4]
 8000b72:	0016      	movs	r6, r2
 8000b74:	438e      	bics	r6, r1
 8000b76:	2e02      	cmp	r6, #2
 8000b78:	d10e      	bne.n	8000b98 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000b7a:	2507      	movs	r5, #7
 8000b7c:	401d      	ands	r5, r3
 8000b7e:	00ad      	lsls	r5, r5, #2
 8000b80:	3901      	subs	r1, #1
 8000b82:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000b84:	08dc      	lsrs	r4, r3, #3
 8000b86:	00a4      	lsls	r4, r4, #2
 8000b88:	1904      	adds	r4, r0, r4
 8000b8a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000b8c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000b8e:	9901      	ldr	r1, [sp, #4]
 8000b90:	6909      	ldr	r1, [r1, #16]
 8000b92:	40a9      	lsls	r1, r5
 8000b94:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000b96:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b98:	2403      	movs	r4, #3
 8000b9a:	005f      	lsls	r7, r3, #1
 8000b9c:	40bc      	lsls	r4, r7
 8000b9e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000ba0:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba2:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000ba4:	4025      	ands	r5, r4
 8000ba6:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba8:	2503      	movs	r5, #3
 8000baa:	4015      	ands	r5, r2
 8000bac:	40bd      	lsls	r5, r7
 8000bae:	4661      	mov	r1, ip
 8000bb0:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000bb2:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb4:	2e01      	cmp	r6, #1
 8000bb6:	d80f      	bhi.n	8000bd8 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000bb8:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000bba:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000bbc:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bbe:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000bc0:	40bd      	lsls	r5, r7
 8000bc2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000bc4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bc6:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000bc8:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bca:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000bcc:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bce:	2101      	movs	r1, #1
 8000bd0:	400d      	ands	r5, r1
 8000bd2:	409d      	lsls	r5, r3
 8000bd4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000bd6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bd8:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000bda:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bdc:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000bde:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000be0:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000be2:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000be4:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000be6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000be8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000bea:	420a      	tst	r2, r1
 8000bec:	d04b      	beq.n	8000c86 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4c26      	ldr	r4, [pc, #152]	; (8000c8c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bf2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bf6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	430d      	orrs	r5, r1
 8000bfa:	61a5      	str	r5, [r4, #24]
 8000bfc:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000bfe:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	400c      	ands	r4, r1
 8000c02:	9405      	str	r4, [sp, #20]
 8000c04:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c06:	240f      	movs	r4, #15
 8000c08:	4921      	ldr	r1, [pc, #132]	; (8000c90 <HAL_GPIO_Init+0x14c>)
 8000c0a:	00ad      	lsls	r5, r5, #2
 8000c0c:	00b6      	lsls	r6, r6, #2
 8000c0e:	186d      	adds	r5, r5, r1
 8000c10:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c12:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000c14:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c16:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c18:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c1a:	2400      	movs	r4, #0
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	d00c      	beq.n	8000c3a <HAL_GPIO_Init+0xf6>
 8000c20:	491c      	ldr	r1, [pc, #112]	; (8000c94 <HAL_GPIO_Init+0x150>)
 8000c22:	3401      	adds	r4, #1
 8000c24:	4288      	cmp	r0, r1
 8000c26:	d008      	beq.n	8000c3a <HAL_GPIO_Init+0xf6>
 8000c28:	491b      	ldr	r1, [pc, #108]	; (8000c98 <HAL_GPIO_Init+0x154>)
 8000c2a:	3401      	adds	r4, #1
 8000c2c:	4288      	cmp	r0, r1
 8000c2e:	d004      	beq.n	8000c3a <HAL_GPIO_Init+0xf6>
 8000c30:	491a      	ldr	r1, [pc, #104]	; (8000c9c <HAL_GPIO_Init+0x158>)
 8000c32:	3403      	adds	r4, #3
 8000c34:	4288      	cmp	r0, r1
 8000c36:	d100      	bne.n	8000c3a <HAL_GPIO_Init+0xf6>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c3c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000c40:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c42:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000c44:	4c16      	ldr	r4, [pc, #88]	; (8000ca0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c46:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000c48:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000c4a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4c:	03d1      	lsls	r1, r2, #15
 8000c4e:	d401      	bmi.n	8000c54 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c50:	003e      	movs	r6, r7
 8000c52:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000c54:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000c56:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000c58:	9e00      	ldr	r6, [sp, #0]
 8000c5a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5c:	0391      	lsls	r1, r2, #14
 8000c5e:	d401      	bmi.n	8000c64 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c60:	003e      	movs	r6, r7
 8000c62:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000c64:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000c66:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000c68:	9e00      	ldr	r6, [sp, #0]
 8000c6a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c6c:	02d1      	lsls	r1, r2, #11
 8000c6e:	d401      	bmi.n	8000c74 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c70:	003e      	movs	r6, r7
 8000c72:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000c74:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000c76:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000c78:	9f00      	ldr	r7, [sp, #0]
 8000c7a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c7c:	0292      	lsls	r2, r2, #10
 8000c7e:	d401      	bmi.n	8000c84 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c80:	402e      	ands	r6, r5
 8000c82:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000c84:	60e7      	str	r7, [r4, #12]
    position++;
 8000c86:	3301      	adds	r3, #1
 8000c88:	e762      	b.n	8000b50 <HAL_GPIO_Init+0xc>
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000caa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cac:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000cae:	e7fc      	b.n	8000caa <HAL_GPIO_WritePin+0x6>

08000cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000cb4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d03f      	beq.n	8000d3a <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cba:	0025      	movs	r5, r4
 8000cbc:	3541      	adds	r5, #65	; 0x41
 8000cbe:	782b      	ldrb	r3, [r5, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d105      	bne.n	8000cd2 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cc6:	0022      	movs	r2, r4
 8000cc8:	3240      	adds	r2, #64	; 0x40
 8000cca:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ccc:	0020      	movs	r0, r4
 8000cce:	f7ff fbe9 	bl	80004a4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd2:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000cd8:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cda:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	68a6      	ldr	r6, [r4, #8]
 8000ce0:	438a      	bics	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ce4:	6861      	ldr	r1, [r4, #4]
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <HAL_I2C_Init+0xa0>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cec:	6899      	ldr	r1, [r3, #8]
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_I2C_Init+0xa4>)
 8000cf0:	4011      	ands	r1, r2
 8000cf2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cf4:	2801      	cmp	r0, #1
 8000cf6:	d121      	bne.n	8000d3c <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0209      	lsls	r1, r1, #8
 8000cfc:	4331      	orrs	r1, r6
 8000cfe:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d00:	6858      	ldr	r0, [r3, #4]
 8000d02:	4915      	ldr	r1, [pc, #84]	; (8000d58 <HAL_I2C_Init+0xa8>)
 8000d04:	4301      	orrs	r1, r0
 8000d06:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d08:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d0a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d10:	6961      	ldr	r1, [r4, #20]
 8000d12:	6922      	ldr	r2, [r4, #16]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	69a1      	ldr	r1, [r4, #24]
 8000d18:	0209      	lsls	r1, r1, #8
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d1e:	6a21      	ldr	r1, [r4, #32]
 8000d20:	69e2      	ldr	r2, [r4, #28]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d26:	2201      	movs	r2, #1
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d30:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d32:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d34:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d36:	3442      	adds	r4, #66	; 0x42
 8000d38:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d3c:	2184      	movs	r1, #132	; 0x84
 8000d3e:	0209      	lsls	r1, r1, #8
 8000d40:	4331      	orrs	r1, r6
 8000d42:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d44:	2802      	cmp	r0, #2
 8000d46:	d1db      	bne.n	8000d00 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	0109      	lsls	r1, r1, #4
 8000d4c:	6059      	str	r1, [r3, #4]
 8000d4e:	e7d7      	b.n	8000d00 <HAL_I2C_Init+0x50>
 8000d50:	f0ffffff 	.word	0xf0ffffff
 8000d54:	ffff7fff 	.word	0xffff7fff
 8000d58:	02008000 	.word	0x02008000

08000d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d5e:	0004      	movs	r4, r0
 8000d60:	3441      	adds	r4, #65	; 0x41
 8000d62:	7822      	ldrb	r2, [r4, #0]
{
 8000d64:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d66:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d68:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d6a:	2a20      	cmp	r2, #32
 8000d6c:	d118      	bne.n	8000da0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000d6e:	001d      	movs	r5, r3
 8000d70:	3540      	adds	r5, #64	; 0x40
 8000d72:	782e      	ldrb	r6, [r5, #0]
 8000d74:	2e01      	cmp	r6, #1
 8000d76:	d013      	beq.n	8000da0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000d78:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d7a:	3022      	adds	r0, #34	; 0x22
 8000d7c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000d7e:	681e      	ldr	r6, [r3, #0]
 8000d80:	3823      	subs	r0, #35	; 0x23
 8000d82:	4386      	bics	r6, r0
 8000d84:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d86:	681e      	ldr	r6, [r3, #0]
 8000d88:	4f06      	ldr	r7, [pc, #24]	; (8000da4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000d8a:	403e      	ands	r6, r7
 8000d8c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d8e:	681e      	ldr	r6, [r3, #0]
 8000d90:	4331      	orrs	r1, r6
 8000d92:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	4308      	orrs	r0, r1
 8000d98:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d9a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d9c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000d9e:	7028      	strb	r0, [r5, #0]
  }
}
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	ffffefff 	.word	0xffffefff

08000da8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000daa:	0005      	movs	r5, r0
 8000dac:	3541      	adds	r5, #65	; 0x41
 8000dae:	782a      	ldrb	r2, [r5, #0]
{
 8000db0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000db2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000db4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000db6:	2a20      	cmp	r2, #32
 8000db8:	d117      	bne.n	8000dea <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000dba:	001c      	movs	r4, r3
 8000dbc:	3440      	adds	r4, #64	; 0x40
 8000dbe:	7826      	ldrb	r6, [r4, #0]
 8000dc0:	2e01      	cmp	r6, #1
 8000dc2:	d012      	beq.n	8000dea <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000dc4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dc6:	3022      	adds	r0, #34	; 0x22
 8000dc8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000dca:	681e      	ldr	r6, [r3, #0]
 8000dcc:	3823      	subs	r0, #35	; 0x23
 8000dce:	4386      	bics	r6, r0
 8000dd0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000dd2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000dd4:	4f05      	ldr	r7, [pc, #20]	; (8000dec <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000dd6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000dd8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000dda:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000ddc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	4308      	orrs	r0, r1
 8000de2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000de4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000de6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000de8:	7020      	strb	r0, [r4, #0]
  }
}
 8000dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dec:	fffff0ff 	.word	0xfffff0ff

08000df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	0004      	movs	r4, r0
  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8000df4:	2001      	movs	r0, #1
  if(hpcd == NULL)
 8000df6:	2c00      	cmp	r4, #0
 8000df8:	d02b      	beq.n	8000e52 <HAL_PCD_Init+0x62>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000dfa:	25ea      	movs	r5, #234	; 0xea
 8000dfc:	35ff      	adds	r5, #255	; 0xff
 8000dfe:	5d63      	ldrb	r3, [r4, r5]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <HAL_PCD_Init+0x22>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e06:	22f4      	movs	r2, #244	; 0xf4
 8000e08:	0052      	lsls	r2, r2, #1
 8000e0a:	54a3      	strb	r3, [r4, r2]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e0c:	0020      	movs	r0, r4
 8000e0e:	f003 f937 	bl	8004080 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e12:	2303      	movs	r3, #3
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000e14:	2200      	movs	r2, #0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e16:	5563      	strb	r3, [r4, r5]
 8000e18:	0023      	movs	r3, r4
 8000e1a:	0011      	movs	r1, r2
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000e1c:	2601      	movs	r6, #1
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000e1e:	6860      	ldr	r0, [r4, #4]
 8000e20:	3328      	adds	r3, #40	; 0x28
 8000e22:	4282      	cmp	r2, r0
 8000e24:	d116      	bne.n	8000e54 <HAL_PCD_Init+0x64>
 8000e26:	2100      	movs	r1, #0
 8000e28:	0023      	movs	r3, r4
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000e2a:	0008      	movs	r0, r1
 8000e2c:	3309      	adds	r3, #9
 8000e2e:	33ff      	adds	r3, #255	; 0xff
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000e30:	428a      	cmp	r2, r1
 8000e32:	d118      	bne.n	8000e66 <HAL_PCD_Init+0x76>
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8000e34:	2000      	movs	r0, #0
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000e36:	2101      	movs	r1, #1
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	1c9a      	adds	r2, r3, #2
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8000e3c:	1d9e      	adds	r6, r3, #6
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000e3e:	3350      	adds	r3, #80	; 0x50
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000e40:	87d1      	strh	r1, [r2, #62]	; 0x3e
 hpcd->Instance->CNTR = 0;
 8000e42:	87d0      	strh	r0, [r2, #62]	; 0x3e
 hpcd->Instance->ISTR = 0;
 8000e44:	87f0      	strh	r0, [r6, #62]	; 0x3e
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000e46:	8018      	strh	r0, [r3, #0]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_PCD_Init+0x88>)
 8000e4a:	87d3      	strh	r3, [r2, #62]	; 0x3e
  
  hpcd->USB_Address = 0U;
 8000e4c:	1d63      	adds	r3, r4, #5
 8000e4e:	77d8      	strb	r0, [r3, #31]
  hpcd->State= HAL_PCD_STATE_READY;
 8000e50:	5561      	strb	r1, [r4, r5]

 return HAL_OK;
}
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
   hpcd->IN_ep[i].num = i;
 8000e54:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].is_in = 1U;
 8000e56:	705e      	strb	r6, [r3, #1]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000e58:	70d9      	strb	r1, [r3, #3]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000e5a:	60d9      	str	r1, [r3, #12]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000e5c:	6119      	str	r1, [r3, #16]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000e5e:	6159      	str	r1, [r3, #20]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000e60:	3201      	adds	r2, #1
 8000e62:	331c      	adds	r3, #28
 8000e64:	e7dd      	b.n	8000e22 <HAL_PCD_Init+0x32>
   hpcd->OUT_ep[i].num = i;
 8000e66:	7019      	strb	r1, [r3, #0]
   hpcd->OUT_ep[i].is_in = 0U;
 8000e68:	7058      	strb	r0, [r3, #1]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000e6a:	70d8      	strb	r0, [r3, #3]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000e6c:	60d8      	str	r0, [r3, #12]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e6e:	6118      	str	r0, [r3, #16]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000e70:	6158      	str	r0, [r3, #20]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000e72:	3101      	adds	r1, #1
 8000e74:	331c      	adds	r3, #28
 8000e76:	e7db      	b.n	8000e30 <HAL_PCD_Init+0x40>
 8000e78:	ffffbf00 	.word	0xffffbf00

08000e7c <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	6803      	ldr	r3, [r0, #0]
 8000e80:	0209      	lsls	r1, r1, #8
 8000e82:	3358      	adds	r3, #88	; 0x58
 8000e84:	881a      	ldrh	r2, [r3, #0]
  
  return HAL_OK;
}
 8000e86:	2000      	movs	r0, #0
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	801a      	strh	r2, [r3, #0]
}
 8000e8c:	4770      	bx	lr

08000e8e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000e8e:	22f4      	movs	r2, #244	; 0xf4
{
 8000e90:	b510      	push	{r4, lr}
   __HAL_LOCK(hpcd); 
 8000e92:	0052      	lsls	r2, r2, #1
 8000e94:	5c83      	ldrb	r3, [r0, r2]
{
 8000e96:	0004      	movs	r4, r0
   __HAL_LOCK(hpcd); 
 8000e98:	2002      	movs	r0, #2
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d009      	beq.n	8000eb2 <HAL_PCD_SetAddress+0x24>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	54a3      	strb	r3, [r4, r2]

   if(address == 0U) 
 8000ea2:	2900      	cmp	r1, #0
 8000ea4:	d106      	bne.n	8000eb4 <HAL_PCD_SetAddress+0x26>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	3180      	adds	r1, #128	; 0x80
 8000eaa:	334c      	adds	r3, #76	; 0x4c
 8000eac:	8019      	strh	r1, [r3, #0]
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8000eae:	2000      	movs	r0, #0
 8000eb0:	54a0      	strb	r0, [r4, r2]
  return HAL_OK;
}
 8000eb2:	bd10      	pop	{r4, pc}
     hpcd->USB_Address = address;
 8000eb4:	1d63      	adds	r3, r4, #5
 8000eb6:	77d9      	strb	r1, [r3, #31]
 8000eb8:	e7f9      	b.n	8000eae <HAL_PCD_SetAddress+0x20>
	...

08000ebc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000ec2:	b248      	sxtb	r0, r1
 8000ec4:	241c      	movs	r4, #28
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	da25      	bge.n	8000f16 <HAL_PCD_EP_Open+0x5a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000eca:	257f      	movs	r5, #127	; 0x7f
 8000ecc:	400d      	ands	r5, r1
 8000ece:	436c      	muls	r4, r5
 8000ed0:	3428      	adds	r4, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ed2:	9d01      	ldr	r5, [sp, #4]
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000ed4:	0fc0      	lsrs	r0, r0, #31
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ed6:	192c      	adds	r4, r5, r4
  ep->num   = ep_addr & 0x7FU;
 8000ed8:	257f      	movs	r5, #127	; 0x7f
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000eda:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8000edc:	23f4      	movs	r3, #244	; 0xf4
  ep->num   = ep_addr & 0x7FU;
 8000ede:	4029      	ands	r1, r5
 8000ee0:	7021      	strb	r1, [r4, #0]
  __HAL_LOCK(hpcd); 
 8000ee2:	9901      	ldr	r1, [sp, #4]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000ee4:	7060      	strb	r0, [r4, #1]
  ep->maxpacket = ep_mps;
 8000ee6:	60e2      	str	r2, [r4, #12]
  __HAL_LOCK(hpcd); 
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	5cc9      	ldrb	r1, [r1, r3]
 8000eec:	2002      	movs	r0, #2
 8000eee:	2901      	cmp	r1, #1
 8000ef0:	d100      	bne.n	8000ef4 <HAL_PCD_EP_Open+0x38>
 8000ef2:	e0ec      	b.n	80010ce <HAL_PCD_EP_Open+0x212>
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	9801      	ldr	r0, [sp, #4]
 8000ef8:	4d8a      	ldr	r5, [pc, #552]	; (8001124 <HAL_PCD_EP_Open+0x268>)
 8000efa:	54c1      	strb	r1, [r0, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8000efc:	78e0      	ldrb	r0, [r4, #3]
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2803      	cmp	r0, #3
 8000f04:	d814      	bhi.n	8000f30 <HAL_PCD_EP_Open+0x74>
 8000f06:	7821      	ldrb	r1, [r4, #0]
 8000f08:	4e87      	ldr	r6, [pc, #540]	; (8001128 <HAL_PCD_EP_Open+0x26c>)
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000f0a:	0089      	lsls	r1, r1, #2
 8000f0c:	1859      	adds	r1, r3, r1
  switch (ep->type)
 8000f0e:	f7ff f8fb 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f12:	4906      	.short	0x4906
 8000f14:	450b      	.short	0x450b
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000f16:	434c      	muls	r4, r1
 8000f18:	3409      	adds	r4, #9
 8000f1a:	34ff      	adds	r4, #255	; 0xff
 8000f1c:	e7d9      	b.n	8000ed2 <HAL_PCD_EP_Open+0x16>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8000f1e:	8808      	ldrh	r0, [r1, #0]
 8000f20:	4030      	ands	r0, r6
 8000f22:	4e82      	ldr	r6, [pc, #520]	; (800112c <HAL_PCD_EP_Open+0x270>)
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000f24:	4306      	orrs	r6, r0
 8000f26:	e002      	b.n	8000f2e <HAL_PCD_EP_Open+0x72>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8000f28:	8808      	ldrh	r0, [r1, #0]
 8000f2a:	4006      	ands	r6, r0
 8000f2c:	432e      	orrs	r6, r5
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000f2e:	800e      	strh	r6, [r1, #0]
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000f30:	7826      	ldrb	r6, [r4, #0]
 8000f32:	4f7f      	ldr	r7, [pc, #508]	; (8001130 <HAL_PCD_EP_Open+0x274>)
 8000f34:	00b0      	lsls	r0, r6, #2
 8000f36:	1818      	adds	r0, r3, r0
 8000f38:	8801      	ldrh	r1, [r0, #0]
 8000f3a:	432e      	orrs	r6, r5
 8000f3c:	4039      	ands	r1, r7
 8000f3e:	430e      	orrs	r6, r1
 8000f40:	8006      	strh	r6, [r0, #0]
  
  if (ep->doublebuffer == 0U) 
 8000f42:	7aa0      	ldrb	r0, [r4, #10]
 8000f44:	7821      	ldrb	r1, [r4, #0]
 8000f46:	46bc      	mov	ip, r7
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d165      	bne.n	8001018 <HAL_PCD_EP_Open+0x15c>
 8000f4c:	001e      	movs	r6, r3
  {
    if (ep->is_in)
 8000f4e:	7860      	ldrb	r0, [r4, #1]
 8000f50:	3650      	adds	r6, #80	; 0x50
 8000f52:	9003      	str	r0, [sp, #12]
 8000f54:	88a0      	ldrh	r0, [r4, #4]
 8000f56:	9002      	str	r0, [sp, #8]
 8000f58:	9803      	ldr	r0, [sp, #12]
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d026      	beq.n	8000fac <HAL_PCD_EP_Open+0xf0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000f5e:	8832      	ldrh	r2, [r6, #0]
 8000f60:	00c9      	lsls	r1, r1, #3
 8000f62:	1859      	adds	r1, r3, r1
 8000f64:	1889      	adds	r1, r1, r2
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	1889      	adds	r1, r1, r2
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	9802      	ldr	r0, [sp, #8]
 8000f70:	4390      	bics	r0, r2
 8000f72:	8008      	strh	r0, [r1, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000f74:	7822      	ldrb	r2, [r4, #0]
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	189a      	adds	r2, r3, r2
 8000f7a:	8811      	ldrh	r1, [r2, #0]
 8000f7c:	0648      	lsls	r0, r1, #25
 8000f7e:	d503      	bpl.n	8000f88 <HAL_PCD_EP_Open+0xcc>
 8000f80:	400f      	ands	r7, r1
 8000f82:	496c      	ldr	r1, [pc, #432]	; (8001134 <HAL_PCD_EP_Open+0x278>)
 8000f84:	430f      	orrs	r7, r1
 8000f86:	8017      	strh	r7, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8000f88:	7822      	ldrb	r2, [r4, #0]
 8000f8a:	496b      	ldr	r1, [pc, #428]	; (8001138 <HAL_PCD_EP_Open+0x27c>)
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	4011      	ands	r1, r2
 8000f94:	2220      	movs	r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000f96:	404a      	eors	r2, r1
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000f98:	4315      	orrs	r5, r2
 8000f9a:	e092      	b.n	80010c2 <HAL_PCD_EP_Open+0x206>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000f9c:	8808      	ldrh	r0, [r1, #0]
 8000f9e:	4030      	ands	r0, r6
 8000fa0:	4e66      	ldr	r6, [pc, #408]	; (800113c <HAL_PCD_EP_Open+0x280>)
 8000fa2:	e7bf      	b.n	8000f24 <HAL_PCD_EP_Open+0x68>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000fa4:	8808      	ldrh	r0, [r1, #0]
 8000fa6:	4030      	ands	r0, r6
 8000fa8:	4e65      	ldr	r6, [pc, #404]	; (8001140 <HAL_PCD_EP_Open+0x284>)
 8000faa:	e7bb      	b.n	8000f24 <HAL_PCD_EP_Open+0x68>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000fac:	8837      	ldrh	r7, [r6, #0]
 8000fae:	00c9      	lsls	r1, r1, #3
 8000fb0:	19c9      	adds	r1, r1, r7
 8000fb2:	2701      	movs	r7, #1
 8000fb4:	4863      	ldr	r0, [pc, #396]	; (8001144 <HAL_PCD_EP_Open+0x288>)
 8000fb6:	1859      	adds	r1, r3, r1
 8000fb8:	1809      	adds	r1, r1, r0
 8000fba:	9802      	ldr	r0, [sp, #8]
 8000fbc:	43b8      	bics	r0, r7
 8000fbe:	8008      	strh	r0, [r1, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000fc0:	7821      	ldrb	r1, [r4, #0]
 8000fc2:	8830      	ldrh	r0, [r6, #0]
 8000fc4:	00c9      	lsls	r1, r1, #3
 8000fc6:	1809      	adds	r1, r1, r0
 8000fc8:	485f      	ldr	r0, [pc, #380]	; (8001148 <HAL_PCD_EP_Open+0x28c>)
 8000fca:	1818      	adds	r0, r3, r0
 8000fcc:	1809      	adds	r1, r1, r0
 8000fce:	2a3e      	cmp	r2, #62	; 0x3e
 8000fd0:	d91c      	bls.n	800100c <HAL_PCD_EP_Open+0x150>
 8000fd2:	0950      	lsrs	r0, r2, #5
 8000fd4:	06d2      	lsls	r2, r2, #27
 8000fd6:	d101      	bne.n	8000fdc <HAL_PCD_EP_Open+0x120>
 8000fd8:	3801      	subs	r0, #1
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	4a5b      	ldr	r2, [pc, #364]	; (800114c <HAL_PCD_EP_Open+0x290>)
 8000fde:	0280      	lsls	r0, r0, #10
 8000fe0:	4310      	orrs	r0, r2
 8000fe2:	8008      	strh	r0, [r1, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000fe4:	7822      	ldrb	r2, [r4, #0]
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	189a      	adds	r2, r3, r2
 8000fea:	8811      	ldrh	r1, [r2, #0]
 8000fec:	0448      	lsls	r0, r1, #17
 8000fee:	d504      	bpl.n	8000ffa <HAL_PCD_EP_Open+0x13e>
 8000ff0:	4660      	mov	r0, ip
 8000ff2:	4001      	ands	r1, r0
 8000ff4:	4856      	ldr	r0, [pc, #344]	; (8001150 <HAL_PCD_EP_Open+0x294>)
 8000ff6:	4301      	orrs	r1, r0
 8000ff8:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000ffa:	7822      	ldrb	r2, [r4, #0]
 8000ffc:	4955      	ldr	r1, [pc, #340]	; (8001154 <HAL_PCD_EP_Open+0x298>)
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	189b      	adds	r3, r3, r2
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4011      	ands	r1, r2
 8001006:	22c0      	movs	r2, #192	; 0xc0
 8001008:	0192      	lsls	r2, r2, #6
 800100a:	e7c4      	b.n	8000f96 <HAL_PCD_EP_Open+0xda>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 800100c:	0850      	lsrs	r0, r2, #1
 800100e:	423a      	tst	r2, r7
 8001010:	d000      	beq.n	8001014 <HAL_PCD_EP_Open+0x158>
 8001012:	3001      	adds	r0, #1
 8001014:	0280      	lsls	r0, r0, #10
 8001016:	e7e4      	b.n	8000fe2 <HAL_PCD_EP_Open+0x126>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8001018:	0089      	lsls	r1, r1, #2
 800101a:	1859      	adds	r1, r3, r1
 800101c:	880a      	ldrh	r2, [r1, #0]
 800101e:	484e      	ldr	r0, [pc, #312]	; (8001158 <HAL_PCD_EP_Open+0x29c>)
 8001020:	4f45      	ldr	r7, [pc, #276]	; (8001138 <HAL_PCD_EP_Open+0x27c>)
 8001022:	4010      	ands	r0, r2
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_PCD_EP_Open+0x2a0>)
 8001026:	4302      	orrs	r2, r0
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8001028:	0018      	movs	r0, r3
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800102a:	800a      	strh	r2, [r1, #0]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800102c:	7822      	ldrb	r2, [r4, #0]
 800102e:	3050      	adds	r0, #80	; 0x50
 8001030:	8801      	ldrh	r1, [r0, #0]
 8001032:	00d2      	lsls	r2, r2, #3
 8001034:	1852      	adds	r2, r2, r1
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	189a      	adds	r2, r3, r2
 800103a:	00c9      	lsls	r1, r1, #3
 800103c:	1852      	adds	r2, r2, r1
 800103e:	2101      	movs	r1, #1
 8001040:	88e6      	ldrh	r6, [r4, #6]
 8001042:	438e      	bics	r6, r1
 8001044:	8016      	strh	r6, [r2, #0]
 8001046:	2680      	movs	r6, #128	; 0x80
 8001048:	7822      	ldrb	r2, [r4, #0]
 800104a:	8800      	ldrh	r0, [r0, #0]
 800104c:	00d2      	lsls	r2, r2, #3
 800104e:	189a      	adds	r2, r3, r2
 8001050:	1812      	adds	r2, r2, r0
 8001052:	483c      	ldr	r0, [pc, #240]	; (8001144 <HAL_PCD_EP_Open+0x288>)
 8001054:	01f6      	lsls	r6, r6, #7
 8001056:	1812      	adds	r2, r2, r0
 8001058:	8920      	ldrh	r0, [r4, #8]
 800105a:	4388      	bics	r0, r1
 800105c:	8010      	strh	r0, [r2, #0]
 800105e:	7822      	ldrb	r2, [r4, #0]
    if (ep->is_in==0U)
 8001060:	7861      	ldrb	r1, [r4, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	189a      	adds	r2, r3, r2
    if (ep->is_in==0U)
 8001066:	2900      	cmp	r1, #0
 8001068:	d133      	bne.n	80010d2 <HAL_PCD_EP_Open+0x216>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800106a:	8811      	ldrh	r1, [r2, #0]
 800106c:	4231      	tst	r1, r6
 800106e:	d004      	beq.n	800107a <HAL_PCD_EP_Open+0x1be>
 8001070:	4660      	mov	r0, ip
 8001072:	4001      	ands	r1, r0
 8001074:	4836      	ldr	r0, [pc, #216]	; (8001150 <HAL_PCD_EP_Open+0x294>)
 8001076:	4301      	orrs	r1, r0
 8001078:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800107a:	7822      	ldrb	r2, [r4, #0]
 800107c:	492d      	ldr	r1, [pc, #180]	; (8001134 <HAL_PCD_EP_Open+0x278>)
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	189a      	adds	r2, r3, r2
 8001082:	8810      	ldrh	r0, [r2, #0]
 8001084:	0646      	lsls	r6, r0, #25
 8001086:	d503      	bpl.n	8001090 <HAL_PCD_EP_Open+0x1d4>
 8001088:	4666      	mov	r6, ip
 800108a:	4030      	ands	r0, r6
 800108c:	4308      	orrs	r0, r1
 800108e:	8010      	strh	r0, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001090:	4666      	mov	r6, ip
 8001092:	7822      	ldrb	r2, [r4, #0]
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	189a      	adds	r2, r3, r2
 8001098:	8810      	ldrh	r0, [r2, #0]
 800109a:	4030      	ands	r0, r6
 800109c:	4301      	orrs	r1, r0
 800109e:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80010a0:	7822      	ldrb	r2, [r4, #0]
 80010a2:	492c      	ldr	r1, [pc, #176]	; (8001154 <HAL_PCD_EP_Open+0x298>)
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	189a      	adds	r2, r3, r2
 80010a8:	8810      	ldrh	r0, [r2, #0]
 80010aa:	4008      	ands	r0, r1
 80010ac:	21c0      	movs	r1, #192	; 0xc0
 80010ae:	0189      	lsls	r1, r1, #6
 80010b0:	4041      	eors	r1, r0
 80010b2:	4329      	orrs	r1, r5
 80010b4:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80010b6:	7822      	ldrb	r2, [r4, #0]
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	189b      	adds	r3, r3, r2
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	4017      	ands	r7, r2
 80010c0:	433d      	orrs	r5, r7
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80010c2:	801d      	strh	r5, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80010c4:	23f4      	movs	r3, #244	; 0xf4
 80010c6:	2000      	movs	r0, #0
 80010c8:	9a01      	ldr	r2, [sp, #4]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	54d0      	strb	r0, [r2, r3]
  return ret;
}
 80010ce:	b005      	add	sp, #20
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80010d2:	8811      	ldrh	r1, [r2, #0]
 80010d4:	481e      	ldr	r0, [pc, #120]	; (8001150 <HAL_PCD_EP_Open+0x294>)
 80010d6:	4231      	tst	r1, r6
 80010d8:	d003      	beq.n	80010e2 <HAL_PCD_EP_Open+0x226>
 80010da:	4666      	mov	r6, ip
 80010dc:	4031      	ands	r1, r6
 80010de:	4301      	orrs	r1, r0
 80010e0:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80010e2:	7822      	ldrb	r2, [r4, #0]
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	189a      	adds	r2, r3, r2
 80010e8:	8811      	ldrh	r1, [r2, #0]
 80010ea:	064e      	lsls	r6, r1, #25
 80010ec:	d504      	bpl.n	80010f8 <HAL_PCD_EP_Open+0x23c>
 80010ee:	4666      	mov	r6, ip
 80010f0:	4031      	ands	r1, r6
 80010f2:	4e10      	ldr	r6, [pc, #64]	; (8001134 <HAL_PCD_EP_Open+0x278>)
 80010f4:	4331      	orrs	r1, r6
 80010f6:	8011      	strh	r1, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80010f8:	4666      	mov	r6, ip
 80010fa:	7822      	ldrb	r2, [r4, #0]
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	189a      	adds	r2, r3, r2
 8001100:	8811      	ldrh	r1, [r2, #0]
 8001102:	4031      	ands	r1, r6
 8001104:	4308      	orrs	r0, r1
 8001106:	8010      	strh	r0, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001108:	7822      	ldrb	r2, [r4, #0]
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	189a      	adds	r2, r3, r2
 800110e:	8811      	ldrh	r1, [r2, #0]
 8001110:	400f      	ands	r7, r1
 8001112:	432f      	orrs	r7, r5
 8001114:	8017      	strh	r7, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001116:	7822      	ldrb	r2, [r4, #0]
 8001118:	490e      	ldr	r1, [pc, #56]	; (8001154 <HAL_PCD_EP_Open+0x298>)
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	189b      	adds	r3, r3, r2
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	400a      	ands	r2, r1
 8001122:	e739      	b.n	8000f98 <HAL_PCD_EP_Open+0xdc>
 8001124:	ffff8080 	.word	0xffff8080
 8001128:	0000090f 	.word	0x0000090f
 800112c:	ffff8280 	.word	0xffff8280
 8001130:	00000f0f 	.word	0x00000f0f
 8001134:	ffff80c0 	.word	0xffff80c0
 8001138:	ffff8fbf 	.word	0xffff8fbf
 800113c:	ffff8680 	.word	0xffff8680
 8001140:	ffff8480 	.word	0xffff8480
 8001144:	00000404 	.word	0x00000404
 8001148:	00000406 	.word	0x00000406
 800114c:	ffff8000 	.word	0xffff8000
 8001150:	ffffc080 	.word	0xffffc080
 8001154:	ffffbf8f 	.word	0xffffbf8f
 8001158:	00000e0f 	.word	0x00000e0f
 800115c:	ffff8180 	.word	0xffff8180

08001160 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001160:	b24a      	sxtb	r2, r1
{  
 8001162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001164:	231c      	movs	r3, #28
 8001166:	0005      	movs	r5, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001168:	2a00      	cmp	r2, #0
 800116a:	da31      	bge.n	80011d0 <HAL_PCD_EP_Close+0x70>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800116c:	207f      	movs	r0, #127	; 0x7f
 800116e:	4008      	ands	r0, r1
 8001170:	4343      	muls	r3, r0
 8001172:	3328      	adds	r3, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001174:	18eb      	adds	r3, r5, r3
  }
  ep->num   = ep_addr & 0x7FU;
 8001176:	207f      	movs	r0, #127	; 0x7f
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001178:	0fd2      	lsrs	r2, r2, #31
 800117a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800117c:	22f4      	movs	r2, #244	; 0xf4
  ep->num   = ep_addr & 0x7FU;
 800117e:	4001      	ands	r1, r0
 8001180:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd); 
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	5ca9      	ldrb	r1, [r5, r2]
 8001186:	387d      	subs	r0, #125	; 0x7d
 8001188:	2901      	cmp	r1, #1
 800118a:	d020      	beq.n	80011ce <HAL_PCD_EP_Close+0x6e>
 800118c:	2101      	movs	r1, #1
 800118e:	54a9      	strb	r1, [r5, r2]

  if (ep->doublebuffer == 0U) 
 8001190:	7a98      	ldrb	r0, [r3, #10]
 8001192:	785e      	ldrb	r6, [r3, #1]
 8001194:	6829      	ldr	r1, [r5, #0]
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4c3b      	ldr	r4, [pc, #236]	; (8001288 <HAL_PCD_EP_Close+0x128>)
 800119a:	2800      	cmp	r0, #0
 800119c:	d129      	bne.n	80011f2 <HAL_PCD_EP_Close+0x92>
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	188a      	adds	r2, r1, r2
 80011a2:	8810      	ldrh	r0, [r2, #0]
    if (ep->is_in)
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d017      	beq.n	80011d8 <HAL_PCD_EP_Close+0x78>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80011a8:	0646      	lsls	r6, r0, #25
 80011aa:	d504      	bpl.n	80011b6 <HAL_PCD_EP_Close+0x56>
 80011ac:	4e37      	ldr	r6, [pc, #220]	; (800128c <HAL_PCD_EP_Close+0x12c>)
 80011ae:	4030      	ands	r0, r6
 80011b0:	4e37      	ldr	r6, [pc, #220]	; (8001290 <HAL_PCD_EP_Close+0x130>)
 80011b2:	4330      	orrs	r0, r6
 80011b4:	8010      	strh	r0, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4a36      	ldr	r2, [pc, #216]	; (8001294 <HAL_PCD_EP_Close+0x134>)
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	18c9      	adds	r1, r1, r3
 80011be:	880b      	ldrh	r3, [r1, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80011c0:	4013      	ands	r3, r2
 80011c2:	431c      	orrs	r4, r3
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80011c4:	23f4      	movs	r3, #244	; 0xf4
 80011c6:	2000      	movs	r0, #0
 80011c8:	005b      	lsls	r3, r3, #1
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80011ca:	800c      	strh	r4, [r1, #0]
  __HAL_UNLOCK(hpcd);   
 80011cc:	54e8      	strb	r0, [r5, r3]
  return HAL_OK;
}
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80011d0:	434b      	muls	r3, r1
 80011d2:	3309      	adds	r3, #9
 80011d4:	33ff      	adds	r3, #255	; 0xff
 80011d6:	e7cd      	b.n	8001174 <HAL_PCD_EP_Close+0x14>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80011d8:	0446      	lsls	r6, r0, #17
 80011da:	d504      	bpl.n	80011e6 <HAL_PCD_EP_Close+0x86>
 80011dc:	4e2b      	ldr	r6, [pc, #172]	; (800128c <HAL_PCD_EP_Close+0x12c>)
 80011de:	4030      	ands	r0, r6
 80011e0:	4e2d      	ldr	r6, [pc, #180]	; (8001298 <HAL_PCD_EP_Close+0x138>)
 80011e2:	4330      	orrs	r0, r6
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80011e4:	8010      	strh	r0, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4a2c      	ldr	r2, [pc, #176]	; (800129c <HAL_PCD_EP_Close+0x13c>)
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	18c9      	adds	r1, r1, r3
 80011ee:	880b      	ldrh	r3, [r1, #0]
 80011f0:	e7e6      	b.n	80011c0 <HAL_PCD_EP_Close+0x60>
 80011f2:	2780      	movs	r7, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4825      	ldr	r0, [pc, #148]	; (800128c <HAL_PCD_EP_Close+0x12c>)
 80011f8:	01ff      	lsls	r7, r7, #7
 80011fa:	188a      	adds	r2, r1, r2
    if (ep->is_in==0U)
 80011fc:	2e00      	cmp	r6, #0
 80011fe:	d122      	bne.n	8001246 <HAL_PCD_EP_Close+0xe6>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001200:	8816      	ldrh	r6, [r2, #0]
 8001202:	423e      	tst	r6, r7
 8001204:	d003      	beq.n	800120e <HAL_PCD_EP_Close+0xae>
 8001206:	4f24      	ldr	r7, [pc, #144]	; (8001298 <HAL_PCD_EP_Close+0x138>)
 8001208:	4006      	ands	r6, r0
 800120a:	433e      	orrs	r6, r7
 800120c:	8016      	strh	r6, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4e1f      	ldr	r6, [pc, #124]	; (8001290 <HAL_PCD_EP_Close+0x130>)
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	188a      	adds	r2, r1, r2
 8001216:	8817      	ldrh	r7, [r2, #0]
 8001218:	46b4      	mov	ip, r6
 800121a:	067e      	lsls	r6, r7, #25
 800121c:	d503      	bpl.n	8001226 <HAL_PCD_EP_Close+0xc6>
 800121e:	4666      	mov	r6, ip
 8001220:	4007      	ands	r7, r0
 8001222:	4337      	orrs	r7, r6
 8001224:	8017      	strh	r7, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001226:	4666      	mov	r6, ip
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	188a      	adds	r2, r1, r2
 800122e:	8817      	ldrh	r7, [r2, #0]
 8001230:	4038      	ands	r0, r7
 8001232:	4306      	orrs	r6, r0
 8001234:	8016      	strh	r6, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4e18      	ldr	r6, [pc, #96]	; (800129c <HAL_PCD_EP_Close+0x13c>)
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	188a      	adds	r2, r1, r2
 800123e:	8810      	ldrh	r0, [r2, #0]
 8001240:	4030      	ands	r0, r6
 8001242:	4320      	orrs	r0, r4
 8001244:	e7b6      	b.n	80011b4 <HAL_PCD_EP_Close+0x54>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001246:	8816      	ldrh	r6, [r2, #0]
 8001248:	423e      	tst	r6, r7
 800124a:	d003      	beq.n	8001254 <HAL_PCD_EP_Close+0xf4>
 800124c:	4f12      	ldr	r7, [pc, #72]	; (8001298 <HAL_PCD_EP_Close+0x138>)
 800124e:	4006      	ands	r6, r0
 8001250:	433e      	orrs	r6, r7
 8001252:	8016      	strh	r6, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	188a      	adds	r2, r1, r2
 800125a:	8816      	ldrh	r6, [r2, #0]
 800125c:	0677      	lsls	r7, r6, #25
 800125e:	d503      	bpl.n	8001268 <HAL_PCD_EP_Close+0x108>
 8001260:	4f0b      	ldr	r7, [pc, #44]	; (8001290 <HAL_PCD_EP_Close+0x130>)
 8001262:	4006      	ands	r6, r0
 8001264:	433e      	orrs	r6, r7
 8001266:	8016      	strh	r6, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	4f0b      	ldr	r7, [pc, #44]	; (8001298 <HAL_PCD_EP_Close+0x138>)
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	188a      	adds	r2, r1, r2
 8001270:	8816      	ldrh	r6, [r2, #0]
 8001272:	4030      	ands	r0, r6
 8001274:	4307      	orrs	r7, r0
 8001276:	8017      	strh	r7, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4e06      	ldr	r6, [pc, #24]	; (8001294 <HAL_PCD_EP_Close+0x134>)
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	188a      	adds	r2, r1, r2
 8001280:	8810      	ldrh	r0, [r2, #0]
 8001282:	4030      	ands	r0, r6
 8001284:	4320      	orrs	r0, r4
 8001286:	e7ad      	b.n	80011e4 <HAL_PCD_EP_Close+0x84>
 8001288:	ffff8080 	.word	0xffff8080
 800128c:	00000f0f 	.word	0x00000f0f
 8001290:	ffff80c0 	.word	0xffff80c0
 8001294:	ffff8fbf 	.word	0xffff8fbf
 8001298:	ffffc080 	.word	0xffffc080
 800129c:	ffffbf8f 	.word	0xffffbf8f

080012a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	247f      	movs	r4, #127	; 0x7f
 80012a4:	4021      	ands	r1, r4
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80012a6:	3c63      	subs	r4, #99	; 0x63
 80012a8:	0027      	movs	r7, r4
 80012aa:	434f      	muls	r7, r1
 80012ac:	19c7      	adds	r7, r0, r7
 80012ae:	003d      	movs	r5, r7
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80012b0:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;  
 80012b2:	35fc      	adds	r5, #252	; 0xfc
  ep->is_in = 0U;
 80012b4:	37ff      	adds	r7, #255	; 0xff
  ep->xfer_buff = pBuf;  
 80012b6:	61ea      	str	r2, [r5, #28]
  ep->xfer_len = len;
 80012b8:	622b      	str	r3, [r5, #32]
  ep->xfer_count = 0U;
 80012ba:	626e      	str	r6, [r5, #36]	; 0x24
  ep->is_in = 0U;
 80012bc:	72be      	strb	r6, [r7, #10]
  ep->num = ep_addr & 0x7FU;
 80012be:	7279      	strb	r1, [r7, #9]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80012c0:	69aa      	ldr	r2, [r5, #24]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d92f      	bls.n	8001326 <HAL_PCD_EP_Receive+0x86>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	622b      	str	r3, [r5, #32]
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80012ca:	434c      	muls	r4, r1
 80012cc:	1904      	adds	r4, r0, r4
 80012ce:	34ff      	adds	r4, #255	; 0xff
 80012d0:	7ce5      	ldrb	r5, [r4, #19]
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	d129      	bne.n	800132c <HAL_PCD_EP_Receive+0x8c>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 80012d8:	001d      	movs	r5, r3
 80012da:	3550      	adds	r5, #80	; 0x50
 80012dc:	882e      	ldrh	r6, [r5, #0]
 80012de:	7a65      	ldrb	r5, [r4, #9]
 80012e0:	00ed      	lsls	r5, r5, #3
 80012e2:	19ad      	adds	r5, r5, r6
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80012e4:	4c39      	ldr	r4, [pc, #228]	; (80013cc <HAL_PCD_EP_Receive+0x12c>)
 80012e6:	191c      	adds	r4, r3, r4
 80012e8:	192d      	adds	r5, r5, r4
 80012ea:	2a3e      	cmp	r2, #62	; 0x3e
 80012ec:	d959      	bls.n	80013a2 <HAL_PCD_EP_Receive+0x102>
 80012ee:	0954      	lsrs	r4, r2, #5
 80012f0:	b2a4      	uxth	r4, r4
 80012f2:	06d2      	lsls	r2, r2, #27
 80012f4:	d101      	bne.n	80012fa <HAL_PCD_EP_Receive+0x5a>
 80012f6:	3c01      	subs	r4, #1
 80012f8:	b2a4      	uxth	r4, r4
 80012fa:	4a35      	ldr	r2, [pc, #212]	; (80013d0 <HAL_PCD_EP_Receive+0x130>)
 80012fc:	02a4      	lsls	r4, r4, #10
 80012fe:	4314      	orrs	r4, r2
 8001300:	802c      	strh	r4, [r5, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001302:	221c      	movs	r2, #28
 8001304:	4351      	muls	r1, r2
 8001306:	1840      	adds	r0, r0, r1
 8001308:	30ff      	adds	r0, #255	; 0xff
 800130a:	7a42      	ldrb	r2, [r0, #9]
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	189b      	adds	r3, r3, r2
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <HAL_PCD_EP_Receive+0x134>)
  
  return HAL_OK;
}
 8001314:	2000      	movs	r0, #0
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001316:	4011      	ands	r1, r2
 8001318:	22c0      	movs	r2, #192	; 0xc0
 800131a:	0192      	lsls	r2, r2, #6
 800131c:	4051      	eors	r1, r2
 800131e:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <HAL_PCD_EP_Receive+0x138>)
 8001320:	430a      	orrs	r2, r1
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ep->xfer_len =0U;
 8001326:	622e      	str	r6, [r5, #32]
 8001328:	001a      	movs	r2, r3
 800132a:	e7ce      	b.n	80012ca <HAL_PCD_EP_Receive+0x2a>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800132c:	7aa5      	ldrb	r5, [r4, #10]
 800132e:	2d00      	cmp	r5, #0
 8001330:	d12a      	bne.n	8001388 <HAL_PCD_EP_Receive+0xe8>
 8001332:	001d      	movs	r5, r3
 8001334:	3550      	adds	r5, #80	; 0x50
 8001336:	882e      	ldrh	r6, [r5, #0]
 8001338:	7a65      	ldrb	r5, [r4, #9]
 800133a:	4c28      	ldr	r4, [pc, #160]	; (80013dc <HAL_PCD_EP_Receive+0x13c>)
 800133c:	00ed      	lsls	r5, r5, #3
 800133e:	19ad      	adds	r5, r5, r6
 8001340:	191c      	adds	r4, r3, r4
 8001342:	192d      	adds	r5, r5, r4
 8001344:	2a3e      	cmp	r2, #62	; 0x3e
 8001346:	d917      	bls.n	8001378 <HAL_PCD_EP_Receive+0xd8>
 8001348:	0954      	lsrs	r4, r2, #5
 800134a:	b2a4      	uxth	r4, r4
 800134c:	06d6      	lsls	r6, r2, #27
 800134e:	d101      	bne.n	8001354 <HAL_PCD_EP_Receive+0xb4>
 8001350:	3c01      	subs	r4, #1
 8001352:	b2a4      	uxth	r4, r4
 8001354:	4e1e      	ldr	r6, [pc, #120]	; (80013d0 <HAL_PCD_EP_Receive+0x130>)
 8001356:	02a4      	lsls	r4, r4, #10
 8001358:	4334      	orrs	r4, r6
 800135a:	802c      	strh	r4, [r5, #0]
 800135c:	261c      	movs	r6, #28
 800135e:	434e      	muls	r6, r1
 8001360:	1986      	adds	r6, r0, r6
 8001362:	36ff      	adds	r6, #255	; 0xff
 8001364:	7ab4      	ldrb	r4, [r6, #10]
 8001366:	2c00      	cmp	r4, #0
 8001368:	d123      	bne.n	80013b2 <HAL_PCD_EP_Receive+0x112>
 800136a:	001c      	movs	r4, r3
 800136c:	7a75      	ldrb	r5, [r6, #9]
 800136e:	3450      	adds	r4, #80	; 0x50
 8001370:	8824      	ldrh	r4, [r4, #0]
 8001372:	00ed      	lsls	r5, r5, #3
 8001374:	192d      	adds	r5, r5, r4
 8001376:	e7b5      	b.n	80012e4 <HAL_PCD_EP_Receive+0x44>
 8001378:	0854      	lsrs	r4, r2, #1
 800137a:	b2a4      	uxth	r4, r4
 800137c:	07d6      	lsls	r6, r2, #31
 800137e:	d501      	bpl.n	8001384 <HAL_PCD_EP_Receive+0xe4>
 8001380:	3401      	adds	r4, #1
 8001382:	b2a4      	uxth	r4, r4
 8001384:	02a4      	lsls	r4, r4, #10
 8001386:	e7e8      	b.n	800135a <HAL_PCD_EP_Receive+0xba>
 8001388:	2d01      	cmp	r5, #1
 800138a:	d1e7      	bne.n	800135c <HAL_PCD_EP_Receive+0xbc>
 800138c:	001d      	movs	r5, r3
 800138e:	7a64      	ldrb	r4, [r4, #9]
 8001390:	3550      	adds	r5, #80	; 0x50
 8001392:	882d      	ldrh	r5, [r5, #0]
 8001394:	00e4      	lsls	r4, r4, #3
 8001396:	191c      	adds	r4, r3, r4
 8001398:	1964      	adds	r4, r4, r5
 800139a:	4d10      	ldr	r5, [pc, #64]	; (80013dc <HAL_PCD_EP_Receive+0x13c>)
 800139c:	1964      	adds	r4, r4, r5
 800139e:	8022      	strh	r2, [r4, #0]
 80013a0:	e7dc      	b.n	800135c <HAL_PCD_EP_Receive+0xbc>
 80013a2:	0854      	lsrs	r4, r2, #1
 80013a4:	b2a4      	uxth	r4, r4
 80013a6:	07d2      	lsls	r2, r2, #31
 80013a8:	d501      	bpl.n	80013ae <HAL_PCD_EP_Receive+0x10e>
 80013aa:	3401      	adds	r4, #1
 80013ac:	b2a4      	uxth	r4, r4
 80013ae:	02a4      	lsls	r4, r4, #10
 80013b0:	e7a6      	b.n	8001300 <HAL_PCD_EP_Receive+0x60>
 80013b2:	2c01      	cmp	r4, #1
 80013b4:	d1a5      	bne.n	8001302 <HAL_PCD_EP_Receive+0x62>
 80013b6:	001c      	movs	r4, r3
 80013b8:	3450      	adds	r4, #80	; 0x50
 80013ba:	8825      	ldrh	r5, [r4, #0]
 80013bc:	7a74      	ldrb	r4, [r6, #9]
 80013be:	00e4      	lsls	r4, r4, #3
 80013c0:	191c      	adds	r4, r3, r4
 80013c2:	1964      	adds	r4, r4, r5
 80013c4:	4d01      	ldr	r5, [pc, #4]	; (80013cc <HAL_PCD_EP_Receive+0x12c>)
 80013c6:	1964      	adds	r4, r4, r5
 80013c8:	8022      	strh	r2, [r4, #0]
 80013ca:	e79a      	b.n	8001302 <HAL_PCD_EP_Receive+0x62>
 80013cc:	00000406 	.word	0x00000406
 80013d0:	ffff8000 	.word	0xffff8000
 80013d4:	ffffbf8f 	.word	0xffffbf8f
 80013d8:	ffff8080 	.word	0xffff8080
 80013dc:	00000402 	.word	0x00000402

080013e0 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 80013e0:	237f      	movs	r3, #127	; 0x7f
 80013e2:	400b      	ands	r3, r1
 80013e4:	211c      	movs	r1, #28
 80013e6:	4359      	muls	r1, r3
 80013e8:	1840      	adds	r0, r0, r1
 80013ea:	30fc      	adds	r0, #252	; 0xfc
 80013ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80013ee:	b280      	uxth	r0, r0
}
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 80013f4:	23f4      	movs	r3, #244	; 0xf4
{
 80013f6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	5cc4      	ldrb	r4, [r0, r3]
{
 80013fc:	0002      	movs	r2, r0
  __HAL_LOCK(hpcd); 
 80013fe:	2002      	movs	r0, #2
 8001400:	2c01      	cmp	r4, #1
 8001402:	d021      	beq.n	8001448 <HAL_PCD_EP_SetStall+0x54>
 8001404:	3801      	subs	r0, #1
 8001406:	54d0      	strb	r0, [r2, r3]
 8001408:	3bcd      	subs	r3, #205	; 0xcd
   
  if ((0x80U & ep_addr) == 0x80U)
 800140a:	b248      	sxtb	r0, r1
 800140c:	3bff      	subs	r3, #255	; 0xff
 800140e:	2800      	cmp	r0, #0
 8001410:	da1b      	bge.n	800144a <HAL_PCD_EP_SetStall+0x56>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001412:	247f      	movs	r4, #127	; 0x7f
 8001414:	400c      	ands	r4, r1
 8001416:	4363      	muls	r3, r4
 8001418:	3328      	adds	r3, #40	; 0x28
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 800141a:	2401      	movs	r4, #1
    ep = &hpcd->OUT_ep[ep_addr];
 800141c:	18d3      	adds	r3, r2, r3
  ep->is_stall = 1;
 800141e:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001420:	347e      	adds	r4, #126	; 0x7e
 8001422:	4021      	ands	r1, r4
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001424:	0fc4      	lsrs	r4, r0, #31
 8001426:	705c      	strb	r4, [r3, #1]
  ep->num   = ep_addr & 0x7FU;
 8001428:	7019      	strb	r1, [r3, #0]
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	4c11      	ldr	r4, [pc, #68]	; (8001474 <HAL_PCD_EP_SetStall+0x80>)
  
  if (ep->num == 0U)
 800142e:	2900      	cmp	r1, #0
 8001430:	d10f      	bne.n	8001452 <HAL_PCD_EP_SetStall+0x5e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8001432:	8819      	ldrh	r1, [r3, #0]
 8001434:	4810      	ldr	r0, [pc, #64]	; (8001478 <HAL_PCD_EP_SetStall+0x84>)
 8001436:	4008      	ands	r0, r1
 8001438:	4910      	ldr	r1, [pc, #64]	; (800147c <HAL_PCD_EP_SetStall+0x88>)
 800143a:	4041      	eors	r1, r0
 800143c:	430c      	orrs	r4, r1
 800143e:	801c      	strh	r4, [r3, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 8001440:	23f4      	movs	r3, #244	; 0xf4
 8001442:	2000      	movs	r0, #0
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	54d0      	strb	r0, [r2, r3]
  
  return HAL_OK;
}
 8001448:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800144a:	434b      	muls	r3, r1
 800144c:	3309      	adds	r3, #9
 800144e:	33ff      	adds	r3, #255	; 0xff
 8001450:	e7e3      	b.n	800141a <HAL_PCD_EP_SetStall+0x26>
 8001452:	0089      	lsls	r1, r1, #2
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8001454:	1859      	adds	r1, r3, r1
 8001456:	880b      	ldrh	r3, [r1, #0]
    if (ep->is_in)
 8001458:	2800      	cmp	r0, #0
 800145a:	da06      	bge.n	800146a <HAL_PCD_EP_SetStall+0x76>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <HAL_PCD_EP_SetStall+0x8c>)
 800145e:	4018      	ands	r0, r3
 8001460:	2310      	movs	r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001462:	4043      	eors	r3, r0
 8001464:	431c      	orrs	r4, r3
 8001466:	800c      	strh	r4, [r1, #0]
 8001468:	e7ea      	b.n	8001440 <HAL_PCD_EP_SetStall+0x4c>
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <HAL_PCD_EP_SetStall+0x90>)
 800146c:	4018      	ands	r0, r3
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	e7f6      	b.n	8001462 <HAL_PCD_EP_SetStall+0x6e>
 8001474:	ffff8080 	.word	0xffff8080
 8001478:	ffffbfbf 	.word	0xffffbfbf
 800147c:	00001010 	.word	0x00001010
 8001480:	ffff8fbf 	.word	0xffff8fbf
 8001484:	ffffbf8f 	.word	0xffffbf8f

08001488 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8001488:	b24a      	sxtb	r2, r1
{
 800148a:	b570      	push	{r4, r5, r6, lr}
 800148c:	231c      	movs	r3, #28
 800148e:	0004      	movs	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001490:	2a00      	cmp	r2, #0
 8001492:	da32      	bge.n	80014fa <HAL_PCD_EP_ClrStall+0x72>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001494:	207f      	movs	r0, #127	; 0x7f
 8001496:	4008      	ands	r0, r1
 8001498:	4343      	muls	r3, r0
 800149a:	3328      	adds	r3, #40	; 0x28
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0U;
 800149c:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800149e:	18e3      	adds	r3, r4, r3
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80014a0:	0fd2      	lsrs	r2, r2, #31
 80014a2:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80014a4:	22f4      	movs	r2, #244	; 0xf4
  ep->is_stall = 0U;
 80014a6:	7098      	strb	r0, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80014a8:	307f      	adds	r0, #127	; 0x7f
 80014aa:	4001      	ands	r1, r0
 80014ac:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd); 
 80014ae:	0052      	lsls	r2, r2, #1
 80014b0:	5ca1      	ldrb	r1, [r4, r2]
 80014b2:	387d      	subs	r0, #125	; 0x7d
 80014b4:	2901      	cmp	r1, #1
 80014b6:	d01f      	beq.n	80014f8 <HAL_PCD_EP_ClrStall+0x70>
 80014b8:	2101      	movs	r1, #1
 80014ba:	54a1      	strb	r1, [r4, r2]
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	6820      	ldr	r0, [r4, #0]
  
  if (ep->is_in)
 80014c0:	785d      	ldrb	r5, [r3, #1]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4917      	ldr	r1, [pc, #92]	; (8001524 <HAL_PCD_EP_ClrStall+0x9c>)
 80014c6:	1882      	adds	r2, r0, r2
  if (ep->is_in)
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d01a      	beq.n	8001502 <HAL_PCD_EP_ClrStall+0x7a>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80014cc:	8815      	ldrh	r5, [r2, #0]
 80014ce:	066e      	lsls	r6, r5, #25
 80014d0:	d504      	bpl.n	80014dc <HAL_PCD_EP_ClrStall+0x54>
 80014d2:	4e15      	ldr	r6, [pc, #84]	; (8001528 <HAL_PCD_EP_ClrStall+0xa0>)
 80014d4:	4035      	ands	r5, r6
 80014d6:	4e15      	ldr	r6, [pc, #84]	; (800152c <HAL_PCD_EP_ClrStall+0xa4>)
 80014d8:	4335      	orrs	r5, r6
 80014da:	8015      	strh	r5, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	18c3      	adds	r3, r0, r3
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	4812      	ldr	r0, [pc, #72]	; (8001530 <HAL_PCD_EP_ClrStall+0xa8>)
 80014e6:	4010      	ands	r0, r2
 80014e8:	2230      	movs	r2, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80014ea:	4042      	eors	r2, r0
 80014ec:	4311      	orrs	r1, r2
 80014ee:	8019      	strh	r1, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 80014f0:	23f4      	movs	r3, #244	; 0xf4
 80014f2:	2000      	movs	r0, #0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	54e0      	strb	r0, [r4, r3]
    
  return HAL_OK;
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80014fa:	434b      	muls	r3, r1
 80014fc:	3309      	adds	r3, #9
 80014fe:	33ff      	adds	r3, #255	; 0xff
 8001500:	e7cc      	b.n	800149c <HAL_PCD_EP_ClrStall+0x14>
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001502:	8815      	ldrh	r5, [r2, #0]
 8001504:	046e      	lsls	r6, r5, #17
 8001506:	d504      	bpl.n	8001512 <HAL_PCD_EP_ClrStall+0x8a>
 8001508:	4e07      	ldr	r6, [pc, #28]	; (8001528 <HAL_PCD_EP_ClrStall+0xa0>)
 800150a:	4035      	ands	r5, r6
 800150c:	4e09      	ldr	r6, [pc, #36]	; (8001534 <HAL_PCD_EP_ClrStall+0xac>)
 800150e:	4335      	orrs	r5, r6
 8001510:	8015      	strh	r5, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	18c3      	adds	r3, r0, r3
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <HAL_PCD_EP_ClrStall+0xb0>)
 800151c:	4010      	ands	r0, r2
 800151e:	22c0      	movs	r2, #192	; 0xc0
 8001520:	0192      	lsls	r2, r2, #6
 8001522:	e7e2      	b.n	80014ea <HAL_PCD_EP_ClrStall+0x62>
 8001524:	ffff8080 	.word	0xffff8080
 8001528:	00000f0f 	.word	0x00000f0f
 800152c:	ffff80c0 	.word	0xffff80c0
 8001530:	ffff8fbf 	.word	0xffff8fbf
 8001534:	ffffc080 	.word	0xffffc080
 8001538:	ffffbf8f 	.word	0xffffbf8f

0800153c <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800153c:	b530      	push	{r4, r5, lr}
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800153e:	2480      	movs	r4, #128	; 0x80
 8001540:	00e4      	lsls	r4, r4, #3
 8001542:	1900      	adds	r0, r0, r4
 8001544:	1882      	adds	r2, r0, r2
  
  for (i = n; i != 0; i--)
 8001546:	0008      	movs	r0, r1
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8001548:	3301      	adds	r3, #1
 800154a:	085b      	lsrs	r3, r3, #1
  for (i = n; i != 0; i--)
 800154c:	2b00      	cmp	r3, #0
 800154e:	d100      	bne.n	8001552 <PCD_WritePMA+0x16>
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
    *pdwVal++ = temp2;
    pbUsrBuf++;
  }
}
 8001550:	bd30      	pop	{r4, r5, pc}
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8001552:	7844      	ldrb	r4, [r0, #1]
 8001554:	7805      	ldrb	r5, [r0, #0]
 8001556:	0224      	lsls	r4, r4, #8
 8001558:	432c      	orrs	r4, r5
    *pdwVal++ = temp2;
 800155a:	1a45      	subs	r5, r0, r1
 800155c:	52ac      	strh	r4, [r5, r2]
 800155e:	3002      	adds	r0, #2
  for (i = n; i != 0; i--)
 8001560:	3b01      	subs	r3, #1
 8001562:	e7f3      	b.n	800154c <PCD_WritePMA+0x10>

08001564 <HAL_PCD_EP_Transmit>:
{
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	257f      	movs	r5, #127	; 0x7f
 8001568:	400d      	ands	r5, r1
  ep->xfer_buff = pBuf;  
 800156a:	211c      	movs	r1, #28
{
 800156c:	0004      	movs	r4, r0
  ep->xfer_buff = pBuf;  
 800156e:	0008      	movs	r0, r1
 8001570:	4368      	muls	r0, r5
 8001572:	1820      	adds	r0, r4, r0
 8001574:	6382      	str	r2, [r0, #56]	; 0x38
  ep->is_in = 1U;
 8001576:	0002      	movs	r2, r0
  ep->xfer_count = 0U;
 8001578:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800157a:	2701      	movs	r7, #1
 800157c:	3229      	adds	r2, #41	; 0x29
  ep->xfer_len = len;
 800157e:	63c3      	str	r3, [r0, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001580:	6406      	str	r6, [r0, #64]	; 0x40
  ep->num = ep_addr & 0x7FU;
 8001582:	3a01      	subs	r2, #1
  ep->is_in = 1U;
 8001584:	7057      	strb	r7, [r2, #1]
  ep->num = ep_addr & 0x7FU;
 8001586:	7015      	strb	r5, [r2, #0]
  if (ep->xfer_len > ep->maxpacket)
 8001588:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800158a:	4293      	cmp	r3, r2
 800158c:	d92e      	bls.n	80015ec <HAL_PCD_EP_Transmit+0x88>
    ep->xfer_len-=len; 
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (ep->doublebuffer == 0U) 
 8001592:	4369      	muls	r1, r5
 8001594:	1861      	adds	r1, r4, r1
 8001596:	000b      	movs	r3, r1
 8001598:	000f      	movs	r7, r1
 800159a:	3332      	adds	r3, #50	; 0x32
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b296      	uxth	r6, r2
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d125      	bne.n	80015f2 <HAL_PCD_EP_Transmit+0x8e>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80015a6:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80015a8:	0033      	movs	r3, r6
 80015aa:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80015ac:	6820      	ldr	r0, [r4, #0]
 80015ae:	f7ff ffc5 	bl	800153c <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	3250      	adds	r2, #80	; 0x50
 80015b8:	8811      	ldrh	r1, [r2, #0]
 80015ba:	783a      	ldrb	r2, [r7, #0]
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	4a50      	ldr	r2, [pc, #320]	; (8001704 <HAL_PCD_EP_Transmit+0x1a0>)
 80015c2:	185b      	adds	r3, r3, r1
 80015c4:	189b      	adds	r3, r3, r2
 80015c6:	801e      	strh	r6, [r3, #0]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80015c8:	211c      	movs	r1, #28
 80015ca:	434d      	muls	r5, r1
 80015cc:	1965      	adds	r5, r4, r5
 80015ce:	3528      	adds	r5, #40	; 0x28
 80015d0:	782a      	ldrb	r2, [r5, #0]
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	8819      	ldrh	r1, [r3, #0]
 80015da:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <HAL_PCD_EP_Transmit+0x1a4>)
}
 80015dc:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80015de:	4011      	ands	r1, r2
 80015e0:	2230      	movs	r2, #48	; 0x30
 80015e2:	4051      	eors	r1, r2
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_PCD_EP_Transmit+0x1a8>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	801a      	strh	r2, [r3, #0]
}
 80015ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->xfer_len =0U;
 80015ec:	63c6      	str	r6, [r0, #60]	; 0x3c
 80015ee:	001a      	movs	r2, r3
 80015f0:	e7cf      	b.n	8001592 <HAL_PCD_EP_Transmit+0x2e>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80015f2:	783b      	ldrb	r3, [r7, #0]
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	009f      	lsls	r7, r3, #2
 80015f8:	5a3f      	ldrh	r7, [r7, r0]
 80015fa:	3129      	adds	r1, #41	; 0x29
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80015fc:	7809      	ldrb	r1, [r1, #0]
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80015fe:	067f      	lsls	r7, r7, #25
 8001600:	d545      	bpl.n	800168e <HAL_PCD_EP_Transmit+0x12a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001602:	2900      	cmp	r1, #0
 8001604:	d137      	bne.n	8001676 <HAL_PCD_EP_Transmit+0x112>
 8001606:	0001      	movs	r1, r0
 8001608:	3150      	adds	r1, #80	; 0x50
 800160a:	8809      	ldrh	r1, [r1, #0]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	185b      	adds	r3, r3, r1
 8001610:	493f      	ldr	r1, [pc, #252]	; (8001710 <HAL_PCD_EP_Transmit+0x1ac>)
 8001612:	1841      	adds	r1, r0, r1
 8001614:	185b      	adds	r3, r3, r1
 8001616:	2a3e      	cmp	r2, #62	; 0x3e
 8001618:	d925      	bls.n	8001666 <HAL_PCD_EP_Transmit+0x102>
 800161a:	0951      	lsrs	r1, r2, #5
 800161c:	b289      	uxth	r1, r1
 800161e:	06d2      	lsls	r2, r2, #27
 8001620:	d101      	bne.n	8001626 <HAL_PCD_EP_Transmit+0xc2>
 8001622:	3901      	subs	r1, #1
 8001624:	b289      	uxth	r1, r1
 8001626:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <HAL_PCD_EP_Transmit+0x1b0>)
 8001628:	0289      	lsls	r1, r1, #10
 800162a:	4311      	orrs	r1, r2
 800162c:	8019      	strh	r1, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 800162e:	231c      	movs	r3, #28
 8001630:	436b      	muls	r3, r5
 8001632:	18e3      	adds	r3, r4, r3
 8001634:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001636:	271c      	movs	r7, #28
 8001638:	436f      	muls	r7, r5
 800163a:	19e7      	adds	r7, r4, r7
 800163c:	0033      	movs	r3, r6
 800163e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001640:	f7ff ff7c 	bl	800153c <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001644:	003b      	movs	r3, r7
 8001646:	3329      	adds	r3, #41	; 0x29
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	6821      	ldr	r1, [r4, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d14d      	bne.n	80016ec <HAL_PCD_EP_Transmit+0x188>
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	783b      	ldrb	r3, [r7, #0]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	18cb      	adds	r3, r1, r3
 8001658:	881a      	ldrh	r2, [r3, #0]
 800165a:	492f      	ldr	r1, [pc, #188]	; (8001718 <HAL_PCD_EP_Transmit+0x1b4>)
 800165c:	4011      	ands	r1, r2
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_PCD_EP_Transmit+0x1b8>)
 8001660:	430a      	orrs	r2, r1
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	e7b0      	b.n	80015c8 <HAL_PCD_EP_Transmit+0x64>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001666:	0851      	lsrs	r1, r2, #1
 8001668:	b289      	uxth	r1, r1
 800166a:	07d2      	lsls	r2, r2, #31
 800166c:	d501      	bpl.n	8001672 <HAL_PCD_EP_Transmit+0x10e>
 800166e:	3101      	adds	r1, #1
 8001670:	b289      	uxth	r1, r1
 8001672:	0289      	lsls	r1, r1, #10
 8001674:	e7da      	b.n	800162c <HAL_PCD_EP_Transmit+0xc8>
 8001676:	2901      	cmp	r1, #1
 8001678:	d1d9      	bne.n	800162e <HAL_PCD_EP_Transmit+0xca>
 800167a:	0001      	movs	r1, r0
 800167c:	3150      	adds	r1, #80	; 0x50
 800167e:	8809      	ldrh	r1, [r1, #0]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	18c3      	adds	r3, r0, r3
 8001684:	185b      	adds	r3, r3, r1
 8001686:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_PCD_EP_Transmit+0x1ac>)
 8001688:	185b      	adds	r3, r3, r1
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e7cf      	b.n	800162e <HAL_PCD_EP_Transmit+0xca>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800168e:	2900      	cmp	r1, #0
 8001690:	d120      	bne.n	80016d4 <HAL_PCD_EP_Transmit+0x170>
 8001692:	0001      	movs	r1, r0
 8001694:	3150      	adds	r1, #80	; 0x50
 8001696:	8809      	ldrh	r1, [r1, #0]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	185b      	adds	r3, r3, r1
 800169c:	4919      	ldr	r1, [pc, #100]	; (8001704 <HAL_PCD_EP_Transmit+0x1a0>)
 800169e:	1841      	adds	r1, r0, r1
 80016a0:	185b      	adds	r3, r3, r1
 80016a2:	2a3e      	cmp	r2, #62	; 0x3e
 80016a4:	d90e      	bls.n	80016c4 <HAL_PCD_EP_Transmit+0x160>
 80016a6:	0951      	lsrs	r1, r2, #5
 80016a8:	b289      	uxth	r1, r1
 80016aa:	06d2      	lsls	r2, r2, #27
 80016ac:	d101      	bne.n	80016b2 <HAL_PCD_EP_Transmit+0x14e>
 80016ae:	3901      	subs	r1, #1
 80016b0:	b289      	uxth	r1, r1
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_PCD_EP_Transmit+0x1b0>)
 80016b4:	0289      	lsls	r1, r1, #10
 80016b6:	4311      	orrs	r1, r2
 80016b8:	8019      	strh	r1, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 80016ba:	231c      	movs	r3, #28
 80016bc:	436b      	muls	r3, r5
 80016be:	18e3      	adds	r3, r4, r3
 80016c0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80016c2:	e7b8      	b.n	8001636 <HAL_PCD_EP_Transmit+0xd2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80016c4:	0851      	lsrs	r1, r2, #1
 80016c6:	b289      	uxth	r1, r1
 80016c8:	07d2      	lsls	r2, r2, #31
 80016ca:	d501      	bpl.n	80016d0 <HAL_PCD_EP_Transmit+0x16c>
 80016cc:	3101      	adds	r1, #1
 80016ce:	b289      	uxth	r1, r1
 80016d0:	0289      	lsls	r1, r1, #10
 80016d2:	e7f1      	b.n	80016b8 <HAL_PCD_EP_Transmit+0x154>
 80016d4:	2901      	cmp	r1, #1
 80016d6:	d1f0      	bne.n	80016ba <HAL_PCD_EP_Transmit+0x156>
 80016d8:	0001      	movs	r1, r0
 80016da:	3150      	adds	r1, #80	; 0x50
 80016dc:	8809      	ldrh	r1, [r1, #0]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	18c3      	adds	r3, r0, r3
 80016e2:	185b      	adds	r3, r3, r1
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <HAL_PCD_EP_Transmit+0x1a0>)
 80016e6:	185b      	adds	r3, r3, r1
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	e7e6      	b.n	80016ba <HAL_PCD_EP_Transmit+0x156>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d000      	beq.n	80016f2 <HAL_PCD_EP_Transmit+0x18e>
 80016f0:	e76a      	b.n	80015c8 <HAL_PCD_EP_Transmit+0x64>
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	783a      	ldrb	r2, [r7, #0]
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	188b      	adds	r3, r1, r2
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	4906      	ldr	r1, [pc, #24]	; (8001718 <HAL_PCD_EP_Transmit+0x1b4>)
 80016fe:	4011      	ands	r1, r2
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_PCD_EP_Transmit+0x1bc>)
 8001702:	e7ad      	b.n	8001660 <HAL_PCD_EP_Transmit+0xfc>
 8001704:	00000402 	.word	0x00000402
 8001708:	ffff8fbf 	.word	0xffff8fbf
 800170c:	ffff8080 	.word	0xffff8080
 8001710:	00000406 	.word	0x00000406
 8001714:	ffff8000 	.word	0xffff8000
 8001718:	00000f0f 	.word	0x00000f0f
 800171c:	ffff80c0 	.word	0xffff80c0
 8001720:	ffffc080 	.word	0xffffc080

08001724 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001726:	2580      	movs	r5, #128	; 0x80
 8001728:	00ed      	lsls	r5, r5, #3
 800172a:	1940      	adds	r0, r0, r5
  uint32_t n = (uint32_t)wNBytes >> 1U;
 800172c:	085c      	lsrs	r4, r3, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800172e:	1882      	adds	r2, r0, r2
  
  for (i = n; i != 0U; i--)
 8001730:	0026      	movs	r6, r4
 8001732:	0008      	movs	r0, r1
 8001734:	2e00      	cmp	r6, #0
 8001736:	d107      	bne.n	8001748 <PCD_ReadPMA+0x24>
 8001738:	0064      	lsls	r4, r4, #1
 800173a:	1909      	adds	r1, r1, r4
 800173c:	1912      	adds	r2, r2, r4
    temp = *pdwVal++;
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
  }
  
  if (wNBytes % 2)
 800173e:	07db      	lsls	r3, r3, #31
 8001740:	d501      	bpl.n	8001746 <PCD_ReadPMA+0x22>
  {
    temp = *pdwVal++;
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001742:	8813      	ldrh	r3, [r2, #0]
 8001744:	700b      	strb	r3, [r1, #0]
  }
}
 8001746:	bd70      	pop	{r4, r5, r6, pc}
    temp = *pdwVal++;
 8001748:	1a45      	subs	r5, r0, r1
 800174a:	5aad      	ldrh	r5, [r5, r2]
  for (i = n; i != 0U; i--)
 800174c:	3e01      	subs	r6, #1
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800174e:	7005      	strb	r5, [r0, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8001750:	0a2d      	lsrs	r5, r5, #8
 8001752:	7045      	strb	r5, [r0, #1]
 8001754:	3002      	adds	r0, #2
 8001756:	e7ed      	b.n	8001734 <PCD_ReadPMA+0x10>

08001758 <HAL_PCD_IRQHandler>:
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800175a:	6803      	ldr	r3, [r0, #0]
{
 800175c:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800175e:	3306      	adds	r3, #6
 8001760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
{
 8001762:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001764:	b21b      	sxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	da00      	bge.n	800176c <HAL_PCD_IRQHandler+0x14>
 800176a:	e061      	b.n	8001830 <HAL_PCD_IRQHandler+0xd8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	3306      	adds	r3, #6
 8001770:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001772:	0552      	lsls	r2, r2, #21
 8001774:	d50a      	bpl.n	800178c <HAL_PCD_IRQHandler+0x34>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001776:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001778:	4986      	ldr	r1, [pc, #536]	; (8001994 <HAL_PCD_IRQHandler+0x23c>)
    HAL_PCD_ResetCallback(hpcd);
 800177a:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800177c:	400a      	ands	r2, r1
 800177e:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001780:	f002 fcc2 	bl	8004108 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001784:	2100      	movs	r1, #0
 8001786:	0020      	movs	r0, r4
 8001788:	f7ff fb81 	bl	8000e8e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	1d99      	adds	r1, r3, #6
 8001790:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8001792:	0452      	lsls	r2, r2, #17
 8001794:	d503      	bpl.n	800179e <HAL_PCD_IRQHandler+0x46>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001796:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8001798:	487f      	ldr	r0, [pc, #508]	; (8001998 <HAL_PCD_IRQHandler+0x240>)
 800179a:	4002      	ands	r2, r0
 800179c:	87ca      	strh	r2, [r1, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800179e:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 80017a0:	0492      	lsls	r2, r2, #18
 80017a2:	d503      	bpl.n	80017ac <HAL_PCD_IRQHandler+0x54>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80017a4:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 80017a6:	487d      	ldr	r0, [pc, #500]	; (800199c <HAL_PCD_IRQHandler+0x244>)
 80017a8:	4002      	ands	r2, r0
 80017aa:	87ca      	strh	r2, [r1, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80017ac:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 80017ae:	04d2      	lsls	r2, r2, #19
 80017b0:	d50f      	bpl.n	80017d2 <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80017b2:	2104      	movs	r1, #4
 80017b4:	3302      	adds	r3, #2
 80017b6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResumeCallback(hpcd);
 80017b8:	0020      	movs	r0, r4
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80017ba:	438a      	bics	r2, r1
 80017bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80017be:	4a78      	ldr	r2, [pc, #480]	; (80019a0 <HAL_PCD_IRQHandler+0x248>)
 80017c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResumeCallback(hpcd);
 80017c2:	f002 fcc5 	bl	8004150 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	4976      	ldr	r1, [pc, #472]	; (80019a4 <HAL_PCD_IRQHandler+0x24c>)
 80017ca:	3306      	adds	r3, #6
 80017cc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80017ce:	400a      	ands	r2, r1
 80017d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	1d9a      	adds	r2, r3, #6
 80017d6:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 80017d8:	0509      	lsls	r1, r1, #20
 80017da:	d512      	bpl.n	8001802 <HAL_PCD_IRQHandler+0xaa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80017dc:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 80017de:	4872      	ldr	r0, [pc, #456]	; (80019a8 <HAL_PCD_IRQHandler+0x250>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80017e0:	3302      	adds	r3, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80017e2:	4001      	ands	r1, r0
 80017e4:	87d1      	strh	r1, [r2, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80017e6:	2108      	movs	r1, #8
 80017e8:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80017ea:	4301      	orrs	r1, r0
 80017ec:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80017ee:	2104      	movs	r1, #4
 80017f0:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80017f2:	4301      	orrs	r1, r0
 80017f4:	87d9      	strh	r1, [r3, #62]	; 0x3e
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80017f6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80017f8:	04db      	lsls	r3, r3, #19
 80017fa:	d402      	bmi.n	8001802 <HAL_PCD_IRQHandler+0xaa>
      HAL_PCD_SuspendCallback(hpcd);
 80017fc:	0020      	movs	r0, r4
 80017fe:	f002 fc95 	bl	800412c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	3306      	adds	r3, #6
 8001806:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001808:	0592      	lsls	r2, r2, #22
 800180a:	d506      	bpl.n	800181a <HAL_PCD_IRQHandler+0xc2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800180c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800180e:	4967      	ldr	r1, [pc, #412]	; (80019ac <HAL_PCD_IRQHandler+0x254>)
    HAL_PCD_SOFCallback(hpcd);
 8001810:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001812:	400a      	ands	r2, r1
 8001814:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8001816:	f002 fc70 	bl	80040fa <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	3306      	adds	r3, #6
 800181e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001820:	05d2      	lsls	r2, r2, #23
 8001822:	d503      	bpl.n	800182c <HAL_PCD_IRQHandler+0xd4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001824:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001826:	4962      	ldr	r1, [pc, #392]	; (80019b0 <HAL_PCD_IRQHandler+0x258>)
 8001828:	400a      	ands	r2, r1
 800182a:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 800182c:	b005      	add	sp, #20
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8001830:	ab02      	add	r3, sp, #8
 8001832:	1d9f      	adds	r7, r3, #6
 8001834:	2300      	movs	r3, #0
 8001836:	803b      	strh	r3, [r7, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	aa03      	add	r2, sp, #12
 800183c:	1d83      	adds	r3, r0, #6
 800183e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001840:	b29b      	uxth	r3, r3
 8001842:	8013      	strh	r3, [r2, #0]
 8001844:	b21b      	sxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	db00      	blt.n	800184c <HAL_PCD_IRQHandler+0xf4>
 800184a:	e78f      	b.n	800176c <HAL_PCD_IRQHandler+0x14>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800184c:	230f      	movs	r3, #15
 800184e:	8816      	ldrh	r6, [r2, #0]
 8001850:	401e      	ands	r6, r3
    
    if (EPindex == 0U)
 8001852:	d000      	beq.n	8001856 <HAL_PCD_IRQHandler+0xfe>
 8001854:	e0bc      	b.n	80019d0 <HAL_PCD_IRQHandler+0x278>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001856:	2110      	movs	r1, #16
 8001858:	8813      	ldrh	r3, [r2, #0]
 800185a:	4019      	ands	r1, r3
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800185c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800185e:	2900      	cmp	r1, #0
 8001860:	d126      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x158>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001862:	4a54      	ldr	r2, [pc, #336]	; (80019b4 <HAL_PCD_IRQHandler+0x25c>)
 8001864:	4013      	ands	r3, r2
 8001866:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001868:	0003      	movs	r3, r0
 800186a:	3350      	adds	r3, #80	; 0x50
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	0023      	movs	r3, r4
 8001870:	3328      	adds	r3, #40	; 0x28
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	18c0      	adds	r0, r0, r3
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_PCD_IRQHandler+0x260>)
 800187a:	1880      	adds	r0, r0, r2
 800187c:	18c0      	adds	r0, r0, r3
 800187e:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 8001880:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001882:	059b      	lsls	r3, r3, #22
 8001884:	0d9b      	lsrs	r3, r3, #22
 8001886:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8001888:	18d3      	adds	r3, r2, r3
 800188a:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800188c:	0020      	movs	r0, r4
 800188e:	f002 fc29 	bl	80040e4 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001892:	1d63      	adds	r3, r4, #5
 8001894:	7fda      	ldrb	r2, [r3, #31]
 8001896:	2a00      	cmp	r2, #0
 8001898:	d0ce      	beq.n	8001838 <HAL_PCD_IRQHandler+0xe0>
 800189a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800189c:	2800      	cmp	r0, #0
 800189e:	d1cb      	bne.n	8001838 <HAL_PCD_IRQHandler+0xe0>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	7fd9      	ldrb	r1, [r3, #31]
 80018a4:	4311      	orrs	r1, r2
 80018a6:	6822      	ldr	r2, [r4, #0]
 80018a8:	324c      	adds	r2, #76	; 0x4c
 80018aa:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 80018ac:	77d8      	strb	r0, [r3, #31]
 80018ae:	e7c3      	b.n	8001838 <HAL_PCD_IRQHandler+0xe0>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018b0:	803b      	strh	r3, [r7, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018b2:	883a      	ldrh	r2, [r7, #0]
 80018b4:	0512      	lsls	r2, r2, #20
 80018b6:	d520      	bpl.n	80018fa <HAL_PCD_IRQHandler+0x1a2>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018b8:	0003      	movs	r3, r0
 80018ba:	3350      	adds	r3, #80	; 0x50
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	2384      	movs	r3, #132	; 0x84
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	5ce3      	ldrb	r3, [r4, r3]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80018c4:	0021      	movs	r1, r4
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	18c3      	adds	r3, r0, r3
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	4a3b      	ldr	r2, [pc, #236]	; (80019bc <HAL_PCD_IRQHandler+0x264>)
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80018ce:	31ed      	adds	r1, #237	; 0xed
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018d0:	189b      	adds	r3, r3, r2
 80018d2:	0022      	movs	r2, r4
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	3209      	adds	r2, #9
 80018d8:	059b      	lsls	r3, r3, #22
 80018da:	0d9b      	lsrs	r3, r3, #22
 80018dc:	32ff      	adds	r2, #255	; 0xff
 80018de:	6193      	str	r3, [r2, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80018e0:	31ff      	adds	r1, #255	; 0xff
 80018e2:	8892      	ldrh	r2, [r2, #4]
 80018e4:	f7ff ff1e 	bl	8001724 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80018e8:	6822      	ldr	r2, [r4, #0]
 80018ea:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_PCD_IRQHandler+0x268>)
 80018ec:	8813      	ldrh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80018ee:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80018f0:	400b      	ands	r3, r1
 80018f2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80018f4:	f002 fbe0 	bl	80040b8 <HAL_PCD_SetupStageCallback>
 80018f8:	e79e      	b.n	8001838 <HAL_PCD_IRQHandler+0xe0>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018fa:	883a      	ldrh	r2, [r7, #0]
 80018fc:	b212      	sxth	r2, r2
 80018fe:	2a00      	cmp	r2, #0
 8001900:	da9a      	bge.n	8001838 <HAL_PCD_IRQHandler+0xe0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001902:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <HAL_PCD_IRQHandler+0x268>)
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001904:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001906:	4013      	ands	r3, r2
 8001908:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800190a:	0003      	movs	r3, r0
 800190c:	3350      	adds	r3, #80	; 0x50
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	2384      	movs	r3, #132	; 0x84
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	5ce3      	ldrb	r3, [r4, r3]
 8001916:	3509      	adds	r5, #9
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	18c3      	adds	r3, r0, r3
 800191c:	189b      	adds	r3, r3, r2
 800191e:	4a27      	ldr	r2, [pc, #156]	; (80019bc <HAL_PCD_IRQHandler+0x264>)
 8001920:	35ff      	adds	r5, #255	; 0xff
 8001922:	189b      	adds	r3, r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	059b      	lsls	r3, r3, #22
 8001928:	0d9b      	lsrs	r3, r3, #22
 800192a:	61ab      	str	r3, [r5, #24]
          
          if (ep->xfer_count != 0U)
 800192c:	d007      	beq.n	800193e <HAL_PCD_IRQHandler+0x1e6>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800192e:	88aa      	ldrh	r2, [r5, #4]
 8001930:	6929      	ldr	r1, [r5, #16]
 8001932:	f7ff fef7 	bl	8001724 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001936:	692b      	ldr	r3, [r5, #16]
 8001938:	69aa      	ldr	r2, [r5, #24]
 800193a:	189b      	adds	r3, r3, r2
 800193c:	612b      	str	r3, [r5, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800193e:	2100      	movs	r1, #0
 8001940:	0020      	movs	r0, r4
 8001942:	f002 fbc3 	bl	80040cc <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	491c      	ldr	r1, [pc, #112]	; (80019bc <HAL_PCD_IRQHandler+0x264>)
 800194a:	0013      	movs	r3, r2
 800194c:	3350      	adds	r3, #80	; 0x50
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	68e8      	ldr	r0, [r5, #12]
 8001952:	1851      	adds	r1, r2, r1
 8001954:	18c9      	adds	r1, r1, r3
 8001956:	283e      	cmp	r0, #62	; 0x3e
 8001958:	d913      	bls.n	8001982 <HAL_PCD_IRQHandler+0x22a>
 800195a:	0943      	lsrs	r3, r0, #5
 800195c:	b29b      	uxth	r3, r3
 800195e:	06c0      	lsls	r0, r0, #27
 8001960:	d101      	bne.n	8001966 <HAL_PCD_IRQHandler+0x20e>
 8001962:	3b01      	subs	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	4817      	ldr	r0, [pc, #92]	; (80019c4 <HAL_PCD_IRQHandler+0x26c>)
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4303      	orrs	r3, r0
 800196c:	800b      	strh	r3, [r1, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 800196e:	8811      	ldrh	r1, [r2, #0]
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_PCD_IRQHandler+0x270>)
 8001972:	4019      	ands	r1, r3
 8001974:	23c0      	movs	r3, #192	; 0xc0
 8001976:	019b      	lsls	r3, r3, #6
 8001978:	4059      	eors	r1, r3
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_PCD_IRQHandler+0x274>)
 800197c:	430b      	orrs	r3, r1
 800197e:	8013      	strh	r3, [r2, #0]
 8001980:	e75a      	b.n	8001838 <HAL_PCD_IRQHandler+0xe0>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001982:	0843      	lsrs	r3, r0, #1
 8001984:	b29b      	uxth	r3, r3
 8001986:	07c0      	lsls	r0, r0, #31
 8001988:	d501      	bpl.n	800198e <HAL_PCD_IRQHandler+0x236>
 800198a:	3301      	adds	r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	029b      	lsls	r3, r3, #10
 8001990:	e7ec      	b.n	800196c <HAL_PCD_IRQHandler+0x214>
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	fffffbff 	.word	0xfffffbff
 8001998:	ffffbfff 	.word	0xffffbfff
 800199c:	ffffdfff 	.word	0xffffdfff
 80019a0:	ffffbd00 	.word	0xffffbd00
 80019a4:	ffffefff 	.word	0xffffefff
 80019a8:	fffff7ff 	.word	0xfffff7ff
 80019ac:	fffffdff 	.word	0xfffffdff
 80019b0:	fffffeff 	.word	0xfffffeff
 80019b4:	ffff8f0f 	.word	0xffff8f0f
 80019b8:	00000402 	.word	0x00000402
 80019bc:	00000406 	.word	0x00000406
 80019c0:	00000f8f 	.word	0x00000f8f
 80019c4:	ffff8000 	.word	0xffff8000
 80019c8:	ffffbf8f 	.word	0xffffbf8f
 80019cc:	ffff8080 	.word	0xffff8080
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 80019d0:	00b3      	lsls	r3, r6, #2
 80019d2:	18c1      	adds	r1, r0, r3
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	880b      	ldrh	r3, [r1, #0]
 80019d8:	803b      	strh	r3, [r7, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019da:	883a      	ldrh	r2, [r7, #0]
 80019dc:	b212      	sxth	r2, r2
 80019de:	2a00      	cmp	r2, #0
 80019e0:	da3c      	bge.n	8001a5c <HAL_PCD_IRQHandler+0x304>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80019e2:	4a73      	ldr	r2, [pc, #460]	; (8001bb0 <HAL_PCD_IRQHandler+0x458>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	800b      	strh	r3, [r1, #0]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80019e8:	211c      	movs	r1, #28
 80019ea:	4371      	muls	r1, r6
 80019ec:	1861      	adds	r1, r4, r1
 80019ee:	000b      	movs	r3, r1
 80019f0:	0002      	movs	r2, r0
 80019f2:	33ff      	adds	r3, #255	; 0xff
 80019f4:	7cdd      	ldrb	r5, [r3, #19]
 80019f6:	3250      	adds	r2, #80	; 0x50
 80019f8:	7a5b      	ldrb	r3, [r3, #9]
 80019fa:	2d00      	cmp	r5, #0
 80019fc:	d173      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x38e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019fe:	8812      	ldrh	r2, [r2, #0]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	18c3      	adds	r3, r0, r3
 8001a04:	189b      	adds	r3, r3, r2
 8001a06:	4a6b      	ldr	r2, [pc, #428]	; (8001bb4 <HAL_PCD_IRQHandler+0x45c>)
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	881d      	ldrh	r5, [r3, #0]
 8001a0c:	05ad      	lsls	r5, r5, #22
 8001a0e:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 8001a10:	d007      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x2ca>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a12:	000b      	movs	r3, r1
 8001a14:	31fc      	adds	r1, #252	; 0xfc
 8001a16:	33fe      	adds	r3, #254	; 0xfe
 8001a18:	89da      	ldrh	r2, [r3, #14]
 8001a1a:	69c9      	ldr	r1, [r1, #28]
 8001a1c:	002b      	movs	r3, r5
 8001a1e:	f7ff fe81 	bl	8001724 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001a22:	211c      	movs	r1, #28
 8001a24:	0008      	movs	r0, r1
 8001a26:	4370      	muls	r0, r6
 8001a28:	1820      	adds	r0, r4, r0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	32fc      	adds	r2, #252	; 0xfc
 8001a2e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a30:	195b      	adds	r3, r3, r5
 8001a32:	6253      	str	r3, [r2, #36]	; 0x24
        ep->xfer_buff+=count;
 8001a34:	69d3      	ldr	r3, [r2, #28]
 8001a36:	469c      	mov	ip, r3
 8001a38:	44ac      	add	ip, r5
 8001a3a:	4663      	mov	r3, ip
 8001a3c:	61d3      	str	r3, [r2, #28]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a3e:	6a13      	ldr	r3, [r2, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x2f4>
 8001a44:	6992      	ldr	r2, [r2, #24]
 8001a46:	4295      	cmp	r5, r2
 8001a48:	d300      	bcc.n	8001a4c <HAL_PCD_IRQHandler+0x2f4>
 8001a4a:	e07b      	b.n	8001b44 <HAL_PCD_IRQHandler+0x3ec>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a4c:	000b      	movs	r3, r1
 8001a4e:	4373      	muls	r3, r6
 8001a50:	18e3      	adds	r3, r4, r3
 8001a52:	33ff      	adds	r3, #255	; 0xff
 8001a54:	7a59      	ldrb	r1, [r3, #9]
 8001a56:	0020      	movs	r0, r4
 8001a58:	f002 fb38 	bl	80040cc <HAL_PCD_DataOutStageCallback>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	883b      	ldrh	r3, [r7, #0]
 8001a60:	4213      	tst	r3, r2
 8001a62:	d100      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x30e>
 8001a64:	e6e8      	b.n	8001838 <HAL_PCD_IRQHandler+0xe0>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001a66:	6820      	ldr	r0, [r4, #0]
 8001a68:	00b3      	lsls	r3, r6, #2
 8001a6a:	18c3      	adds	r3, r0, r3
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	4952      	ldr	r1, [pc, #328]	; (8001bb8 <HAL_PCD_IRQHandler+0x460>)
 8001a70:	400a      	ands	r2, r1
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001a72:	211c      	movs	r1, #28
 8001a74:	4371      	muls	r1, r6
 8001a76:	1861      	adds	r1, r4, r1
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001a78:	801a      	strh	r2, [r3, #0]
        if (ep->doublebuffer == 0U)
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	3332      	adds	r3, #50	; 0x32
 8001a80:	781d      	ldrb	r5, [r3, #0]
 8001a82:	3250      	adds	r2, #80	; 0x50
 8001a84:	3b0a      	subs	r3, #10
 8001a86:	2d00      	cmp	r5, #0
 8001a88:	d163      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x3fa>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	8812      	ldrh	r2, [r2, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	18c3      	adds	r3, r0, r3
 8001a92:	189b      	adds	r3, r3, r2
 8001a94:	4a49      	ldr	r2, [pc, #292]	; (8001bbc <HAL_PCD_IRQHandler+0x464>)
 8001a96:	189b      	adds	r3, r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	059b      	lsls	r3, r3, #22
 8001a9c:	0d9b      	lsrs	r3, r3, #22
 8001a9e:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 8001aa0:	d003      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x352>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001aa2:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001aa4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001aa6:	f7ff fd49 	bl	800153c <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	0013      	movs	r3, r2
 8001aae:	3350      	adds	r3, #80	; 0x50
 8001ab0:	8818      	ldrh	r0, [r3, #0]
 8001ab2:	231c      	movs	r3, #28
 8001ab4:	435e      	muls	r6, r3
 8001ab6:	19a6      	adds	r6, r4, r6
 8001ab8:	0031      	movs	r1, r6
 8001aba:	3128      	adds	r1, #40	; 0x28
 8001abc:	780b      	ldrb	r3, [r1, #0]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	18d3      	adds	r3, r2, r3
 8001ac2:	4a3e      	ldr	r2, [pc, #248]	; (8001bbc <HAL_PCD_IRQHandler+0x464>)
 8001ac4:	181b      	adds	r3, r3, r0
 8001ac6:	189b      	adds	r3, r3, r2
 8001ac8:	881a      	ldrh	r2, [r3, #0]
        ep->xfer_buff+=ep->xfer_count;
 8001aca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001acc:	0592      	lsls	r2, r2, #22
 8001ace:	0d92      	lsrs	r2, r2, #22
 8001ad0:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001ad2:	189a      	adds	r2, r3, r2
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ad4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8001ad6:	63b2      	str	r2, [r6, #56]	; 0x38
 8001ad8:	7809      	ldrb	r1, [r1, #0]
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ada:	0020      	movs	r0, r4
        if (ep->xfer_len == 0U)
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d164      	bne.n	8001baa <HAL_PCD_IRQHandler+0x452>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ae0:	f002 fb00 	bl	80040e4 <HAL_PCD_DataInStageCallback>
 8001ae4:	e6a8      	b.n	8001838 <HAL_PCD_IRQHandler+0xe0>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001ae6:	009d      	lsls	r5, r3, #2
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ae8:	8812      	ldrh	r2, [r2, #0]
 8001aea:	00db      	lsls	r3, r3, #3
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001aec:	5a2d      	ldrh	r5, [r5, r0]
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aee:	18c3      	adds	r3, r0, r3
 8001af0:	189b      	adds	r3, r3, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001af2:	046d      	lsls	r5, r5, #17
 8001af4:	d51c      	bpl.n	8001b30 <HAL_PCD_IRQHandler+0x3d8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001af6:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <HAL_PCD_IRQHandler+0x464>)
 8001af8:	189b      	adds	r3, r3, r2
 8001afa:	881d      	ldrh	r5, [r3, #0]
 8001afc:	05ad      	lsls	r5, r5, #22
 8001afe:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8001b00:	d007      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x3ba>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b02:	000b      	movs	r3, r1
 8001b04:	33fe      	adds	r3, #254	; 0xfe
 8001b06:	8a1a      	ldrh	r2, [r3, #16]
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b08:	31fc      	adds	r1, #252	; 0xfc
 8001b0a:	002b      	movs	r3, r5
 8001b0c:	69c9      	ldr	r1, [r1, #28]
 8001b0e:	f7ff fe09 	bl	8001724 <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001b12:	231c      	movs	r3, #28
 8001b14:	4373      	muls	r3, r6
 8001b16:	18e3      	adds	r3, r4, r3
 8001b18:	33ff      	adds	r3, #255	; 0xff
 8001b1a:	7a5b      	ldrb	r3, [r3, #9]
 8001b1c:	6822      	ldr	r2, [r4, #0]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	4926      	ldr	r1, [pc, #152]	; (8001bc0 <HAL_PCD_IRQHandler+0x468>)
 8001b26:	4011      	ands	r1, r2
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <HAL_PCD_IRQHandler+0x46c>)
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	e778      	b.n	8001a22 <HAL_PCD_IRQHandler+0x2ca>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b30:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <HAL_PCD_IRQHandler+0x45c>)
 8001b32:	189b      	adds	r3, r3, r2
 8001b34:	881d      	ldrh	r5, [r3, #0]
 8001b36:	05ad      	lsls	r5, r5, #22
 8001b38:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8001b3a:	d0ea      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x3ba>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b3c:	000b      	movs	r3, r1
 8001b3e:	33fe      	adds	r3, #254	; 0xfe
 8001b40:	8a5a      	ldrh	r2, [r3, #18]
 8001b42:	e7e1      	b.n	8001b08 <HAL_PCD_IRQHandler+0x3b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b44:	30ff      	adds	r0, #255	; 0xff
 8001b46:	7a41      	ldrb	r1, [r0, #9]
 8001b48:	4662      	mov	r2, ip
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f7ff fba8 	bl	80012a0 <HAL_PCD_EP_Receive>
 8001b50:	e784      	b.n	8001a5c <HAL_PCD_IRQHandler+0x304>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001b52:	781b      	ldrb	r3, [r3, #0]
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b54:	8812      	ldrh	r2, [r2, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001b56:	009d      	lsls	r5, r3, #2
 8001b58:	5a2d      	ldrh	r5, [r5, r0]
 8001b5a:	00db      	lsls	r3, r3, #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b5c:	18c3      	adds	r3, r0, r3
 8001b5e:	189b      	adds	r3, r3, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001b60:	066d      	lsls	r5, r5, #25
 8001b62:	d519      	bpl.n	8001b98 <HAL_PCD_IRQHandler+0x440>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b64:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <HAL_PCD_IRQHandler+0x464>)
 8001b66:	189b      	adds	r3, r3, r2
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	059b      	lsls	r3, r3, #22
 8001b6c:	0d9b      	lsrs	r3, r3, #22
 8001b6e:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8001b70:	d003      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x422>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001b72:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001b74:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001b76:	f7ff fce1 	bl	800153c <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8001b7a:	231c      	movs	r3, #28
 8001b7c:	4373      	muls	r3, r6
 8001b7e:	18e3      	adds	r3, r4, r3
 8001b80:	3328      	adds	r3, #40	; 0x28
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	18d1      	adds	r1, r2, r3
 8001b8a:	880b      	ldrh	r3, [r1, #0]
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_PCD_IRQHandler+0x468>)
 8001b8e:	401a      	ands	r2, r3
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_PCD_IRQHandler+0x470>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	800b      	strh	r3, [r1, #0]
 8001b96:	e788      	b.n	8001aaa <HAL_PCD_IRQHandler+0x352>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_PCD_IRQHandler+0x45c>)
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	059b      	lsls	r3, r3, #22
 8001ba0:	0d9b      	lsrs	r3, r3, #22
 8001ba2:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8001ba4:	d0e9      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x422>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001ba6:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001ba8:	e7e4      	b.n	8001b74 <HAL_PCD_IRQHandler+0x41c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001baa:	f7ff fcdb 	bl	8001564 <HAL_PCD_EP_Transmit>
 8001bae:	e643      	b.n	8001838 <HAL_PCD_IRQHandler+0xe0>
 8001bb0:	00000f8f 	.word	0x00000f8f
 8001bb4:	00000406 	.word	0x00000406
 8001bb8:	ffff8f0f 	.word	0xffff8f0f
 8001bbc:	00000402 	.word	0x00000402
 8001bc0:	00000f0f 	.word	0x00000f0f
 8001bc4:	ffff80c0 	.word	0xffff80c0
 8001bc8:	ffffc080 	.word	0xffffc080

08001bcc <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8001bcc:	b530      	push	{r4, r5, lr}
 8001bce:	241c      	movs	r4, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001bd0:	060d      	lsls	r5, r1, #24
 8001bd2:	d50a      	bpl.n	8001bea <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001bd4:	257f      	movs	r5, #127	; 0x7f
 8001bd6:	4029      	ands	r1, r5
 8001bd8:	4361      	muls	r1, r4
 8001bda:	3128      	adds	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bdc:	1841      	adds	r1, r0, r1
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001be2:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001be4:	808b      	strh	r3, [r1, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK;
}
 8001be6:	2000      	movs	r0, #0
 8001be8:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001bea:	4361      	muls	r1, r4
 8001bec:	3109      	adds	r1, #9
 8001bee:	31ff      	adds	r1, #255	; 0xff
 8001bf0:	e7f4      	b.n	8001bdc <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8001bf2:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8001bf4:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001bf6:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001bf8:	728a      	strb	r2, [r1, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001bfa:	810b      	strh	r3, [r1, #8]
 8001bfc:	e7f3      	b.n	8001be6 <HAL_PCDEx_PMAConfig+0x1a>
	...

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	6803      	ldr	r3, [r0, #0]
{
 8001c04:	b085      	sub	sp, #20
 8001c06:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c08:	07db      	lsls	r3, r3, #31
 8001c0a:	d42f      	bmi.n	8001c6c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	079b      	lsls	r3, r3, #30
 8001c10:	d500      	bpl.n	8001c14 <HAL_RCC_OscConfig+0x14>
 8001c12:	e086      	b.n	8001d22 <HAL_RCC_OscConfig+0x122>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	071b      	lsls	r3, r3, #28
 8001c18:	d500      	bpl.n	8001c1c <HAL_RCC_OscConfig+0x1c>
 8001c1a:	e0c6      	b.n	8001daa <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	075b      	lsls	r3, r3, #29
 8001c20:	d500      	bpl.n	8001c24 <HAL_RCC_OscConfig+0x24>
 8001c22:	e0e9      	b.n	8001df8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	06db      	lsls	r3, r3, #27
 8001c28:	d51a      	bpl.n	8001c60 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c2a:	696a      	ldr	r2, [r5, #20]
 8001c2c:	4cba      	ldr	r4, [pc, #744]	; (8001f18 <HAL_RCC_OscConfig+0x318>)
 8001c2e:	2304      	movs	r3, #4
 8001c30:	2a01      	cmp	r2, #1
 8001c32:	d000      	beq.n	8001c36 <HAL_RCC_OscConfig+0x36>
 8001c34:	e155      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c36:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c38:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c40:	431a      	orrs	r2, r3
 8001c42:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001c44:	f7fe ff1a 	bl	8000a7c <HAL_GetTick>
 8001c48:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c4c:	4233      	tst	r3, r6
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x52>
 8001c50:	e140      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c52:	21f8      	movs	r1, #248	; 0xf8
 8001c54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001c56:	69ab      	ldr	r3, [r5, #24]
 8001c58:	438a      	bics	r2, r1
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c60:	6a29      	ldr	r1, [r5, #32]
 8001c62:	2900      	cmp	r1, #0
 8001c64:	d000      	beq.n	8001c68 <HAL_RCC_OscConfig+0x68>
 8001c66:	e163      	b.n	8001f30 <HAL_RCC_OscConfig+0x330>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c6c:	210c      	movs	r1, #12
 8001c6e:	4caa      	ldr	r4, [pc, #680]	; (8001f18 <HAL_RCC_OscConfig+0x318>)
 8001c70:	6862      	ldr	r2, [r4, #4]
 8001c72:	400a      	ands	r2, r1
 8001c74:	2a04      	cmp	r2, #4
 8001c76:	d00b      	beq.n	8001c90 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c78:	6863      	ldr	r3, [r4, #4]
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d110      	bne.n	8001ca2 <HAL_RCC_OscConfig+0xa2>
 8001c80:	22c0      	movs	r2, #192	; 0xc0
 8001c82:	6863      	ldr	r3, [r4, #4]
 8001c84:	0252      	lsls	r2, r2, #9
 8001c86:	4013      	ands	r3, r2
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	0252      	lsls	r2, r2, #9
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d108      	bne.n	8001ca2 <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	039b      	lsls	r3, r3, #14
 8001c94:	d5ba      	bpl.n	8001c0c <HAL_RCC_OscConfig+0xc>
 8001c96:	686b      	ldr	r3, [r5, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1b7      	bne.n	8001c0c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001c9c:	2001      	movs	r0, #1
}
 8001c9e:	b005      	add	sp, #20
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	686b      	ldr	r3, [r5, #4]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d113      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xd0>
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cb2:	f7fe fee3 	bl	8000a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001cb8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	02b6      	lsls	r6, r6, #10
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	4233      	tst	r3, r6
 8001cc0:	d1a4      	bne.n	8001c0c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc2:	f7fe fedb 	bl	8000a7c <HAL_GetTick>
 8001cc6:	1bc0      	subs	r0, r0, r7
 8001cc8:	2864      	cmp	r0, #100	; 0x64
 8001cca:	d9f7      	bls.n	8001cbc <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8001ccc:	2003      	movs	r0, #3
 8001cce:	e7e6      	b.n	8001c9e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x102>
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	4a91      	ldr	r2, [pc, #580]	; (8001f1c <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd8:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	4013      	ands	r3, r2
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	4a8f      	ldr	r2, [pc, #572]	; (8001f20 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fec8 	bl	8000a7c <HAL_GetTick>
 8001cec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	4233      	tst	r3, r6
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xf6>
 8001cf4:	e78a      	b.n	8001c0c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf6:	f7fe fec1 	bl	8000a7c <HAL_GetTick>
 8001cfa:	1bc0      	subs	r0, r0, r7
 8001cfc:	2864      	cmp	r0, #100	; 0x64
 8001cfe:	d9f6      	bls.n	8001cee <HAL_RCC_OscConfig+0xee>
 8001d00:	e7e4      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d105      	bne.n	8001d12 <HAL_RCC_OscConfig+0x112>
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	02db      	lsls	r3, r3, #11
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6023      	str	r3, [r4, #0]
 8001d10:	e7ca      	b.n	8001ca8 <HAL_RCC_OscConfig+0xa8>
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	4a81      	ldr	r2, [pc, #516]	; (8001f1c <HAL_RCC_OscConfig+0x31c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	4a80      	ldr	r2, [pc, #512]	; (8001f20 <HAL_RCC_OscConfig+0x320>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	e7c6      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d22:	220c      	movs	r2, #12
 8001d24:	4c7c      	ldr	r4, [pc, #496]	; (8001f18 <HAL_RCC_OscConfig+0x318>)
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	4213      	tst	r3, r2
 8001d2a:	d00b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d2c:	6863      	ldr	r3, [r4, #4]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d115      	bne.n	8001d60 <HAL_RCC_OscConfig+0x160>
 8001d34:	22c0      	movs	r2, #192	; 0xc0
 8001d36:	6863      	ldr	r3, [r4, #4]
 8001d38:	0252      	lsls	r2, r2, #9
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	0212      	lsls	r2, r2, #8
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d10d      	bne.n	8001d60 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	079b      	lsls	r3, r3, #30
 8001d48:	d502      	bpl.n	8001d50 <HAL_RCC_OscConfig+0x150>
 8001d4a:	68eb      	ldr	r3, [r5, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d1a5      	bne.n	8001c9c <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	21f8      	movs	r1, #248	; 0xf8
 8001d52:	6822      	ldr	r2, [r4, #0]
 8001d54:	692b      	ldr	r3, [r5, #16]
 8001d56:	438a      	bics	r2, r1
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	e759      	b.n	8001c14 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	68ea      	ldr	r2, [r5, #12]
 8001d62:	2301      	movs	r3, #1
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d00f      	beq.n	8001d88 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 8001d68:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d70:	f7fe fe84 	bl	8000a7c <HAL_GetTick>
 8001d74:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	4233      	tst	r3, r6
 8001d7a:	d1e9      	bne.n	8001d50 <HAL_RCC_OscConfig+0x150>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fe7e 	bl	8000a7c <HAL_GetTick>
 8001d80:	1bc0      	subs	r0, r0, r7
 8001d82:	2802      	cmp	r0, #2
 8001d84:	d9f7      	bls.n	8001d76 <HAL_RCC_OscConfig+0x176>
 8001d86:	e7a1      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_DISABLE();
 8001d88:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	439a      	bics	r2, r3
 8001d8e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8001d90:	f7fe fe74 	bl	8000a7c <HAL_GetTick>
 8001d94:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	4233      	tst	r3, r6
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCC_OscConfig+0x19e>
 8001d9c:	e73a      	b.n	8001c14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9e:	f7fe fe6d 	bl	8000a7c <HAL_GetTick>
 8001da2:	1bc0      	subs	r0, r0, r7
 8001da4:	2802      	cmp	r0, #2
 8001da6:	d9f6      	bls.n	8001d96 <HAL_RCC_OscConfig+0x196>
 8001da8:	e790      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	69ea      	ldr	r2, [r5, #28]
 8001dac:	2301      	movs	r3, #1
 8001dae:	4c5a      	ldr	r4, [pc, #360]	; (8001f18 <HAL_RCC_OscConfig+0x318>)
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1d6>
      __HAL_RCC_LSI_ENABLE();
 8001db4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001db8:	4313      	orrs	r3, r2
 8001dba:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001dbc:	f7fe fe5e 	bl	8000a7c <HAL_GetTick>
 8001dc0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc4:	4233      	tst	r3, r6
 8001dc6:	d000      	beq.n	8001dca <HAL_RCC_OscConfig+0x1ca>
 8001dc8:	e728      	b.n	8001c1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dca:	f7fe fe57 	bl	8000a7c <HAL_GetTick>
 8001dce:	1bc0      	subs	r0, r0, r7
 8001dd0:	2802      	cmp	r0, #2
 8001dd2:	d9f6      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1c2>
 8001dd4:	e77a      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_LSI_DISABLE();
 8001dd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001dda:	439a      	bics	r2, r3
 8001ddc:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001dde:	f7fe fe4d 	bl	8000a7c <HAL_GetTick>
 8001de2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de6:	4233      	tst	r3, r6
 8001de8:	d100      	bne.n	8001dec <HAL_RCC_OscConfig+0x1ec>
 8001dea:	e717      	b.n	8001c1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dec:	f7fe fe46 	bl	8000a7c <HAL_GetTick>
 8001df0:	1bc0      	subs	r0, r0, r7
 8001df2:	2802      	cmp	r0, #2
 8001df4:	d9f6      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1e4>
 8001df6:	e769      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfc:	4c46      	ldr	r4, [pc, #280]	; (8001f18 <HAL_RCC_OscConfig+0x318>)
 8001dfe:	0552      	lsls	r2, r2, #21
 8001e00:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	4213      	tst	r3, r2
 8001e06:	d108      	bne.n	8001e1a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	69e3      	ldr	r3, [r4, #28]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61e3      	str	r3, [r4, #28]
 8001e0e:	69e3      	ldr	r3, [r4, #28]
 8001e10:	4013      	ands	r3, r2
 8001e12:	9303      	str	r3, [sp, #12]
 8001e14:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	2780      	movs	r7, #128	; 0x80
 8001e1c:	4e41      	ldr	r6, [pc, #260]	; (8001f24 <HAL_RCC_OscConfig+0x324>)
 8001e1e:	007f      	lsls	r7, r7, #1
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	423b      	tst	r3, r7
 8001e24:	d006      	beq.n	8001e34 <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e26:	68ab      	ldr	r3, [r5, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d113      	bne.n	8001e54 <HAL_RCC_OscConfig+0x254>
 8001e2c:	6a22      	ldr	r2, [r4, #32]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	6223      	str	r3, [r4, #32]
 8001e32:	e030      	b.n	8001e96 <HAL_RCC_OscConfig+0x296>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e34:	6833      	ldr	r3, [r6, #0]
 8001e36:	433b      	orrs	r3, r7
 8001e38:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fe1f 	bl	8000a7c <HAL_GetTick>
 8001e3e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	6833      	ldr	r3, [r6, #0]
 8001e42:	423b      	tst	r3, r7
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7fe fe19 	bl	8000a7c <HAL_GetTick>
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	1ac0      	subs	r0, r0, r3
 8001e4e:	2864      	cmp	r0, #100	; 0x64
 8001e50:	d9f6      	bls.n	8001e40 <HAL_RCC_OscConfig+0x240>
 8001e52:	e73b      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
 8001e54:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d114      	bne.n	8001e84 <HAL_RCC_OscConfig+0x284>
 8001e5a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5e:	4393      	bics	r3, r2
 8001e60:	6223      	str	r3, [r4, #32]
 8001e62:	6a23      	ldr	r3, [r4, #32]
 8001e64:	3203      	adds	r2, #3
 8001e66:	4393      	bics	r3, r2
 8001e68:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fe07 	bl	8000a7c <HAL_GetTick>
 8001e6e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	6a23      	ldr	r3, [r4, #32]
 8001e72:	423b      	tst	r3, r7
 8001e74:	d025      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe fe01 	bl	8000a7c <HAL_GetTick>
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x328>)
 8001e7c:	1b80      	subs	r0, r0, r6
 8001e7e:	4298      	cmp	r0, r3
 8001e80:	d9f6      	bls.n	8001e70 <HAL_RCC_OscConfig+0x270>
 8001e82:	e723      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2a0>
 8001e88:	6a21      	ldr	r1, [r4, #32]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6223      	str	r3, [r4, #32]
 8001e90:	6a23      	ldr	r3, [r4, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8001e96:	f7fe fdf1 	bl	8000a7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001e9c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	e00d      	b.n	8001ebc <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	6a23      	ldr	r3, [r4, #32]
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	6223      	str	r3, [r4, #32]
 8001ea8:	6a23      	ldr	r3, [r4, #32]
 8001eaa:	4393      	bics	r3, r2
 8001eac:	e7c0      	b.n	8001e30 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe fde5 	bl	8000a7c <HAL_GetTick>
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x328>)
 8001eb4:	1b80      	subs	r0, r0, r6
 8001eb6:	4298      	cmp	r0, r3
 8001eb8:	d900      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2bc>
 8001eba:	e707      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	6a23      	ldr	r3, [r4, #32]
 8001ebe:	423b      	tst	r3, r7
 8001ec0:	d0f5      	beq.n	8001eae <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 8001ec2:	9b00      	ldr	r3, [sp, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d000      	beq.n	8001eca <HAL_RCC_OscConfig+0x2ca>
 8001ec8:	e6ac      	b.n	8001c24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eca:	69e3      	ldr	r3, [r4, #28]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_RCC_OscConfig+0x32c>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61e3      	str	r3, [r4, #28]
 8001ed2:	e6a7      	b.n	8001c24 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ed4:	f7fe fdd2 	bl	8000a7c <HAL_GetTick>
 8001ed8:	1bc0      	subs	r0, r0, r7
 8001eda:	2802      	cmp	r0, #2
 8001edc:	d800      	bhi.n	8001ee0 <HAL_RCC_OscConfig+0x2e0>
 8001ede:	e6b4      	b.n	8001c4a <HAL_RCC_OscConfig+0x4a>
 8001ee0:	e6f4      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ee2:	3205      	adds	r2, #5
 8001ee4:	d103      	bne.n	8001eee <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ee6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ee8:	439a      	bics	r2, r3
 8001eea:	6362      	str	r2, [r4, #52]	; 0x34
 8001eec:	e6b1      	b.n	8001c52 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eee:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ef0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001ef4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001efa:	4393      	bics	r3, r2
 8001efc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001efe:	f7fe fdbd 	bl	8000a7c <HAL_GetTick>
 8001f02:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f06:	4233      	tst	r3, r6
 8001f08:	d100      	bne.n	8001f0c <HAL_RCC_OscConfig+0x30c>
 8001f0a:	e6a9      	b.n	8001c60 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f0c:	f7fe fdb6 	bl	8000a7c <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d9f6      	bls.n	8001f04 <HAL_RCC_OscConfig+0x304>
 8001f16:	e6d9      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	fffeffff 	.word	0xfffeffff
 8001f20:	fffbffff 	.word	0xfffbffff
 8001f24:	40007000 	.word	0x40007000
 8001f28:	00001388 	.word	0x00001388
 8001f2c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f30:	220c      	movs	r2, #12
 8001f32:	4c26      	ldr	r4, [pc, #152]	; (8001fcc <HAL_RCC_OscConfig+0x3cc>)
      return HAL_ERROR;
 8001f34:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f36:	6863      	ldr	r3, [r4, #4]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d100      	bne.n	8001f40 <HAL_RCC_OscConfig+0x340>
 8001f3e:	e6ae      	b.n	8001c9e <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_PLL_DISABLE();
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_RCC_OscConfig+0x3d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	2902      	cmp	r1, #2
 8001f4a:	d12f      	bne.n	8001fac <HAL_RCC_OscConfig+0x3ac>
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fd96 	bl	8000a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001f52:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	04b6      	lsls	r6, r6, #18
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	4233      	tst	r3, r6
 8001f5a:	d121      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f60:	4393      	bics	r3, r2
 8001f62:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001f64:	4313      	orrs	r3, r2
 8001f66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f68:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f6c:	6862      	ldr	r2, [r4, #4]
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <HAL_RCC_OscConfig+0x3d4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f72:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	400a      	ands	r2, r1
 8001f76:	4313      	orrs	r3, r2
 8001f78:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	045b      	lsls	r3, r3, #17
 8001f80:	4313      	orrs	r3, r2
 8001f82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f84:	f7fe fd7a 	bl	8000a7c <HAL_GetTick>
 8001f88:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8a:	04ad      	lsls	r5, r5, #18
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	422b      	tst	r3, r5
 8001f90:	d000      	beq.n	8001f94 <HAL_RCC_OscConfig+0x394>
 8001f92:	e669      	b.n	8001c68 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fd72 	bl	8000a7c <HAL_GetTick>
 8001f98:	1b80      	subs	r0, r0, r6
 8001f9a:	2802      	cmp	r0, #2
 8001f9c:	d9f6      	bls.n	8001f8c <HAL_RCC_OscConfig+0x38c>
 8001f9e:	e695      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fd6c 	bl	8000a7c <HAL_GetTick>
 8001fa4:	1bc0      	subs	r0, r0, r7
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9d5      	bls.n	8001f56 <HAL_RCC_OscConfig+0x356>
 8001faa:	e68f      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8001fac:	f7fe fd66 	bl	8000a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001fb2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	04ad      	lsls	r5, r5, #18
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	422b      	tst	r3, r5
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3be>
 8001fbc:	e654      	b.n	8001c68 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fd5d 	bl	8000a7c <HAL_GetTick>
 8001fc2:	1b80      	subs	r0, r0, r6
 8001fc4:	2802      	cmp	r0, #2
 8001fc6:	d9f6      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3b6>
 8001fc8:	e680      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	ffc27fff 	.word	0xffc27fff

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fda:	4d12      	ldr	r5, [pc, #72]	; (8002024 <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8001fdc:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fde:	2210      	movs	r2, #16
 8001fe0:	0029      	movs	r1, r5
 8001fe2:	4668      	mov	r0, sp
 8001fe4:	f002 fa00 	bl	80043e8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fe8:	0029      	movs	r1, r5
 8001fea:	ac04      	add	r4, sp, #16
 8001fec:	3110      	adds	r1, #16
 8001fee:	2210      	movs	r2, #16
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f002 f9f9 	bl	80043e8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001ff8:	490b      	ldr	r1, [pc, #44]	; (8002028 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ffa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	2a08      	cmp	r2, #8
 8002000:	d10d      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x46>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002002:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002004:	210f      	movs	r1, #15
 8002006:	4668      	mov	r0, sp
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800200c:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800200e:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002010:	5ca1      	ldrb	r1, [r4, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <HAL_RCC_GetSysClockFreq+0x54>)
 8002014:	f7fe f88c 	bl	8000130 <__udivsi3>
 8002018:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800201a:	b009      	add	sp, #36	; 0x24
 800201c:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800201e:	4803      	ldr	r0, [pc, #12]	; (800202c <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8002020:	e7fb      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x42>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	08004cac 	.word	0x08004cac
 8002028:	40021000 	.word	0x40021000
 800202c:	007a1200 	.word	0x007a1200

08002030 <HAL_RCC_ClockConfig>:
{
 8002030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002032:	2201      	movs	r2, #1
 8002034:	4c43      	ldr	r4, [pc, #268]	; (8002144 <HAL_RCC_ClockConfig+0x114>)
{
 8002036:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002038:	6823      	ldr	r3, [r4, #0]
{
 800203a:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800203c:	4013      	ands	r3, r2
 800203e:	428b      	cmp	r3, r1
 8002040:	d31c      	bcc.n	800207c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002042:	6832      	ldr	r2, [r6, #0]
 8002044:	0793      	lsls	r3, r2, #30
 8002046:	d423      	bmi.n	8002090 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002048:	07d3      	lsls	r3, r2, #31
 800204a:	d429      	bmi.n	80020a0 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800204c:	2301      	movs	r3, #1
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	401a      	ands	r2, r3
 8002052:	4297      	cmp	r7, r2
 8002054:	d367      	bcc.n	8002126 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	6833      	ldr	r3, [r6, #0]
 8002058:	4c3b      	ldr	r4, [pc, #236]	; (8002148 <HAL_RCC_ClockConfig+0x118>)
 800205a:	075b      	lsls	r3, r3, #29
 800205c:	d46a      	bmi.n	8002134 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205e:	f7ff ffbb 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8002062:	6863      	ldr	r3, [r4, #4]
 8002064:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x11c>)
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	0f1b      	lsrs	r3, r3, #28
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	40d8      	lsrs	r0, r3
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_RCC_ClockConfig+0x120>)
 8002070:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002072:	2000      	movs	r0, #0
 8002074:	f7fe fba0 	bl	80007b8 <HAL_InitTick>
  return HAL_OK;
 8002078:	2000      	movs	r0, #0
 800207a:	e008      	b.n	800208e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	4393      	bics	r3, r2
 8002080:	430b      	orrs	r3, r1
 8002082:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	4013      	ands	r3, r2
 8002088:	4299      	cmp	r1, r3
 800208a:	d0da      	beq.n	8002042 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800208c:	2001      	movs	r0, #1
}
 800208e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	20f0      	movs	r0, #240	; 0xf0
 8002092:	492d      	ldr	r1, [pc, #180]	; (8002148 <HAL_RCC_ClockConfig+0x118>)
 8002094:	684b      	ldr	r3, [r1, #4]
 8002096:	4383      	bics	r3, r0
 8002098:	68b0      	ldr	r0, [r6, #8]
 800209a:	4303      	orrs	r3, r0
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e7d3      	b.n	8002048 <HAL_RCC_ClockConfig+0x18>
 80020a0:	4d29      	ldr	r5, [pc, #164]	; (8002148 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d11a      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	039b      	lsls	r3, r3, #14
 80020ac:	d5ee      	bpl.n	800208c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	2103      	movs	r1, #3
 80020b0:	686b      	ldr	r3, [r5, #4]
 80020b2:	438b      	bics	r3, r1
 80020b4:	4313      	orrs	r3, r2
 80020b6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80020b8:	f7fe fce0 	bl	8000a7c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80020be:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d115      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c4:	220c      	movs	r2, #12
 80020c6:	686b      	ldr	r3, [r5, #4]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d0be      	beq.n	800204c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7fe fcd5 	bl	8000a7c <HAL_GetTick>
 80020d2:	9b01      	ldr	r3, [sp, #4]
 80020d4:	1ac0      	subs	r0, r0, r3
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_RCC_ClockConfig+0x124>)
 80020d8:	4298      	cmp	r0, r3
 80020da:	d9f3      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80020dc:	2003      	movs	r0, #3
 80020de:	e7d6      	b.n	800208e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e0:	2a02      	cmp	r2, #2
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	d4e2      	bmi.n	80020ae <HAL_RCC_ClockConfig+0x7e>
 80020e8:	e7d0      	b.n	800208c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	079b      	lsls	r3, r3, #30
 80020ec:	d4df      	bmi.n	80020ae <HAL_RCC_ClockConfig+0x7e>
 80020ee:	e7cd      	b.n	800208c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d012      	beq.n	800211a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f4:	220c      	movs	r2, #12
 80020f6:	686b      	ldr	r3, [r5, #4]
 80020f8:	4213      	tst	r3, r2
 80020fa:	d0a7      	beq.n	800204c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe fcbe 	bl	8000a7c <HAL_GetTick>
 8002100:	9b01      	ldr	r3, [sp, #4]
 8002102:	1ac0      	subs	r0, r0, r3
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_ClockConfig+0x124>)
 8002106:	4298      	cmp	r0, r3
 8002108:	d9f4      	bls.n	80020f4 <HAL_RCC_ClockConfig+0xc4>
 800210a:	e7e7      	b.n	80020dc <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fcb6 	bl	8000a7c <HAL_GetTick>
 8002110:	9b01      	ldr	r3, [sp, #4]
 8002112:	1ac0      	subs	r0, r0, r3
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_ClockConfig+0x124>)
 8002116:	4298      	cmp	r0, r3
 8002118:	d8e0      	bhi.n	80020dc <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211a:	220c      	movs	r2, #12
 800211c:	686b      	ldr	r3, [r5, #4]
 800211e:	4013      	ands	r3, r2
 8002120:	2b08      	cmp	r3, #8
 8002122:	d1f3      	bne.n	800210c <HAL_RCC_ClockConfig+0xdc>
 8002124:	e792      	b.n	800204c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	6822      	ldr	r2, [r4, #0]
 8002128:	439a      	bics	r2, r3
 800212a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	421a      	tst	r2, r3
 8002130:	d1ac      	bne.n	800208c <HAL_RCC_ClockConfig+0x5c>
 8002132:	e790      	b.n	8002056 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_ClockConfig+0x128>)
 8002138:	4013      	ands	r3, r2
 800213a:	68f2      	ldr	r2, [r6, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	6063      	str	r3, [r4, #4]
 8002140:	e78d      	b.n	800205e <HAL_RCC_ClockConfig+0x2e>
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	08004de3 	.word	0x08004de3
 8002150:	2000000c 	.word	0x2000000c
 8002154:	00001388 	.word	0x00001388
 8002158:	fffff8ff 	.word	0xfffff8ff

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x14>)
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	055b      	lsls	r3, r3, #21
 8002164:	0f5b      	lsrs	r3, r3, #29
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800216a:	6810      	ldr	r0, [r2, #0]
 800216c:	40d8      	lsrs	r0, r3
}    
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	08004df3 	.word	0x08004df3
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800217c:	2307      	movs	r3, #7
{
 800217e:	b510      	push	{r4, lr}
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002180:	2403      	movs	r4, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002182:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_GetClockConfig+0x30>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4022      	ands	r2, r4
 800218a:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	34ed      	adds	r4, #237	; 0xed
 8002190:	4022      	ands	r2, r4
 8002192:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002194:	22e0      	movs	r2, #224	; 0xe0
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	00d2      	lsls	r2, r2, #3
 800219a:	4013      	ands	r3, r2
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800219c:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800219e:	60c3      	str	r3, [r0, #12]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCC_GetClockConfig+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4013      	ands	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
}
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b6:	6803      	ldr	r3, [r0, #0]
{
 80021b8:	b085      	sub	sp, #20
 80021ba:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021bc:	03db      	lsls	r3, r3, #15
 80021be:	d528      	bpl.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	4c3b      	ldr	r4, [pc, #236]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80021c6:	0552      	lsls	r2, r2, #21
 80021c8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021cc:	4213      	tst	r3, r2
 80021ce:	d108      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	69e3      	ldr	r3, [r4, #28]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61e3      	str	r3, [r4, #28]
 80021d6:	69e3      	ldr	r3, [r4, #28]
 80021d8:	4013      	ands	r3, r2
 80021da:	9303      	str	r3, [sp, #12]
 80021dc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80021de:	2301      	movs	r3, #1
 80021e0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	2780      	movs	r7, #128	; 0x80
 80021e4:	4e34      	ldr	r6, [pc, #208]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80021e6:	007f      	lsls	r7, r7, #1
 80021e8:	6833      	ldr	r3, [r6, #0]
 80021ea:	423b      	tst	r3, r7
 80021ec:	d02f      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ee:	22c0      	movs	r2, #192	; 0xc0
 80021f0:	6a23      	ldr	r3, [r4, #32]
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	4e31      	ldr	r6, [pc, #196]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f8:	d13b      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021fa:	6a23      	ldr	r3, [r4, #32]
 80021fc:	401e      	ands	r6, r3
 80021fe:	686b      	ldr	r3, [r5, #4]
 8002200:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002202:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002204:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002206:	2b01      	cmp	r3, #1
 8002208:	d103      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	69e3      	ldr	r3, [r4, #28]
 800220c:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800220e:	4013      	ands	r3, r2
 8002210:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002212:	682a      	ldr	r2, [r5, #0]
 8002214:	07d3      	lsls	r3, r2, #31
 8002216:	d506      	bpl.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002218:	2003      	movs	r0, #3
 800221a:	4926      	ldr	r1, [pc, #152]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800221c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800221e:	4383      	bics	r3, r0
 8002220:	68a8      	ldr	r0, [r5, #8]
 8002222:	4303      	orrs	r3, r0
 8002224:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002226:	0693      	lsls	r3, r2, #26
 8002228:	d506      	bpl.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222a:	2010      	movs	r0, #16
 800222c:	4921      	ldr	r1, [pc, #132]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800222e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002230:	4383      	bics	r3, r0
 8002232:	68e8      	ldr	r0, [r5, #12]
 8002234:	4303      	orrs	r3, r0
 8002236:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002238:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800223a:	0393      	lsls	r3, r2, #14
 800223c:	d517      	bpl.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002242:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002244:	438b      	bics	r3, r1
 8002246:	6929      	ldr	r1, [r5, #16]
 8002248:	430b      	orrs	r3, r1
 800224a:	6313      	str	r3, [r2, #48]	; 0x30
 800224c:	e00f      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	433b      	orrs	r3, r7
 8002252:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002254:	f7fe fc12 	bl	8000a7c <HAL_GetTick>
 8002258:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	6833      	ldr	r3, [r6, #0]
 800225c:	423b      	tst	r3, r7
 800225e:	d1c6      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe fc0c 	bl	8000a7c <HAL_GetTick>
 8002264:	9b01      	ldr	r3, [sp, #4]
 8002266:	1ac0      	subs	r0, r0, r3
 8002268:	2864      	cmp	r0, #100	; 0x64
 800226a:	d9f6      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
}
 800226e:	b005      	add	sp, #20
 8002270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002272:	6869      	ldr	r1, [r5, #4]
 8002274:	400a      	ands	r2, r1
 8002276:	4293      	cmp	r3, r2
 8002278:	d0bf      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800227a:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800227c:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800227e:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002280:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002282:	025b      	lsls	r3, r3, #9
 8002284:	4303      	orrs	r3, r0
 8002286:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002288:	6a23      	ldr	r3, [r4, #32]
 800228a:	480e      	ldr	r0, [pc, #56]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800228c:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800228e:	4003      	ands	r3, r0
 8002290:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002292:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002294:	07d3      	lsls	r3, r2, #31
 8002296:	d5b0      	bpl.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8002298:	f7fe fbf0 	bl	8000a7c <HAL_GetTick>
 800229c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	2202      	movs	r2, #2
 80022a0:	6a23      	ldr	r3, [r4, #32]
 80022a2:	4213      	tst	r3, r2
 80022a4:	d1a9      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fbe9 	bl	8000a7c <HAL_GetTick>
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80022ac:	1bc0      	subs	r0, r0, r7
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d9f5      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xea>
 80022b2:	e7db      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
 80022bc:	fffffcff 	.word	0xfffffcff
 80022c0:	efffffff 	.word	0xefffffff
 80022c4:	fffeffff 	.word	0xfffeffff
 80022c8:	00001388 	.word	0x00001388

080022cc <HAL_TIM_Base_MspInit>:
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ce:	2201      	movs	r2, #1
 80022d0:	6803      	ldr	r3, [r0, #0]
 80022d2:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80022d4:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d6:	4311      	orrs	r1, r2
 80022d8:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	4770      	bx	lr

080022e2 <HAL_TIM_OC_DelayElapsedCallback>:
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_IC_CaptureCallback>:
 80022e4:	4770      	bx	lr

080022e6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIM_TriggerCallback>:
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ea:	2202      	movs	r2, #2
 80022ec:	6803      	ldr	r3, [r0, #0]
{
 80022ee:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f0:	6919      	ldr	r1, [r3, #16]
{
 80022f2:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f4:	4211      	tst	r1, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	4211      	tst	r1, r2
 80022fc:	d00b      	beq.n	8002316 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022fe:	3a05      	subs	r2, #5
 8002300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002302:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002304:	3204      	adds	r2, #4
 8002306:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002308:	079b      	lsls	r3, r3, #30
 800230a:	d100      	bne.n	800230e <HAL_TIM_IRQHandler+0x24>
 800230c:	e079      	b.n	8002402 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800230e:	f7ff ffe9 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	2300      	movs	r3, #0
 8002314:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002316:	2204      	movs	r2, #4
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	4211      	tst	r1, r2
 800231e:	d010      	beq.n	8002342 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002320:	68d9      	ldr	r1, [r3, #12]
 8002322:	4211      	tst	r1, r2
 8002324:	d00d      	beq.n	8002342 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002326:	3a09      	subs	r2, #9
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232a:	3207      	adds	r2, #7
 800232c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002334:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002336:	421a      	tst	r2, r3
 8002338:	d069      	beq.n	800240e <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	f7ff ffd3 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	2300      	movs	r3, #0
 8002340:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002342:	2208      	movs	r2, #8
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	4211      	tst	r1, r2
 800234a:	d00e      	beq.n	800236a <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	4211      	tst	r1, r2
 8002350:	d00b      	beq.n	800236a <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002352:	3a11      	subs	r2, #17
 8002354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002356:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002358:	320d      	adds	r2, #13
 800235a:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800235c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800235e:	079b      	lsls	r3, r3, #30
 8002360:	d05b      	beq.n	800241a <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	f7ff ffbf 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	2300      	movs	r3, #0
 8002368:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800236a:	2210      	movs	r2, #16
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	6919      	ldr	r1, [r3, #16]
 8002370:	4211      	tst	r1, r2
 8002372:	d010      	beq.n	8002396 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002374:	68d9      	ldr	r1, [r3, #12]
 8002376:	4211      	tst	r1, r2
 8002378:	d00d      	beq.n	8002396 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800237a:	3a21      	subs	r2, #33	; 0x21
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800237e:	3219      	adds	r2, #25
 8002380:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	23c0      	movs	r3, #192	; 0xc0
 8002386:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002388:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800238a:	421a      	tst	r2, r3
 800238c:	d04b      	beq.n	8002426 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	f7ff ffa9 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	2300      	movs	r3, #0
 8002394:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002396:	2201      	movs	r2, #1
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	4211      	tst	r1, r2
 800239e:	d007      	beq.n	80023b0 <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	4211      	tst	r1, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023a6:	3a03      	subs	r2, #3
 80023a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023aa:	0020      	movs	r0, r4
 80023ac:	f7fe f9d6 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	4211      	tst	r1, r2
 80023b8:	d008      	beq.n	80023cc <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80023ba:	68d9      	ldr	r1, [r3, #12]
 80023bc:	4211      	tst	r1, r2
 80023be:	d005      	beq.n	80023cc <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c0:	3a02      	subs	r2, #2
 80023c2:	3aff      	subs	r2, #255	; 0xff
 80023c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023c6:	0020      	movs	r0, r4
 80023c8:	f000 f898 	bl	80024fc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	4211      	tst	r1, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80023d6:	68d9      	ldr	r1, [r3, #12]
 80023d8:	4211      	tst	r1, r2
 80023da:	d004      	beq.n	80023e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023dc:	3a81      	subs	r2, #129	; 0x81
 80023de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023e0:	0020      	movs	r0, r4
 80023e2:	f7ff ff81 	bl	80022e8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e6:	2220      	movs	r2, #32
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	6919      	ldr	r1, [r3, #16]
 80023ec:	4211      	tst	r1, r2
 80023ee:	d007      	beq.n	8002400 <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80023f0:	68d9      	ldr	r1, [r3, #12]
 80023f2:	4211      	tst	r1, r2
 80023f4:	d004      	beq.n	8002400 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f6:	3a41      	subs	r2, #65	; 0x41
 80023f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80023fa:	0020      	movs	r0, r4
 80023fc:	f000 f87d 	bl	80024fa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002400:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	f7ff ff6e 	bl	80022e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002406:	0020      	movs	r0, r4
 8002408:	f7ff ff6d 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
 800240c:	e781      	b.n	8002312 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	f7ff ff68 	bl	80022e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002412:	0020      	movs	r0, r4
 8002414:	f7ff ff67 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002418:	e791      	b.n	800233e <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	f7ff ff62 	bl	80022e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241e:	0020      	movs	r0, r4
 8002420:	f7ff ff61 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002424:	e79f      	b.n	8002366 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	f7ff ff5c 	bl	80022e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	0020      	movs	r0, r4
 800242c:	f7ff ff5b 	bl	80022e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002430:	e7af      	b.n	8002392 <HAL_TIM_IRQHandler+0xa8>
	...

08002434 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <TIM_Base_SetConfig+0x74>)
{
 8002436:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002438:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243a:	4290      	cmp	r0, r2
 800243c:	d002      	beq.n	8002444 <TIM_Base_SetConfig+0x10>
 800243e:	4c1b      	ldr	r4, [pc, #108]	; (80024ac <TIM_Base_SetConfig+0x78>)
 8002440:	42a0      	cmp	r0, r4
 8002442:	d108      	bne.n	8002456 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002444:	2470      	movs	r4, #112	; 0x70
 8002446:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002448:	684c      	ldr	r4, [r1, #4]
 800244a:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244c:	4290      	cmp	r0, r2
 800244e:	d00e      	beq.n	800246e <TIM_Base_SetConfig+0x3a>
 8002450:	4c16      	ldr	r4, [pc, #88]	; (80024ac <TIM_Base_SetConfig+0x78>)
 8002452:	42a0      	cmp	r0, r4
 8002454:	d00b      	beq.n	800246e <TIM_Base_SetConfig+0x3a>
 8002456:	4c16      	ldr	r4, [pc, #88]	; (80024b0 <TIM_Base_SetConfig+0x7c>)
 8002458:	42a0      	cmp	r0, r4
 800245a:	d008      	beq.n	800246e <TIM_Base_SetConfig+0x3a>
 800245c:	4c15      	ldr	r4, [pc, #84]	; (80024b4 <TIM_Base_SetConfig+0x80>)
 800245e:	42a0      	cmp	r0, r4
 8002460:	d005      	beq.n	800246e <TIM_Base_SetConfig+0x3a>
 8002462:	4c15      	ldr	r4, [pc, #84]	; (80024b8 <TIM_Base_SetConfig+0x84>)
 8002464:	42a0      	cmp	r0, r4
 8002466:	d002      	beq.n	800246e <TIM_Base_SetConfig+0x3a>
 8002468:	4c14      	ldr	r4, [pc, #80]	; (80024bc <TIM_Base_SetConfig+0x88>)
 800246a:	42a0      	cmp	r0, r4
 800246c:	d103      	bne.n	8002476 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246e:	4c14      	ldr	r4, [pc, #80]	; (80024c0 <TIM_Base_SetConfig+0x8c>)
 8002470:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002472:	68cc      	ldr	r4, [r1, #12]
 8002474:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002476:	2480      	movs	r4, #128	; 0x80
 8002478:	43a3      	bics	r3, r4
 800247a:	694c      	ldr	r4, [r1, #20]
 800247c:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 800247e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002480:	688b      	ldr	r3, [r1, #8]
 8002482:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002484:	680b      	ldr	r3, [r1, #0]
 8002486:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002488:	4290      	cmp	r0, r2
 800248a:	d008      	beq.n	800249e <TIM_Base_SetConfig+0x6a>
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <TIM_Base_SetConfig+0x80>)
 800248e:	4298      	cmp	r0, r3
 8002490:	d005      	beq.n	800249e <TIM_Base_SetConfig+0x6a>
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <TIM_Base_SetConfig+0x84>)
 8002494:	4298      	cmp	r0, r3
 8002496:	d002      	beq.n	800249e <TIM_Base_SetConfig+0x6a>
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <TIM_Base_SetConfig+0x88>)
 800249a:	4298      	cmp	r0, r3
 800249c:	d101      	bne.n	80024a2 <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800249e:	690b      	ldr	r3, [r1, #16]
 80024a0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80024a2:	2301      	movs	r3, #1
 80024a4:	6143      	str	r3, [r0, #20]
}
 80024a6:	bd10      	pop	{r4, pc}
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40002000 	.word	0x40002000
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800
 80024c0:	fffffcff 	.word	0xfffffcff

080024c4 <HAL_TIM_Base_Init>:
{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
  if(htim == NULL)
 80024ca:	2c00      	cmp	r4, #0
 80024cc:	d014      	beq.n	80024f8 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024ce:	0025      	movs	r5, r4
 80024d0:	353d      	adds	r5, #61	; 0x3d
 80024d2:	782b      	ldrb	r3, [r5, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80024da:	0022      	movs	r2, r4
 80024dc:	323c      	adds	r2, #60	; 0x3c
 80024de:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80024e0:	0020      	movs	r0, r4
 80024e2:	f7ff fef3 	bl	80022cc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80024e6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80024ea:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	1d21      	adds	r1, r4, #4
 80024ee:	f7ff ffa1 	bl	8002434 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80024f2:	2301      	movs	r3, #1
  return HAL_OK;
 80024f4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80024f6:	702b      	strb	r3, [r5, #0]
}
 80024f8:	bd70      	pop	{r4, r5, r6, pc}

080024fa <HAL_TIMEx_CommutationCallback>:
 80024fa:	4770      	bx	lr

080024fc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024fc:	4770      	bx	lr
	...

08002500 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	4906      	ldr	r1, [pc, #24]	; (800251c <UART_EndRxTransfer+0x1c>)
 8002504:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002506:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	3123      	adds	r1, #35	; 0x23
 8002510:	31ff      	adds	r1, #255	; 0xff
 8002512:	438a      	bics	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002516:	2320      	movs	r3, #32
 8002518:	7003      	strb	r3, [r0, #0]
}
 800251a:	4770      	bx	lr
 800251c:	fffffedf 	.word	0xfffffedf

08002520 <HAL_UART_TxCpltCallback>:
 8002520:	4770      	bx	lr

08002522 <HAL_UART_ErrorCallback>:
 8002522:	4770      	bx	lr

08002524 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002524:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	0002      	movs	r2, r0
{
 800252a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800252c:	325a      	adds	r2, #90	; 0x5a
 800252e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002530:	3a08      	subs	r2, #8
 8002532:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8002534:	f7ff fff5 	bl	8002522 <HAL_UART_ErrorCallback>
}
 8002538:	bd10      	pop	{r4, pc}
	...

0800253c <UART_SetConfig>:
{
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002540:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002542:	69c2      	ldr	r2, [r0, #28]
 8002544:	6883      	ldr	r3, [r0, #8]
 8002546:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002548:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800254a:	4303      	orrs	r3, r0
 800254c:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800254e:	4e42      	ldr	r6, [pc, #264]	; (8002658 <UART_SetConfig+0x11c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002550:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002552:	4842      	ldr	r0, [pc, #264]	; (800265c <UART_SetConfig+0x120>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002554:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002556:	4001      	ands	r1, r0
 8002558:	430b      	orrs	r3, r1
 800255a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	686b      	ldr	r3, [r5, #4]
 800255e:	4940      	ldr	r1, [pc, #256]	; (8002660 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002560:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002562:	400b      	ands	r3, r1
 8002564:	68e1      	ldr	r1, [r4, #12]
 8002566:	430b      	orrs	r3, r1
 8002568:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800256a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800256c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800256e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002570:	483c      	ldr	r0, [pc, #240]	; (8002664 <UART_SetConfig+0x128>)
 8002572:	4001      	ands	r1, r0
 8002574:	430b      	orrs	r3, r1
 8002576:	60ab      	str	r3, [r5, #8]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 800257c:	42b5      	cmp	r5, r6
 800257e:	d110      	bne.n	80025a2 <UART_SetConfig+0x66>
 8002580:	2003      	movs	r0, #3
 8002582:	4939      	ldr	r1, [pc, #228]	; (8002668 <UART_SetConfig+0x12c>)
 8002584:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002586:	4001      	ands	r1, r0
 8002588:	4838      	ldr	r0, [pc, #224]	; (800266c <UART_SetConfig+0x130>)
 800258a:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258c:	429a      	cmp	r2, r3
 800258e:	d137      	bne.n	8002600 <UART_SetConfig+0xc4>
    switch (clocksource)
 8002590:	2808      	cmp	r0, #8
 8002592:	d832      	bhi.n	80025fa <UART_SetConfig+0xbe>
 8002594:	f7fd fdb8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002598:	31163110 	.word	0x31163110
 800259c:	31313129 	.word	0x31313129
 80025a0:	2c          	.byte	0x2c
 80025a1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a2:	4933      	ldr	r1, [pc, #204]	; (8002670 <UART_SetConfig+0x134>)
 80025a4:	428d      	cmp	r5, r1
 80025a6:	d005      	beq.n	80025b4 <UART_SetConfig+0x78>
 80025a8:	4932      	ldr	r1, [pc, #200]	; (8002674 <UART_SetConfig+0x138>)
 80025aa:	428d      	cmp	r5, r1
 80025ac:	d002      	beq.n	80025b4 <UART_SetConfig+0x78>
 80025ae:	4932      	ldr	r1, [pc, #200]	; (8002678 <UART_SetConfig+0x13c>)
 80025b0:	428d      	cmp	r5, r1
 80025b2:	d14c      	bne.n	800264e <UART_SetConfig+0x112>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d12c      	bne.n	8002612 <UART_SetConfig+0xd6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025b8:	f7ff fdd0 	bl	800215c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025bc:	6863      	ldr	r3, [r4, #4]
 80025be:	0040      	lsls	r0, r0, #1
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	e002      	b.n	80025ca <UART_SetConfig+0x8e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	0858      	lsrs	r0, r3, #1
 80025c8:	4b2c      	ldr	r3, [pc, #176]	; (800267c <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025ca:	18c0      	adds	r0, r0, r3
 80025cc:	6861      	ldr	r1, [r4, #4]
 80025ce:	f7fd fdaf 	bl	8000130 <__udivsi3>
 80025d2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80025d6:	220f      	movs	r2, #15
 80025d8:	0019      	movs	r1, r3
 80025da:	4391      	bics	r1, r2
 80025dc:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025de:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80025e0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025e2:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60cb      	str	r3, [r1, #12]
}
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025ea:	f7ff fcf5 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80025ee:	e7e5      	b.n	80025bc <UART_SetConfig+0x80>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025f0:	6863      	ldr	r3, [r4, #4]
 80025f2:	0858      	lsrs	r0, r3, #1
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	025b      	lsls	r3, r3, #9
 80025f8:	e7e7      	b.n	80025ca <UART_SetConfig+0x8e>
        ret = HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e7ea      	b.n	80025d6 <UART_SetConfig+0x9a>
    switch (clocksource)
 8002600:	2808      	cmp	r0, #8
 8002602:	d826      	bhi.n	8002652 <UART_SetConfig+0x116>
 8002604:	f7fd fd80 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002608:	25102505 	.word	0x25102505
 800260c:	25252519 	.word	0x25252519
 8002610:	1e          	.byte	0x1e
 8002611:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002612:	f7ff fda3 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002616:	6861      	ldr	r1, [r4, #4]
 8002618:	084b      	lsrs	r3, r1, #1
 800261a:	1818      	adds	r0, r3, r0
 800261c:	f7fd fd88 	bl	8000130 <__udivsi3>
 8002620:	b280      	uxth	r0, r0
 8002622:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002624:	2000      	movs	r0, #0
        break;
 8002626:	e7df      	b.n	80025e8 <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002628:	6861      	ldr	r1, [r4, #4]
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <UART_SetConfig+0x144>)
 800262c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800262e:	18c0      	adds	r0, r0, r3
 8002630:	f7fd fd7e 	bl	8000130 <__udivsi3>
 8002634:	b280      	uxth	r0, r0
 8002636:	60f0      	str	r0, [r6, #12]
 8002638:	e7f4      	b.n	8002624 <UART_SetConfig+0xe8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800263a:	f7ff fccd 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 800263e:	6861      	ldr	r1, [r4, #4]
 8002640:	084b      	lsrs	r3, r1, #1
 8002642:	e7f4      	b.n	800262e <UART_SetConfig+0xf2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	6861      	ldr	r1, [r4, #4]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	0848      	lsrs	r0, r1, #1
 800264c:	e7ef      	b.n	800262e <UART_SetConfig+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264e:	429a      	cmp	r2, r3
 8002650:	d0d3      	beq.n	80025fa <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8002652:	2001      	movs	r0, #1
  return ret;
 8002654:	e7c8      	b.n	80025e8 <UART_SetConfig+0xac>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40013800 	.word	0x40013800
 800265c:	efff69f3 	.word	0xefff69f3
 8002660:	ffffcfff 	.word	0xffffcfff
 8002664:	fffff4ff 	.word	0xfffff4ff
 8002668:	40021000 	.word	0x40021000
 800266c:	08004dfb 	.word	0x08004dfb
 8002670:	40004400 	.word	0x40004400
 8002674:	40004800 	.word	0x40004800
 8002678:	40004c00 	.word	0x40004c00
 800267c:	00f42400 	.word	0x00f42400
 8002680:	007a1200 	.word	0x007a1200

08002684 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002684:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002686:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002688:	07da      	lsls	r2, r3, #31
 800268a:	d506      	bpl.n	800269a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800268c:	6801      	ldr	r1, [r0, #0]
 800268e:	4c28      	ldr	r4, [pc, #160]	; (8002730 <UART_AdvFeatureConfig+0xac>)
 8002690:	684a      	ldr	r2, [r1, #4]
 8002692:	4022      	ands	r2, r4
 8002694:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002696:	4322      	orrs	r2, r4
 8002698:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800269a:	079a      	lsls	r2, r3, #30
 800269c:	d506      	bpl.n	80026ac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800269e:	6801      	ldr	r1, [r0, #0]
 80026a0:	4c24      	ldr	r4, [pc, #144]	; (8002734 <UART_AdvFeatureConfig+0xb0>)
 80026a2:	684a      	ldr	r2, [r1, #4]
 80026a4:	4022      	ands	r2, r4
 80026a6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80026a8:	4322      	orrs	r2, r4
 80026aa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026ac:	075a      	lsls	r2, r3, #29
 80026ae:	d506      	bpl.n	80026be <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026b0:	6801      	ldr	r1, [r0, #0]
 80026b2:	4c21      	ldr	r4, [pc, #132]	; (8002738 <UART_AdvFeatureConfig+0xb4>)
 80026b4:	684a      	ldr	r2, [r1, #4]
 80026b6:	4022      	ands	r2, r4
 80026b8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80026ba:	4322      	orrs	r2, r4
 80026bc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026be:	071a      	lsls	r2, r3, #28
 80026c0:	d506      	bpl.n	80026d0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026c2:	6801      	ldr	r1, [r0, #0]
 80026c4:	4c1d      	ldr	r4, [pc, #116]	; (800273c <UART_AdvFeatureConfig+0xb8>)
 80026c6:	684a      	ldr	r2, [r1, #4]
 80026c8:	4022      	ands	r2, r4
 80026ca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80026cc:	4322      	orrs	r2, r4
 80026ce:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026d0:	06da      	lsls	r2, r3, #27
 80026d2:	d506      	bpl.n	80026e2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026d4:	6801      	ldr	r1, [r0, #0]
 80026d6:	4c1a      	ldr	r4, [pc, #104]	; (8002740 <UART_AdvFeatureConfig+0xbc>)
 80026d8:	688a      	ldr	r2, [r1, #8]
 80026da:	4022      	ands	r2, r4
 80026dc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80026de:	4322      	orrs	r2, r4
 80026e0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026e2:	069a      	lsls	r2, r3, #26
 80026e4:	d506      	bpl.n	80026f4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026e6:	6801      	ldr	r1, [r0, #0]
 80026e8:	4c16      	ldr	r4, [pc, #88]	; (8002744 <UART_AdvFeatureConfig+0xc0>)
 80026ea:	688a      	ldr	r2, [r1, #8]
 80026ec:	4022      	ands	r2, r4
 80026ee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80026f0:	4322      	orrs	r2, r4
 80026f2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026f4:	065a      	lsls	r2, r3, #25
 80026f6:	d510      	bpl.n	800271a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026f8:	6801      	ldr	r1, [r0, #0]
 80026fa:	4d13      	ldr	r5, [pc, #76]	; (8002748 <UART_AdvFeatureConfig+0xc4>)
 80026fc:	684a      	ldr	r2, [r1, #4]
 80026fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002700:	402a      	ands	r2, r5
 8002702:	4322      	orrs	r2, r4
 8002704:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	0352      	lsls	r2, r2, #13
 800270a:	4294      	cmp	r4, r2
 800270c:	d105      	bne.n	800271a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800270e:	684a      	ldr	r2, [r1, #4]
 8002710:	4c0e      	ldr	r4, [pc, #56]	; (800274c <UART_AdvFeatureConfig+0xc8>)
 8002712:	4022      	ands	r2, r4
 8002714:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002716:	4322      	orrs	r2, r4
 8002718:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	d506      	bpl.n	800272c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800271e:	6802      	ldr	r2, [r0, #0]
 8002720:	490b      	ldr	r1, [pc, #44]	; (8002750 <UART_AdvFeatureConfig+0xcc>)
 8002722:	6853      	ldr	r3, [r2, #4]
 8002724:	400b      	ands	r3, r1
 8002726:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002728:	430b      	orrs	r3, r1
 800272a:	6053      	str	r3, [r2, #4]
}
 800272c:	bd30      	pop	{r4, r5, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	fffdffff 	.word	0xfffdffff
 8002734:	fffeffff 	.word	0xfffeffff
 8002738:	fffbffff 	.word	0xfffbffff
 800273c:	ffff7fff 	.word	0xffff7fff
 8002740:	ffffefff 	.word	0xffffefff
 8002744:	ffffdfff 	.word	0xffffdfff
 8002748:	ffefffff 	.word	0xffefffff
 800274c:	ff9fffff 	.word	0xff9fffff
 8002750:	fff7ffff 	.word	0xfff7ffff

08002754 <HAL_UART_Init>:
{
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800275a:	2001      	movs	r0, #1
}
 800275c:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800275e:	0005      	movs	r5, r0
 8002760:	3569      	adds	r5, #105	; 0x69
 8002762:	782b      	ldrb	r3, [r5, #0]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800276a:	0002      	movs	r2, r0
 800276c:	3268      	adds	r2, #104	; 0x68
 800276e:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002770:	f7fe f908 	bl	8000984 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002776:	2101      	movs	r1, #1
 8002778:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800277a:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800277c:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002780:	438b      	bics	r3, r1
 8002782:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002784:	f7ff feda 	bl	800253c <UART_SetConfig>
 8002788:	2801      	cmp	r0, #1
 800278a:	d0e6      	beq.n	800275a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800278c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8002792:	0020      	movs	r0, r4
 8002794:	f7ff ff76 	bl	8002684 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	490b      	ldr	r1, [pc, #44]	; (80027c8 <HAL_UART_Init+0x74>)
 800279c:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80027a0:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80027a2:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80027a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	438a      	bics	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027ac:	2201      	movs	r2, #1
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80027b4:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 80027b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 80027bc:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80027be:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80027c2:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80027c4:	e7ca      	b.n	800275c <HAL_UART_Init+0x8>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	fffff7ff 	.word	0xfffff7ff

080027cc <UART_WaitOnFlagUntilTimeout>:
{
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	0004      	movs	r4, r0
 80027d0:	000e      	movs	r6, r1
 80027d2:	0015      	movs	r5, r2
 80027d4:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d6:	6822      	ldr	r2, [r4, #0]
 80027d8:	69d3      	ldr	r3, [r2, #28]
 80027da:	4033      	ands	r3, r6
 80027dc:	1b9b      	subs	r3, r3, r6
 80027de:	4259      	negs	r1, r3
 80027e0:	414b      	adcs	r3, r1
 80027e2:	42ab      	cmp	r3, r5
 80027e4:	d001      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80027e6:	2000      	movs	r0, #0
 80027e8:	e018      	b.n	800281c <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80027ea:	9b06      	ldr	r3, [sp, #24]
 80027ec:	3301      	adds	r3, #1
 80027ee:	d0f3      	beq.n	80027d8 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027f0:	9b06      	ldr	r3, [sp, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d113      	bne.n	800281e <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	490c      	ldr	r1, [pc, #48]	; (800282c <UART_WaitOnFlagUntilTimeout+0x60>)
 80027fa:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80027fc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027fe:	400a      	ands	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	31a3      	adds	r1, #163	; 0xa3
 8002806:	31ff      	adds	r1, #255	; 0xff
 8002808:	438a      	bics	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800280c:	0022      	movs	r2, r4
 800280e:	2320      	movs	r3, #32
 8002810:	3269      	adds	r2, #105	; 0x69
 8002812:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002814:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8002816:	2300      	movs	r3, #0
 8002818:	3468      	adds	r4, #104	; 0x68
 800281a:	7023      	strb	r3, [r4, #0]
}
 800281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800281e:	f7fe f92d 	bl	8000a7c <HAL_GetTick>
 8002822:	9b06      	ldr	r3, [sp, #24]
 8002824:	1bc0      	subs	r0, r0, r7
 8002826:	4283      	cmp	r3, r0
 8002828:	d2d5      	bcs.n	80027d6 <UART_WaitOnFlagUntilTimeout+0xa>
 800282a:	e7e4      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800282c:	fffffe5f 	.word	0xfffffe5f

08002830 <HAL_UART_Transmit>:
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002832:	0007      	movs	r7, r0
{
 8002834:	b085      	sub	sp, #20
 8002836:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8002838:	3769      	adds	r7, #105	; 0x69
 800283a:	783b      	ldrb	r3, [r7, #0]
{
 800283c:	0004      	movs	r4, r0
 800283e:	000d      	movs	r5, r1
 8002840:	0016      	movs	r6, r2
    return HAL_BUSY;
 8002842:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8002844:	2b20      	cmp	r3, #32
 8002846:	d146      	bne.n	80028d6 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8002848:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800284a:	2900      	cmp	r1, #0
 800284c:	d043      	beq.n	80028d6 <HAL_UART_Transmit+0xa6>
 800284e:	2a00      	cmp	r2, #0
 8002850:	d041      	beq.n	80028d6 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	68a2      	ldr	r2, [r4, #8]
 8002856:	015b      	lsls	r3, r3, #5
 8002858:	429a      	cmp	r2, r3
 800285a:	d104      	bne.n	8002866 <HAL_UART_Transmit+0x36>
 800285c:	6923      	ldr	r3, [r4, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8002862:	4201      	tst	r1, r0
 8002864:	d137      	bne.n	80028d6 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002866:	0023      	movs	r3, r4
 8002868:	3368      	adds	r3, #104	; 0x68
 800286a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800286c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800286e:	2a01      	cmp	r2, #1
 8002870:	d031      	beq.n	80028d6 <HAL_UART_Transmit+0xa6>
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287a:	3321      	adds	r3, #33	; 0x21
 800287c:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800287e:	f7fe f8fd 	bl	8000a7c <HAL_GetTick>
    huart->TxXferSize = Size;
 8002882:	0023      	movs	r3, r4
 8002884:	3350      	adds	r3, #80	; 0x50
 8002886:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002888:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288a:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 800288c:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288e:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8002890:	0021      	movs	r1, r4
 8002892:	3152      	adds	r1, #82	; 0x52
 8002894:	880a      	ldrh	r2, [r1, #0]
 8002896:	b292      	uxth	r2, r2
 8002898:	2a00      	cmp	r2, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289c:	9b03      	ldr	r3, [sp, #12]
 800289e:	2140      	movs	r1, #64	; 0x40
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	0020      	movs	r0, r4
 80028a4:	9b02      	ldr	r3, [sp, #8]
 80028a6:	f7ff ff91 	bl	80027cc <UART_WaitOnFlagUntilTimeout>
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d112      	bne.n	80028d4 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80028ae:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80028b0:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80028b2:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 80028b4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80028b6:	e00e      	b.n	80028d6 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80028b8:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	2200      	movs	r2, #0
      huart->TxXferCount--;
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	0020      	movs	r0, r4
 80028ca:	9b02      	ldr	r3, [sp, #8]
 80028cc:	f7ff ff7e 	bl	80027cc <UART_WaitOnFlagUntilTimeout>
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d002      	beq.n	80028da <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80028d4:	2003      	movs	r0, #3
}
 80028d6:	b005      	add	sp, #20
 80028d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028da:	68a3      	ldr	r3, [r4, #8]
 80028dc:	6822      	ldr	r2, [r4, #0]
 80028de:	42b3      	cmp	r3, r6
 80028e0:	d108      	bne.n	80028f4 <HAL_UART_Transmit+0xc4>
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028e8:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80028ea:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028ec:	05db      	lsls	r3, r3, #23
 80028ee:	0ddb      	lsrs	r3, r3, #23
 80028f0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80028f2:	e7cd      	b.n	8002890 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80028f4:	782b      	ldrb	r3, [r5, #0]
 80028f6:	3501      	adds	r5, #1
 80028f8:	8513      	strh	r3, [r2, #40]	; 0x28
 80028fa:	e7c9      	b.n	8002890 <HAL_UART_Transmit+0x60>

080028fc <HAL_UART_Receive>:
{
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	001f      	movs	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002900:	0003      	movs	r3, r0
 8002902:	336a      	adds	r3, #106	; 0x6a
{
 8002904:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002906:	781a      	ldrb	r2, [r3, #0]
{
 8002908:	0004      	movs	r4, r0
 800290a:	b085      	sub	sp, #20
 800290c:	000d      	movs	r5, r1
    return HAL_BUSY;
 800290e:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002910:	2a20      	cmp	r2, #32
 8002912:	d139      	bne.n	8002988 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8002914:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002916:	2900      	cmp	r1, #0
 8002918:	d036      	beq.n	8002988 <HAL_UART_Receive+0x8c>
 800291a:	2e00      	cmp	r6, #0
 800291c:	d034      	beq.n	8002988 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	68a1      	ldr	r1, [r4, #8]
 8002922:	0152      	lsls	r2, r2, #5
 8002924:	4291      	cmp	r1, r2
 8002926:	d104      	bne.n	8002932 <HAL_UART_Receive+0x36>
 8002928:	6922      	ldr	r2, [r4, #16]
 800292a:	2a00      	cmp	r2, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 800292e:	4205      	tst	r5, r0
 8002930:	d12a      	bne.n	8002988 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8002932:	0022      	movs	r2, r4
 8002934:	3268      	adds	r2, #104	; 0x68
 8002936:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8002938:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800293a:	2901      	cmp	r1, #1
 800293c:	d024      	beq.n	8002988 <HAL_UART_Receive+0x8c>
 800293e:	2101      	movs	r1, #1
 8002940:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	2200      	movs	r2, #0
 8002944:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002946:	3222      	adds	r2, #34	; 0x22
 8002948:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800294a:	f7fe f897 	bl	8000a7c <HAL_GetTick>
    huart->RxXferSize = Size;
 800294e:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8002954:	3358      	adds	r3, #88	; 0x58
 8002956:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8002958:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 800295a:	9003      	str	r0, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 800295c:	0149      	lsls	r1, r1, #5
 800295e:	3304      	adds	r3, #4
 8002960:	428a      	cmp	r2, r1
 8002962:	d115      	bne.n	8002990 <HAL_UART_Receive+0x94>
 8002964:	6922      	ldr	r2, [r4, #16]
 8002966:	2a00      	cmp	r2, #0
 8002968:	d110      	bne.n	800298c <HAL_UART_Receive+0x90>
 800296a:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <HAL_UART_Receive+0xfc>)
 800296c:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 800296e:	881e      	ldrh	r6, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002970:	0022      	movs	r2, r4
 8002972:	325a      	adds	r2, #90	; 0x5a
 8002974:	8810      	ldrh	r0, [r2, #0]
 8002976:	b280      	uxth	r0, r0
 8002978:	2800      	cmp	r0, #0
 800297a:	d119      	bne.n	80029b0 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 800297c:	0023      	movs	r3, r4
 800297e:	2220      	movs	r2, #32
 8002980:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8002982:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002984:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002986:	7020      	strb	r0, [r4, #0]
}
 8002988:	b005      	add	sp, #20
 800298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	e7ed      	b.n	800296c <HAL_UART_Receive+0x70>
 8002990:	2a00      	cmp	r2, #0
 8002992:	d104      	bne.n	800299e <HAL_UART_Receive+0xa2>
 8002994:	6922      	ldr	r2, [r4, #16]
 8002996:	2a00      	cmp	r2, #0
 8002998:	d0f8      	beq.n	800298c <HAL_UART_Receive+0x90>
 800299a:	227f      	movs	r2, #127	; 0x7f
 800299c:	e7e6      	b.n	800296c <HAL_UART_Receive+0x70>
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	0549      	lsls	r1, r1, #21
 80029a2:	428a      	cmp	r2, r1
 80029a4:	d1e3      	bne.n	800296e <HAL_UART_Receive+0x72>
 80029a6:	6922      	ldr	r2, [r4, #16]
 80029a8:	2a00      	cmp	r2, #0
 80029aa:	d0f6      	beq.n	800299a <HAL_UART_Receive+0x9e>
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	e7dd      	b.n	800296c <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 80029b0:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029ba:	0020      	movs	r0, r4
 80029bc:	9700      	str	r7, [sp, #0]
 80029be:	9b03      	ldr	r3, [sp, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f7ff ff03 	bl	80027cc <UART_WaitOnFlagUntilTimeout>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d113      	bne.n	80029f2 <HAL_UART_Receive+0xf6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ca:	68a2      	ldr	r2, [r4, #8]
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	0011      	movs	r1, r2
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0152      	lsls	r2, r2, #5
 80029d4:	4291      	cmp	r1, r2
 80029d6:	d107      	bne.n	80029e8 <HAL_UART_Receive+0xec>
 80029d8:	6922      	ldr	r2, [r4, #16]
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Receive+0xec>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80029de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029e0:	4033      	ands	r3, r6
 80029e2:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80029e4:	3502      	adds	r5, #2
 80029e6:	e7c3      	b.n	8002970 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029ea:	4033      	ands	r3, r6
 80029ec:	702b      	strb	r3, [r5, #0]
 80029ee:	3501      	adds	r5, #1
 80029f0:	e7be      	b.n	8002970 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80029f2:	2003      	movs	r0, #3
 80029f4:	e7c8      	b.n	8002988 <HAL_UART_Receive+0x8c>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	000001ff 	.word	0x000001ff

080029fc <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029fc:	0003      	movs	r3, r0
{
 80029fe:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a00:	3369      	adds	r3, #105	; 0x69
 8002a02:	781b      	ldrb	r3, [r3, #0]
{
 8002a04:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a08:	2b21      	cmp	r3, #33	; 0x21
 8002a0a:	d10f      	bne.n	8002a2c <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8002a0c:	0014      	movs	r4, r2
 8002a0e:	3452      	adds	r4, #82	; 0x52
 8002a10:	8823      	ldrh	r3, [r4, #0]
 8002a12:	6811      	ldr	r1, [r2, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a1a:	680a      	ldr	r2, [r1, #0]
 8002a1c:	307e      	adds	r0, #126	; 0x7e
 8002a1e:	4382      	bics	r2, r0
 8002a20:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	6808      	ldr	r0, [r1, #0]
 8002a26:	4302      	orrs	r2, r0
 8002a28:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8002a2a:	2000      	movs	r0, #0
  }
}
 8002a2c:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2e:	2080      	movs	r0, #128	; 0x80
 8002a30:	6895      	ldr	r5, [r2, #8]
 8002a32:	0140      	lsls	r0, r0, #5
 8002a34:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a36:	4285      	cmp	r5, r0
 8002a38:	d10d      	bne.n	8002a56 <UART_Transmit_IT+0x5a>
 8002a3a:	6910      	ldr	r0, [r2, #16]
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d10a      	bne.n	8002a56 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a40:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8002a42:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a44:	05c0      	lsls	r0, r0, #23
 8002a46:	0dc0      	lsrs	r0, r0, #23
 8002a48:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8002a4c:	8823      	ldrh	r3, [r4, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	8023      	strh	r3, [r4, #0]
 8002a54:	e7e9      	b.n	8002a2a <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002a56:	1c58      	adds	r0, r3, #1
 8002a58:	64d0      	str	r0, [r2, #76]	; 0x4c
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	850b      	strh	r3, [r1, #40]	; 0x28
 8002a5e:	e7f5      	b.n	8002a4c <UART_Transmit_IT+0x50>

08002a60 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a60:	2140      	movs	r1, #64	; 0x40
 8002a62:	6802      	ldr	r2, [r0, #0]
{
 8002a64:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	438b      	bics	r3, r1
 8002a6a:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	2220      	movs	r2, #32
 8002a70:	3369      	adds	r3, #105	; 0x69
 8002a72:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8002a74:	f7ff fd54 	bl	8002520 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002a78:	2000      	movs	r0, #0
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a7c:	0002      	movs	r2, r0
{
 8002a7e:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a80:	326a      	adds	r2, #106	; 0x6a
 8002a82:	7811      	ldrb	r1, [r2, #0]
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	2922      	cmp	r1, #34	; 0x22
 8002a88:	d12d      	bne.n	8002ae6 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8002a8a:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8002a8e:	315c      	adds	r1, #92	; 0x5c
 8002a90:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a92:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	0164      	lsls	r4, r4, #5
 8002a96:	4029      	ands	r1, r5
 8002a98:	6885      	ldr	r5, [r0, #8]
 8002a9a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a9c:	42a5      	cmp	r5, r4
 8002a9e:	d11e      	bne.n	8002ade <UART_Receive_IT+0x62>
 8002aa0:	6904      	ldr	r4, [r0, #16]
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d11b      	bne.n	8002ade <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8002aa6:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002aac:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8002aae:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8002ab0:	315a      	adds	r1, #90	; 0x5a
 8002ab2:	880b      	ldrh	r3, [r1, #0]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	800b      	strh	r3, [r1, #0]
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	d10d      	bne.n	8002ada <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	4d0c      	ldr	r5, [pc, #48]	; (8002af4 <UART_Receive_IT+0x78>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	4029      	ands	r1, r5
 8002ac6:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	3523      	adds	r5, #35	; 0x23
 8002acc:	35ff      	adds	r5, #255	; 0xff
 8002ace:	43a9      	bics	r1, r5
 8002ad0:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8002ad6:	f7fd fe4b 	bl	8000770 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002ada:	0020      	movs	r0, r4
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ade:	1c5c      	adds	r4, r3, #1
 8002ae0:	6544      	str	r4, [r0, #84]	; 0x54
 8002ae2:	7019      	strb	r1, [r3, #0]
 8002ae4:	e7e2      	b.n	8002aac <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8002aea:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002aec:	430a      	orrs	r2, r1
 8002aee:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002af0:	e7f3      	b.n	8002ada <UART_Receive_IT+0x5e>
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	fffffedf 	.word	0xfffffedf

08002af8 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002af8:	220f      	movs	r2, #15
{
 8002afa:	b570      	push	{r4, r5, r6, lr}
 8002afc:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002b04:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8002b06:	d108      	bne.n	8002b1a <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b08:	2520      	movs	r5, #32
 8002b0a:	422b      	tst	r3, r5
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0x22>
 8002b0e:	4229      	tst	r1, r5
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8002b12:	0020      	movs	r0, r4
 8002b14:	f7ff ffb2 	bl	8002a7c <UART_Receive_IT>
}
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8002b1a:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8002b1c:	2a00      	cmp	r2, #0
 8002b1e:	d060      	beq.n	8002be2 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002b20:	2201      	movs	r2, #1
 8002b22:	4015      	ands	r5, r2
 8002b24:	d103      	bne.n	8002b2e <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002b26:	2690      	movs	r6, #144	; 0x90
 8002b28:	0076      	lsls	r6, r6, #1
 8002b2a:	4231      	tst	r1, r6
 8002b2c:	d059      	beq.n	8002be2 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b2e:	4213      	tst	r3, r2
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0x46>
 8002b32:	05ce      	lsls	r6, r1, #23
 8002b34:	d503      	bpl.n	8002b3e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002b36:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b38:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002b3a:	4332      	orrs	r2, r6
 8002b3c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4213      	tst	r3, r2
 8002b42:	d006      	beq.n	8002b52 <HAL_UART_IRQHandler+0x5a>
 8002b44:	2d00      	cmp	r5, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002b48:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b4a:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002b4c:	1892      	adds	r2, r2, r2
 8002b4e:	4332      	orrs	r2, r6
 8002b50:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b52:	2204      	movs	r2, #4
 8002b54:	4213      	tst	r3, r2
 8002b56:	d006      	beq.n	8002b66 <HAL_UART_IRQHandler+0x6e>
 8002b58:	2d00      	cmp	r5, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002b5c:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b5e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8002b60:	3a02      	subs	r2, #2
 8002b62:	4332      	orrs	r2, r6
 8002b64:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002b66:	071a      	lsls	r2, r3, #28
 8002b68:	d508      	bpl.n	8002b7c <HAL_UART_IRQHandler+0x84>
 8002b6a:	068a      	lsls	r2, r1, #26
 8002b6c:	d401      	bmi.n	8002b72 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002b72:	2208      	movs	r2, #8
 8002b74:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b76:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b78:	4302      	orrs	r2, r0
 8002b7a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d0ca      	beq.n	8002b18 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b82:	2220      	movs	r2, #32
 8002b84:	4213      	tst	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_UART_IRQHandler+0x9a>
 8002b88:	4211      	tst	r1, r2
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8002b8c:	0020      	movs	r0, r4
 8002b8e:	f7ff ff75 	bl	8002a7c <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8002b94:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b96:	071b      	lsls	r3, r3, #28
 8002b98:	d404      	bmi.n	8002ba4 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	689d      	ldr	r5, [r3, #8]
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ba2:	d01a      	beq.n	8002bda <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8002ba4:	f7ff fcac 	bl	8002500 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	420a      	tst	r2, r1
 8002bb0:	d00f      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002bb4:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_UART_IRQHandler+0x114>)
 8002bc0:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bc2:	f7fd ff9b 	bl	8000afc <HAL_DMA_Abort_IT>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d0a6      	beq.n	8002b18 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002bcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bce:	4798      	blx	r3
 8002bd0:	e7a2      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	f7ff fca5 	bl	8002522 <HAL_UART_ErrorCallback>
 8002bd8:	e79e      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8002bda:	f7ff fca2 	bl	8002522 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002be0:	e79a      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	4213      	tst	r3, r2
 8002be6:	d005      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xfc>
 8002be8:	4211      	tst	r1, r2
 8002bea:	d003      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8002bec:	0020      	movs	r0, r4
 8002bee:	f7ff ff05 	bl	80029fc <UART_Transmit_IT>
    return;
 8002bf2:	e791      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	4213      	tst	r3, r2
 8002bf8:	d100      	bne.n	8002bfc <HAL_UART_IRQHandler+0x104>
 8002bfa:	e78d      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
 8002bfc:	4211      	tst	r1, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_UART_IRQHandler+0x10a>
 8002c00:	e78a      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8002c02:	0020      	movs	r0, r4
 8002c04:	f7ff ff2c 	bl	8002a60 <UART_EndTransmit_IT>
    return;
 8002c08:	e786      	b.n	8002b18 <HAL_UART_IRQHandler+0x20>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	08002525 	.word	0x08002525

08002c10 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c10:	2386      	movs	r3, #134	; 0x86
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	58c3      	ldr	r3, [r0, r3]

    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8002c16:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <USBD_CDC_DataIn+0x14>
    hcdc->TxState = 0;
 8002c1c:	2285      	movs	r2, #133	; 0x85
 8002c1e:	2000      	movs	r0, #0
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	5098      	str	r0, [r3, r2]
  }
}
 8002c24:	4770      	bx	lr
	...

08002c28 <USBD_CDC_EP0_RxReady>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c28:	2386      	movs	r3, #134	; 0x86
 8002c2a:	009b      	lsls	r3, r3, #2
{ 
 8002c2c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c2e:	58c4      	ldr	r4, [r0, r3]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002c30:	3304      	adds	r3, #4
 8002c32:	58c3      	ldr	r3, [r0, r3]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <USBD_CDC_EP0_RxReady+0x28>
 8002c38:	2580      	movs	r5, #128	; 0x80
 8002c3a:	00ad      	lsls	r5, r5, #2
 8002c3c:	5d60      	ldrb	r0, [r4, r5]
 8002c3e:	28ff      	cmp	r0, #255	; 0xff
 8002c40:	d006      	beq.n	8002c50 <USBD_CDC_EP0_RxReady+0x28>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <USBD_CDC_EP0_RxReady+0x2c>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	5ca2      	ldrb	r2, [r4, r2]
 8002c48:	0021      	movs	r1, r4
 8002c4a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002c4c:	23ff      	movs	r3, #255	; 0xff
 8002c4e:	5563      	strb	r3, [r4, r5]
      
  }
  return USBD_OK;
}
 8002c50:	2000      	movs	r0, #0
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	00000201 	.word	0x00000201

08002c58 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002c58:	2343      	movs	r3, #67	; 0x43
 8002c5a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002c5c:	4800      	ldr	r0, [pc, #0]	; (8002c60 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002c5e:	4770      	bx	lr
 8002c60:	20000048 	.word	0x20000048

08002c64 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002c64:	2343      	movs	r3, #67	; 0x43
 8002c66:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002c68:	4800      	ldr	r0, [pc, #0]	; (8002c6c <USBD_CDC_GetHSCfgDesc+0x8>)
 8002c6a:	4770      	bx	lr
 8002c6c:	2000008c 	.word	0x2000008c

08002c70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002c70:	2343      	movs	r3, #67	; 0x43
 8002c72:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002c74:	4800      	ldr	r0, [pc, #0]	; (8002c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002c76:	4770      	bx	lr
 8002c78:	200000dc 	.word	0x200000dc

08002c7c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002c7c:	230a      	movs	r3, #10
 8002c7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002c80:	4800      	ldr	r0, [pc, #0]	; (8002c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002c82:	4770      	bx	lr
 8002c84:	200000d0 	.word	0x200000d0

08002c88 <USBD_CDC_DataOut>:
{      
 8002c88:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c8a:	2686      	movs	r6, #134	; 0x86
 8002c8c:	00b6      	lsls	r6, r6, #2
{      
 8002c8e:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c90:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002c92:	f001 fb47 	bl	8004324 <USBD_LL_GetRxDataSize>
 8002c96:	2383      	movs	r3, #131	; 0x83
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	50e8      	str	r0, [r5, r3]
  if(pdev->pClassData != NULL)
 8002c9c:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 8002c9e:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002ca4:	2383      	movs	r3, #131	; 0x83
 8002ca6:	2281      	movs	r2, #129	; 0x81
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	18e9      	adds	r1, r5, r3
 8002cac:	3310      	adds	r3, #16
 8002cae:	58e3      	ldr	r3, [r4, r3]
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	58a8      	ldr	r0, [r5, r2]
 8002cb6:	4798      	blx	r3
    return USBD_OK;
 8002cb8:	2000      	movs	r0, #0
}
 8002cba:	bd70      	pop	{r4, r5, r6, pc}

08002cbc <USBD_CDC_Setup>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cbc:	2260      	movs	r2, #96	; 0x60
 8002cbe:	780b      	ldrb	r3, [r1, #0]
{
 8002cc0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cc2:	401a      	ands	r2, r3
{
 8002cc4:	0004      	movs	r4, r0
 8002cc6:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d028      	beq.n	8002d1e <USBD_CDC_Setup+0x62>
 8002ccc:	2a20      	cmp	r2, #32
 8002cce:	d11e      	bne.n	8002d0e <USBD_CDC_Setup+0x52>
    if (req->wLength)
 8002cd0:	88ca      	ldrh	r2, [r1, #6]
 8002cd2:	7848      	ldrb	r0, [r1, #1]
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d01c      	beq.n	8002d12 <USBD_CDC_Setup+0x56>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002cd8:	2186      	movs	r1, #134	; 0x86
      if (req->bmRequest & 0x80)
 8002cda:	b25b      	sxtb	r3, r3
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002cdc:	0089      	lsls	r1, r1, #2
 8002cde:	5866      	ldr	r6, [r4, r1]
      if (req->bmRequest & 0x80)
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da0b      	bge.n	8002cfc <USBD_CDC_Setup+0x40>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ce4:	2387      	movs	r3, #135	; 0x87
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	58e3      	ldr	r3, [r4, r3]
 8002cea:	0031      	movs	r1, r6
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 8002cf0:	0031      	movs	r1, r6
 8002cf2:	88ea      	ldrh	r2, [r5, #6]
      USBD_CtlSendData (pdev,
 8002cf4:	0020      	movs	r0, r4
 8002cf6:	f000 fbf4 	bl	80034e2 <USBD_CtlSendData>
      break;
 8002cfa:	e008      	b.n	8002d0e <USBD_CDC_Setup+0x52>
        hcdc->CmdOpCode = req->bRequest;
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	54f0      	strb	r0, [r6, r3]
        hcdc->CmdLength = req->wLength;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <USBD_CDC_Setup+0x70>)
        USBD_CtlPrepareRx (pdev, 
 8002d04:	0031      	movs	r1, r6
        hcdc->CmdLength = req->wLength;
 8002d06:	54f2      	strb	r2, [r6, r3]
        USBD_CtlPrepareRx (pdev, 
 8002d08:	0020      	movs	r0, r4
 8002d0a:	f000 fc00 	bl	800350e <USBD_CtlPrepareRx>
}
 8002d0e:	2000      	movs	r0, #0
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002d12:	2387      	movs	r3, #135	; 0x87
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	58e3      	ldr	r3, [r4, r3]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4798      	blx	r3
 8002d1c:	e7f7      	b.n	8002d0e <USBD_CDC_Setup+0x52>
    switch (req->bRequest)
 8002d1e:	784b      	ldrb	r3, [r1, #1]
 8002d20:	2b0a      	cmp	r3, #10
 8002d22:	d1f4      	bne.n	8002d0e <USBD_CDC_Setup+0x52>
      USBD_CtlSendData (pdev,
 8002d24:	2201      	movs	r2, #1
 8002d26:	4902      	ldr	r1, [pc, #8]	; (8002d30 <USBD_CDC_Setup+0x74>)
 8002d28:	e7e4      	b.n	8002cf4 <USBD_CDC_Setup+0x38>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	00000201 	.word	0x00000201
 8002d30:	20000208 	.word	0x20000208

08002d34 <USBD_CDC_DeInit>:
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	0004      	movs	r4, r0
  if(pdev->pClassData != NULL)
 8002d38:	2586      	movs	r5, #134	; 0x86
  USBD_LL_CloseEP(pdev,
 8002d3a:	2181      	movs	r1, #129	; 0x81
 8002d3c:	f001 fa7e 	bl	800423c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002d40:	2101      	movs	r1, #1
 8002d42:	0020      	movs	r0, r4
 8002d44:	f001 fa7a 	bl	800423c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002d48:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev,
 8002d4a:	2182      	movs	r1, #130	; 0x82
 8002d4c:	0020      	movs	r0, r4
 8002d4e:	f001 fa75 	bl	800423c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002d52:	5963      	ldr	r3, [r4, r5]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <USBD_CDC_DeInit+0x38>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002d58:	2387      	movs	r3, #135	; 0x87
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	58e3      	ldr	r3, [r4, r3]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002d62:	5960      	ldr	r0, [r4, r5]
 8002d64:	f001 faea 	bl	800433c <USBD_static_free>
    pdev->pClassData = NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	5163      	str	r3, [r4, r5]
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}

08002d70 <USBD_CDC_Init>:
{
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002d72:	7c03      	ldrb	r3, [r0, #16]
{
 8002d74:	0004      	movs	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d133      	bne.n	8002de2 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev,
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	2181      	movs	r1, #129	; 0x81
 8002d82:	f001 fa49 	bl	8004218 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	009b      	lsls	r3, r3, #2
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002d8a:	2587      	movs	r5, #135	; 0x87
    USBD_LL_OpenEP(pdev,
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	2101      	movs	r1, #1
 8002d90:	0020      	movs	r0, r4
 8002d92:	f001 fa41 	bl	8004218 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002d96:	00ad      	lsls	r5, r5, #2
  USBD_LL_OpenEP(pdev,
 8002d98:	2308      	movs	r3, #8
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	2182      	movs	r1, #130	; 0x82
 8002d9e:	0020      	movs	r0, r4
 8002da0:	f001 fa3a 	bl	8004218 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002da4:	2786      	movs	r7, #134	; 0x86
 8002da6:	0028      	movs	r0, r5
 8002da8:	f001 fac4 	bl	8004334 <USBD_static_malloc>
 8002dac:	00bf      	lsls	r7, r7, #2
 8002dae:	0006      	movs	r6, r0
 8002db0:	51e0      	str	r0, [r4, r7]
    ret = 1; 
 8002db2:	2001      	movs	r0, #1
  if(pdev->pClassData == NULL)
 8002db4:	2e00      	cmp	r6, #0
 8002db6:	d013      	beq.n	8002de0 <USBD_CDC_Init+0x70>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002db8:	5963      	ldr	r3, [r4, r5]
    hcdc->TxState =0;
 8002dba:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4798      	blx	r3
    hcdc->TxState =0;
 8002dc0:	2385      	movs	r3, #133	; 0x85
 8002dc2:	2281      	movs	r2, #129	; 0x81
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	50f5      	str	r5, [r6, r3]
    hcdc->RxState =0;
 8002dc8:	51f5      	str	r5, [r6, r7]
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002dca:	7c27      	ldrb	r7, [r4, #16]
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	42af      	cmp	r7, r5
 8002dd0:	d10e      	bne.n	8002df0 <USBD_CDC_Init+0x80>
      USBD_LL_PrepareReceive(pdev,
 8002dd2:	3b14      	subs	r3, #20
 8002dd4:	58b2      	ldr	r2, [r6, r2]
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	0020      	movs	r0, r4
 8002dda:	f001 fa93 	bl	8004304 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002dde:	0038      	movs	r0, r7
}
 8002de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002de2:	2340      	movs	r3, #64	; 0x40
 8002de4:	2202      	movs	r2, #2
 8002de6:	2181      	movs	r1, #129	; 0x81
 8002de8:	f001 fa16 	bl	8004218 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002dec:	2340      	movs	r3, #64	; 0x40
 8002dee:	e7cc      	b.n	8002d8a <USBD_CDC_Init+0x1a>
      USBD_LL_PrepareReceive(pdev,
 8002df0:	2340      	movs	r3, #64	; 0x40
 8002df2:	58b2      	ldr	r2, [r6, r2]
 8002df4:	2101      	movs	r1, #1
 8002df6:	0020      	movs	r0, r4
 8002df8:	f001 fa84 	bl	8004304 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002dfc:	0028      	movs	r0, r5
 8002dfe:	e7ef      	b.n	8002de0 <USBD_CDC_Init+0x70>

08002e00 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8002e00:	2302      	movs	r3, #2
  
  if(fops != NULL)
 8002e02:	2900      	cmp	r1, #0
 8002e04:	d003      	beq.n	8002e0e <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 8002e06:	2387      	movs	r3, #135	; 0x87
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;    
 8002e0c:	2300      	movs	r3, #0
  }
  
  return ret;
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	4770      	bx	lr

08002e12 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e12:	2386      	movs	r3, #134	; 0x86
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	58c3      	ldr	r3, [r0, r3]
  
  hcdc->TxBuffer = pbuff;
 8002e18:	2082      	movs	r0, #130	; 0x82
 8002e1a:	0080      	lsls	r0, r0, #2
 8002e1c:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;  
 8002e1e:	2184      	movs	r1, #132	; 0x84
 8002e20:	0089      	lsls	r1, r1, #2
  
  return USBD_OK;  
}
 8002e22:	2000      	movs	r0, #0
  hcdc->TxLength = length;  
 8002e24:	505a      	str	r2, [r3, r1]
}
 8002e26:	4770      	bx	lr

08002e28 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002e28:	2386      	movs	r3, #134	; 0x86
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	58c2      	ldr	r2, [r0, r3]
 8002e2e:	3b14      	subs	r3, #20
  
  return USBD_OK;
}
 8002e30:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002e32:	50d1      	str	r1, [r2, r3]
}
 8002e34:	4770      	bx	lr

08002e36 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e36:	2386      	movs	r3, #134	; 0x86
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	58c2      	ldr	r2, [r0, r3]
{      
 8002e3c:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002e3e:	2302      	movs	r3, #2
  if(pdev->pClassData != NULL)
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	d011      	beq.n	8002e68 <USBD_CDC_TransmitPacket+0x32>
    if(hcdc->TxState == 0)
 8002e44:	2185      	movs	r1, #133	; 0x85
 8002e46:	0089      	lsls	r1, r1, #2
 8002e48:	5854      	ldr	r4, [r2, r1]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	2c00      	cmp	r4, #0
 8002e4e:	d10b      	bne.n	8002e68 <USBD_CDC_TransmitPacket+0x32>
      hcdc->TxState = 1;
 8002e50:	5053      	str	r3, [r2, r1]
                       hcdc->TxLength);
 8002e52:	2384      	movs	r3, #132	; 0x84
 8002e54:	009b      	lsls	r3, r3, #2
      USBD_LL_Transmit(pdev,
 8002e56:	58d3      	ldr	r3, [r2, r3]
 8002e58:	390c      	subs	r1, #12
 8002e5a:	5852      	ldr	r2, [r2, r1]
 8002e5c:	3988      	subs	r1, #136	; 0x88
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	39ff      	subs	r1, #255	; 0xff
 8002e62:	f001 fa3f 	bl	80042e4 <USBD_LL_Transmit>
      return USBD_OK;
 8002e66:	0023      	movs	r3, r4
  }
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	bd10      	pop	{r4, pc}

08002e6c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e6c:	2386      	movs	r3, #134	; 0x86
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	58c2      	ldr	r2, [r0, r3]
{      
 8002e72:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8002e74:	2402      	movs	r4, #2
  if(pdev->pClassData != NULL)
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d009      	beq.n	8002e8e <USBD_CDC_ReceivePacket+0x22>
 8002e7a:	2181      	movs	r1, #129	; 0x81
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002e7c:	7c04      	ldrb	r4, [r0, #16]
 8002e7e:	0089      	lsls	r1, r1, #2
 8002e80:	2c00      	cmp	r4, #0
 8002e82:	d106      	bne.n	8002e92 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8002e84:	5852      	ldr	r2, [r2, r1]
 8002e86:	3b18      	subs	r3, #24
 8002e88:	2101      	movs	r1, #1
 8002e8a:	f001 fa3b 	bl	8004304 <USBD_LL_PrepareReceive>
  }
}
 8002e8e:	0020      	movs	r0, r4
 8002e90:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002e92:	5852      	ldr	r2, [r2, r1]
 8002e94:	2340      	movs	r3, #64	; 0x40
 8002e96:	2101      	movs	r1, #1
 8002e98:	f001 fa34 	bl	8004304 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	e7f6      	b.n	8002e8e <USBD_CDC_ReceivePacket+0x22>

08002ea0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002ea0:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8002ea2:	2302      	movs	r3, #2
  if(pdev == NULL)
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d013      	beq.n	8002ed0 <USBD_Init+0x30>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002ea8:	2385      	movs	r3, #133	; 0x85
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	58c4      	ldr	r4, [r0, r3]
 8002eae:	2c00      	cmp	r4, #0
 8002eb0:	d001      	beq.n	8002eb6 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8002eb2:	2400      	movs	r4, #0
 8002eb4:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002eb6:	2900      	cmp	r1, #0
 8002eb8:	d002      	beq.n	8002ec0 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8002eba:	2384      	movs	r3, #132	; 0x84
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002ec0:	23fe      	movs	r3, #254	; 0xfe
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8002ec8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002eca:	f001 f955 	bl	8004178 <USBD_LL_Init>
  
  return USBD_OK; 
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	bd10      	pop	{r4, pc}

08002ed4 <USBD_RegisterClass>:
    status = USBD_OK;
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002ed4:	2302      	movs	r3, #2
  if(pclass != 0)
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d003      	beq.n	8002ee2 <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 8002eda:	2385      	movs	r3, #133	; 0x85
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8002ee0:	2300      	movs	r3, #0
  }
  
  return status;
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	4770      	bx	lr

08002ee6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002ee6:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002ee8:	f001 f986 	bl	80041f8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	bd10      	pop	{r4, pc}

08002ef0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002ef0:	2385      	movs	r3, #133	; 0x85
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	58c3      	ldr	r3, [r0, r3]
{
 8002ef6:	b510      	push	{r4, lr}
  if(pdev->pClass != NULL)
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002efc:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002efe:	bd10      	pop	{r4, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4798      	blx	r3
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d1f9      	bne.n	8002efc <USBD_SetClassConfig+0xc>
 8002f08:	e7f9      	b.n	8002efe <USBD_SetClassConfig+0xe>

08002f0a <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002f0a:	2385      	movs	r3, #133	; 0x85
{
 8002f0c:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	58c3      	ldr	r3, [r0, r3]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4798      	blx	r3
  return USBD_OK;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	bd10      	pop	{r4, pc}
	...

08002f1c <USBD_LL_SetupStage>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002f1c:	2382      	movs	r3, #130	; 0x82
 8002f1e:	009b      	lsls	r3, r3, #2
{
 8002f20:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002f22:	18c5      	adds	r5, r0, r3
{
 8002f24:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002f26:	0028      	movs	r0, r5
 8002f28:	f000 faaa 	bl	8003480 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002f2c:	23fa      	movs	r3, #250	; 0xfa
 8002f2e:	2201      	movs	r2, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <USBD_LL_SetupStage+0x64>)
 8002f36:	5ae2      	ldrh	r2, [r4, r3]
 8002f38:	3b16      	subs	r3, #22
 8002f3a:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	5ce1      	ldrb	r1, [r4, r3]
 8002f40:	3bea      	subs	r3, #234	; 0xea
 8002f42:	3bff      	subs	r3, #255	; 0xff
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d00f      	beq.n	8002f6a <USBD_LL_SetupStage+0x4e>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <USBD_LL_SetupStage+0x42>
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d010      	beq.n	8002f74 <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002f52:	237f      	movs	r3, #127	; 0x7f
 8002f54:	0020      	movs	r0, r4
 8002f56:	4399      	bics	r1, r3
 8002f58:	f001 f980 	bl	800425c <USBD_LL_StallEP>
    break;
 8002f5c:	e003      	b.n	8002f66 <USBD_LL_SetupStage+0x4a>
    USBD_StdDevReq (pdev, &pdev->request);
 8002f5e:	0029      	movs	r1, r5
 8002f60:	0020      	movs	r0, r4
 8002f62:	f000 f8f1 	bl	8003148 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002f66:	2000      	movs	r0, #0
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002f6a:	0029      	movs	r1, r5
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	f000 f9fd 	bl	800336c <USBD_StdItfReq>
    break;
 8002f72:	e7f8      	b.n	8002f66 <USBD_LL_SetupStage+0x4a>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002f74:	0029      	movs	r1, r5
 8002f76:	0020      	movs	r0, r4
 8002f78:	f000 fa14 	bl	80033a4 <USBD_StdEPReq>
    break;
 8002f7c:	e7f3      	b.n	8002f66 <USBD_LL_SetupStage+0x4a>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	0000020e 	.word	0x0000020e

08002f84 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	0004      	movs	r4, r0
 8002f88:	0015      	movs	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d127      	bne.n	8002fde <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002f8e:	23fa      	movs	r3, #250	; 0xfa
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	58c3      	ldr	r3, [r0, r3]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10f      	bne.n	8002fb8 <USBD_LL_DataOutStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002f98:	3005      	adds	r0, #5
 8002f9a:	30ff      	adds	r0, #255	; 0xff
 8002f9c:	6883      	ldr	r3, [r0, #8]
 8002f9e:	68c2      	ldr	r2, [r0, #12]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d90b      	bls.n	8002fbc <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -=  pep->maxpacket;
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	6083      	str	r3, [r0, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d900      	bls.n	8002fae <USBD_LL_DataOutStage+0x2a>
 8002fac:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	0029      	movs	r1, r5
 8002fb2:	0020      	movs	r0, r4
 8002fb4:	f000 fabb 	bl	800352e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002fbc:	2385      	movs	r3, #133	; 0x85
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	58e3      	ldr	r3, [r4, r3]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <USBD_LL_DataOutStage+0x52>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002fc8:	22fe      	movs	r2, #254	; 0xfe
 8002fca:	0052      	lsls	r2, r2, #1
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002fcc:	5ca2      	ldrb	r2, [r4, r2]
 8002fce:	2a03      	cmp	r2, #3
 8002fd0:	d101      	bne.n	8002fd6 <USBD_LL_DataOutStage+0x52>
          pdev->pClass->EP0_RxReady(pdev); 
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	f000 fab1 	bl	800353e <USBD_CtlSendStatus>
 8002fdc:	e7ec      	b.n	8002fb8 <USBD_LL_DataOutStage+0x34>
  else if((pdev->pClass->DataOut != NULL)&&
 8002fde:	2385      	movs	r3, #133	; 0x85
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	58c3      	ldr	r3, [r0, r3]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0e6      	beq.n	8002fb8 <USBD_LL_DataOutStage+0x34>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002fea:	22fe      	movs	r2, #254	; 0xfe
 8002fec:	0052      	lsls	r2, r2, #1
  else if((pdev->pClass->DataOut != NULL)&&
 8002fee:	5c82      	ldrb	r2, [r0, r2]
 8002ff0:	2a03      	cmp	r2, #3
 8002ff2:	d1e1      	bne.n	8002fb8 <USBD_LL_DataOutStage+0x34>
    pdev->pClass->DataOut(pdev, epnum); 
 8002ff4:	4798      	blx	r3
 8002ff6:	e7df      	b.n	8002fb8 <USBD_LL_DataOutStage+0x34>

08002ff8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	000d      	movs	r5, r1
 8002ffc:	0004      	movs	r4, r0
 8002ffe:	0011      	movs	r1, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003000:	2d00      	cmp	r5, #0
 8003002:	d141      	bne.n	8003088 <USBD_LL_DataInStage+0x90>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003004:	23fa      	movs	r3, #250	; 0xfa
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	58c3      	ldr	r3, [r0, r3]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d10e      	bne.n	800302c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800300e:	69c2      	ldr	r2, [r0, #28]
 8003010:	6a06      	ldr	r6, [r0, #32]
 8003012:	42b2      	cmp	r2, r6
 8003014:	d913      	bls.n	800303e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003016:	1b92      	subs	r2, r2, r6
 8003018:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800301a:	b292      	uxth	r2, r2
 800301c:	f000 fa6f 	bl	80034fe <USBD_CtlContinueSendData>
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003020:	002b      	movs	r3, r5
 8003022:	002a      	movs	r2, r5
 8003024:	0029      	movs	r1, r5
 8003026:	0020      	movs	r0, r4
 8003028:	f001 f96c 	bl	8004304 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	5ce2      	ldrb	r2, [r4, r3]
 8003032:	2a01      	cmp	r2, #1
 8003034:	d101      	bne.n	800303a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003036:	2200      	movs	r2, #0
 8003038:	54e2      	strb	r2, [r4, r3]
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800303a:	2000      	movs	r0, #0
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800303e:	6987      	ldr	r7, [r0, #24]
 8003040:	0031      	movs	r1, r6
 8003042:	0038      	movs	r0, r7
 8003044:	f7fd f8fa 	bl	800023c <__aeabi_uidivmod>
 8003048:	1e0d      	subs	r5, r1, #0
 800304a:	d10c      	bne.n	8003066 <USBD_LL_DataInStage+0x6e>
 800304c:	42be      	cmp	r6, r7
 800304e:	d80a      	bhi.n	8003066 <USBD_LL_DataInStage+0x6e>
             (pep->total_length < pdev->ep0_data_len ))
 8003050:	26fc      	movs	r6, #252	; 0xfc
 8003052:	0076      	lsls	r6, r6, #1
           (pep->total_length >= pep->maxpacket) &&
 8003054:	59a3      	ldr	r3, [r4, r6]
 8003056:	429f      	cmp	r7, r3
 8003058:	d205      	bcs.n	8003066 <USBD_LL_DataInStage+0x6e>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800305a:	000a      	movs	r2, r1
 800305c:	0020      	movs	r0, r4
 800305e:	f000 fa4e 	bl	80034fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003062:	51a5      	str	r5, [r4, r6]
 8003064:	e7dc      	b.n	8003020 <USBD_LL_DataInStage+0x28>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003066:	2385      	movs	r3, #133	; 0x85
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	58e3      	ldr	r3, [r4, r3]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <USBD_LL_DataInStage+0x88>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003072:	22fe      	movs	r2, #254	; 0xfe
 8003074:	0052      	lsls	r2, r2, #1
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003076:	5ca2      	ldrb	r2, [r4, r2]
 8003078:	2a03      	cmp	r2, #3
 800307a:	d101      	bne.n	8003080 <USBD_LL_DataInStage+0x88>
            pdev->pClass->EP0_TxSent(pdev); 
 800307c:	0020      	movs	r0, r4
 800307e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003080:	0020      	movs	r0, r4
 8003082:	f000 fa68 	bl	8003556 <USBD_CtlReceiveStatus>
 8003086:	e7d1      	b.n	800302c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003088:	2385      	movs	r3, #133	; 0x85
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	58c3      	ldr	r3, [r0, r3]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0d2      	beq.n	800303a <USBD_LL_DataInStage+0x42>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003094:	22fe      	movs	r2, #254	; 0xfe
 8003096:	0052      	lsls	r2, r2, #1
  else if((pdev->pClass->DataIn != NULL)&& 
 8003098:	5c82      	ldrb	r2, [r0, r2]
 800309a:	2a03      	cmp	r2, #3
 800309c:	d1cd      	bne.n	800303a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800309e:	0029      	movs	r1, r5
 80030a0:	4798      	blx	r3
 80030a2:	e7ca      	b.n	800303a <USBD_LL_DataInStage+0x42>

080030a4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80030a4:	2200      	movs	r2, #0
{
 80030a6:	b570      	push	{r4, r5, r6, lr}
 80030a8:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev,
 80030aa:	0011      	movs	r1, r2
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	f001 f8b3 	bl	8004218 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80030b2:	0023      	movs	r3, r4
 80030b4:	2540      	movs	r5, #64	; 0x40
 80030b6:	33fc      	adds	r3, #252	; 0xfc
 80030b8:	615d      	str	r5, [r3, #20]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80030ba:	2200      	movs	r2, #0
 80030bc:	002b      	movs	r3, r5
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	0020      	movs	r0, r4
 80030c2:	f001 f8a9 	bl	8004218 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80030c6:	23fe      	movs	r3, #254	; 0xfe
 80030c8:	2201      	movs	r2, #1
 80030ca:	005b      	lsls	r3, r3, #1
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80030cc:	6225      	str	r5, [r4, #32]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80030ce:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 80030d0:	331c      	adds	r3, #28
 80030d2:	58e3      	ldr	r3, [r4, r3]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80030d8:	2385      	movs	r3, #133	; 0x85
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	58e3      	ldr	r3, [r4, r3]
 80030de:	7921      	ldrb	r1, [r4, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0020      	movs	r0, r4
 80030e4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80030e6:	2000      	movs	r0, #0
 80030e8:	bd70      	pop	{r4, r5, r6, pc}

080030ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80030ea:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80030ec:	2000      	movs	r0, #0
 80030ee:	4770      	bx	lr

080030f0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80030f0:	23fe      	movs	r3, #254	; 0xfe
 80030f2:	22fe      	movs	r2, #254	; 0xfe
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	5cc1      	ldrb	r1, [r0, r3]
 80030f8:	32ff      	adds	r2, #255	; 0xff
 80030fa:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80030fc:	3afa      	subs	r2, #250	; 0xfa
 80030fe:	3aff      	subs	r2, #255	; 0xff
 8003100:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8003102:	2000      	movs	r0, #0
 8003104:	4770      	bx	lr

08003106 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003106:	23fe      	movs	r3, #254	; 0xfe
 8003108:	33ff      	adds	r3, #255	; 0xff
 800310a:	5cc2      	ldrb	r2, [r0, r3]
 800310c:	3b01      	subs	r3, #1
 800310e:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8003110:	2000      	movs	r0, #0
 8003112:	4770      	bx	lr

08003114 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003114:	23fe      	movs	r3, #254	; 0xfe
{
 8003116:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	5cc3      	ldrb	r3, [r0, r3]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d106      	bne.n	800312e <USBD_LL_SOF+0x1a>
  {
    if(pdev->pClass->SOF != NULL)
 8003120:	2385      	movs	r3, #133	; 0x85
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	58c3      	ldr	r3, [r0, r3]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d000      	beq.n	800312e <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 800312c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800312e:	2000      	movs	r0, #0
 8003130:	bd10      	pop	{r4, pc}

08003132 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003132:	b510      	push	{r4, lr}
 8003134:	0004      	movs	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	f001 f890 	bl	800425c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800313c:	2100      	movs	r1, #0
 800313e:	0020      	movs	r0, r4
 8003140:	f001 f88c 	bl	800425c <USBD_LL_StallEP>
}
 8003144:	bd10      	pop	{r4, pc}
	...

08003148 <USBD_StdDevReq>:
{
 8003148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800314a:	0004      	movs	r4, r0
  switch (req->bRequest) 
 800314c:	7848      	ldrb	r0, [r1, #1]
{
 800314e:	000d      	movs	r5, r1
  switch (req->bRequest) 
 8003150:	2809      	cmp	r0, #9
 8003152:	d900      	bls.n	8003156 <USBD_StdDevReq+0xe>
 8003154:	e081      	b.n	800325a <USBD_StdDevReq+0x112>
 8003156:	f7fc ffe1 	bl	800011c <__gnu_thumb1_case_uhi>
 800315a:	00d4      	.short	0x00d4
 800315c:	008000f5 	.word	0x008000f5
 8003160:	008000e7 	.word	0x008000e7
 8003164:	000a0072 	.word	0x000a0072
 8003168:	00c30080 	.word	0x00c30080
 800316c:	0095      	.short	0x0095
  switch (req->wValue >> 8)
 800316e:	884b      	ldrh	r3, [r1, #2]
 8003170:	0a18      	lsrs	r0, r3, #8
 8003172:	3801      	subs	r0, #1
 8003174:	2806      	cmp	r0, #6
 8003176:	d870      	bhi.n	800325a <USBD_StdDevReq+0x112>
 8003178:	f7fc ffc6 	bl	8000108 <__gnu_thumb1_case_uqi>
 800317c:	6f2e1f04 	.word	0x6f2e1f04
 8003180:	4a6f      	.short	0x4a6f
 8003182:	55          	.byte	0x55
 8003183:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003184:	2384      	movs	r3, #132	; 0x84
 8003186:	466a      	mov	r2, sp
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	58e3      	ldr	r3, [r4, r3]
 800318c:	7c20      	ldrb	r0, [r4, #16]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1d91      	adds	r1, r2, #6
 8003192:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003194:	466b      	mov	r3, sp
 8003196:	1d9e      	adds	r6, r3, #6
 8003198:	8831      	ldrh	r1, [r6, #0]
 800319a:	2900      	cmp	r1, #0
 800319c:	d070      	beq.n	8003280 <USBD_StdDevReq+0x138>
 800319e:	88ea      	ldrh	r2, [r5, #6]
 80031a0:	2a00      	cmp	r2, #0
 80031a2:	d06d      	beq.n	8003280 <USBD_StdDevReq+0x138>
    len = MIN(len , req->wLength);
 80031a4:	1c0b      	adds	r3, r1, #0
 80031a6:	4291      	cmp	r1, r2
 80031a8:	d900      	bls.n	80031ac <USBD_StdDevReq+0x64>
 80031aa:	1c13      	adds	r3, r2, #0
    USBD_CtlSendData (pdev, 
 80031ac:	0001      	movs	r1, r0
    len = MIN(len , req->wLength);
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	8033      	strh	r3, [r6, #0]
    USBD_CtlSendData (pdev, 
 80031b2:	0020      	movs	r0, r4
 80031b4:	f000 f995 	bl	80034e2 <USBD_CtlSendData>
 80031b8:	e062      	b.n	8003280 <USBD_StdDevReq+0x138>
 80031ba:	2385      	movs	r3, #133	; 0x85
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80031bc:	7c22      	ldrb	r2, [r4, #16]
 80031be:	009b      	lsls	r3, r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80031c0:	58e3      	ldr	r3, [r4, r3]
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	d106      	bne.n	80031d4 <USBD_StdDevReq+0x8c>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80031c8:	466a      	mov	r2, sp
 80031ca:	1d90      	adds	r0, r2, #6
 80031cc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80031ce:	2302      	movs	r3, #2
 80031d0:	7043      	strb	r3, [r0, #1]
 80031d2:	e7df      	b.n	8003194 <USBD_StdDevReq+0x4c>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	e7f7      	b.n	80031c8 <USBD_StdDevReq+0x80>
    switch ((uint8_t)(req->wValue))
 80031d8:	b2d8      	uxtb	r0, r3
 80031da:	2805      	cmp	r0, #5
 80031dc:	d83d      	bhi.n	800325a <USBD_StdDevReq+0x112>
 80031de:	2284      	movs	r2, #132	; 0x84
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	7c23      	ldrb	r3, [r4, #16]
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80031e4:	58a2      	ldr	r2, [r4, r2]
    switch ((uint8_t)(req->wValue))
 80031e6:	f7fc ff8f 	bl	8000108 <__gnu_thumb1_case_uqi>
 80031ea:	0903      	.short	0x0903
 80031ec:	110f0d0b 	.word	0x110f0d0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80031f0:	6852      	ldr	r2, [r2, #4]
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80031f2:	4669      	mov	r1, sp
 80031f4:	0018      	movs	r0, r3
 80031f6:	3106      	adds	r1, #6
 80031f8:	4790      	blx	r2
 80031fa:	e7cb      	b.n	8003194 <USBD_StdDevReq+0x4c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	e7f8      	b.n	80031f2 <USBD_StdDevReq+0xaa>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	e7f6      	b.n	80031f2 <USBD_StdDevReq+0xaa>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003204:	6912      	ldr	r2, [r2, #16]
 8003206:	e7f4      	b.n	80031f2 <USBD_StdDevReq+0xaa>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003208:	6952      	ldr	r2, [r2, #20]
 800320a:	e7f2      	b.n	80031f2 <USBD_StdDevReq+0xaa>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800320c:	6992      	ldr	r2, [r2, #24]
 800320e:	e7f0      	b.n	80031f2 <USBD_StdDevReq+0xaa>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003210:	7c23      	ldrb	r3, [r4, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <USBD_StdDevReq+0x112>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003216:	2385      	movs	r3, #133	; 0x85
 8003218:	466a      	mov	r2, sp
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	58e3      	ldr	r3, [r4, r3]
 800321e:	1d90      	adds	r0, r2, #6
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	4798      	blx	r3
 8003224:	e7b6      	b.n	8003194 <USBD_StdDevReq+0x4c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003226:	7c23      	ldrb	r3, [r4, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <USBD_StdDevReq+0x112>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800322c:	2385      	movs	r3, #133	; 0x85
 800322e:	466a      	mov	r2, sp
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	58e3      	ldr	r3, [r4, r3]
 8003234:	1d90      	adds	r0, r2, #6
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800323a:	2307      	movs	r3, #7
 800323c:	e7c8      	b.n	80031d0 <USBD_StdDevReq+0x88>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800323e:	888b      	ldrh	r3, [r1, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <USBD_StdDevReq+0x112>
 8003244:	88cb      	ldrh	r3, [r1, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <USBD_StdDevReq+0x112>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800324a:	26fe      	movs	r6, #254	; 0xfe
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800324c:	884d      	ldrh	r5, [r1, #2]
 800324e:	337f      	adds	r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003250:	0076      	lsls	r6, r6, #1
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003252:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003254:	5da3      	ldrb	r3, [r4, r6]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d103      	bne.n	8003262 <USBD_StdDevReq+0x11a>
    USBD_CtlError(pdev , req);
 800325a:	0020      	movs	r0, r4
 800325c:	f7ff ff69 	bl	8003132 <USBD_CtlError.constprop.0>
    break;
 8003260:	e00e      	b.n	8003280 <USBD_StdDevReq+0x138>
      pdev->dev_address = dev_addr;
 8003262:	23ff      	movs	r3, #255	; 0xff
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	54e5      	strb	r5, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003268:	0029      	movs	r1, r5
 800326a:	0020      	movs	r0, r4
 800326c:	f001 f82a 	bl	80042c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003270:	0020      	movs	r0, r4
 8003272:	f000 f964 	bl	800353e <USBD_CtlSendStatus>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003276:	2302      	movs	r3, #2
      if (dev_addr != 0) 
 8003278:	2d00      	cmp	r5, #0
 800327a:	d100      	bne.n	800327e <USBD_StdDevReq+0x136>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800327c:	2301      	movs	r3, #1
 800327e:	55a3      	strb	r3, [r4, r6]
}
 8003280:	2000      	movs	r0, #0
 8003282:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);                 
 8003284:	7889      	ldrb	r1, [r1, #2]
 8003286:	4d38      	ldr	r5, [pc, #224]	; (8003368 <USBD_StdDevReq+0x220>)
 8003288:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800328a:	2901      	cmp	r1, #1
 800328c:	d8e5      	bhi.n	800325a <USBD_StdDevReq+0x112>
    switch (pdev->dev_state) 
 800328e:	23fe      	movs	r3, #254	; 0xfe
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	5ce2      	ldrb	r2, [r4, r3]
 8003294:	2a02      	cmp	r2, #2
 8003296:	d00d      	beq.n	80032b4 <USBD_StdDevReq+0x16c>
 8003298:	2a03      	cmp	r2, #3
 800329a:	d1de      	bne.n	800325a <USBD_StdDevReq+0x112>
      if (cfgidx == 0) 
 800329c:	2900      	cmp	r1, #0
 800329e:	d115      	bne.n	80032cc <USBD_StdDevReq+0x184>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80032a0:	2202      	movs	r2, #2
        USBD_ClrClassConfig(pdev , cfgidx);
 80032a2:	0020      	movs	r0, r4
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80032a4:	54e2      	strb	r2, [r4, r3]
        pdev->dev_config = cfgidx;          
 80032a6:	6061      	str	r1, [r4, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80032a8:	f7ff fe2f 	bl	8002f0a <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80032ac:	0020      	movs	r0, r4
 80032ae:	f000 f946 	bl	800353e <USBD_CtlSendStatus>
 80032b2:	e7e5      	b.n	8003280 <USBD_StdDevReq+0x138>
      if (cfgidx) 
 80032b4:	2900      	cmp	r1, #0
 80032b6:	d0f9      	beq.n	80032ac <USBD_StdDevReq+0x164>
        pdev->dev_config = cfgidx;
 80032b8:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80032ba:	2203      	movs	r2, #3
        pdev->dev_config = cfgidx;
 80032bc:	6061      	str	r1, [r4, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80032be:	54e2      	strb	r2, [r4, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80032c0:	0020      	movs	r0, r4
 80032c2:	f7ff fe15 	bl	8002ef0 <USBD_SetClassConfig>
 80032c6:	2802      	cmp	r0, #2
 80032c8:	d1f0      	bne.n	80032ac <USBD_StdDevReq+0x164>
 80032ca:	e7c6      	b.n	800325a <USBD_StdDevReq+0x112>
      else  if (cfgidx != pdev->dev_config) 
 80032cc:	6861      	ldr	r1, [r4, #4]
 80032ce:	2901      	cmp	r1, #1
 80032d0:	d0ec      	beq.n	80032ac <USBD_StdDevReq+0x164>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80032d2:	b2c9      	uxtb	r1, r1
 80032d4:	0020      	movs	r0, r4
 80032d6:	f7ff fe18 	bl	8002f0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80032da:	7829      	ldrb	r1, [r5, #0]
 80032dc:	6061      	str	r1, [r4, #4]
 80032de:	e7ef      	b.n	80032c0 <USBD_StdDevReq+0x178>
  if (req->wLength != 1) 
 80032e0:	88ca      	ldrh	r2, [r1, #6]
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	d1b9      	bne.n	800325a <USBD_StdDevReq+0x112>
    switch (pdev->dev_state )  
 80032e6:	23fe      	movs	r3, #254	; 0xfe
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	5ce3      	ldrb	r3, [r4, r3]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d003      	beq.n	80032f8 <USBD_StdDevReq+0x1b0>
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d1b2      	bne.n	800325a <USBD_StdDevReq+0x112>
                        (uint8_t *)&pdev->dev_config,
 80032f4:	1d21      	adds	r1, r4, #4
 80032f6:	e75c      	b.n	80031b2 <USBD_StdDevReq+0x6a>
      pdev->dev_default_config = 0;
 80032f8:	2300      	movs	r3, #0
                        (uint8_t *)&pdev->dev_default_config,
 80032fa:	0021      	movs	r1, r4
      pdev->dev_default_config = 0;
 80032fc:	60a3      	str	r3, [r4, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80032fe:	3108      	adds	r1, #8
 8003300:	e757      	b.n	80031b2 <USBD_StdDevReq+0x6a>
  switch (pdev->dev_state) 
 8003302:	23fe      	movs	r3, #254	; 0xfe
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	5ce3      	ldrb	r3, [r4, r3]
 8003308:	3b02      	subs	r3, #2
 800330a:	2b01      	cmp	r3, #1
 800330c:	d8a5      	bhi.n	800325a <USBD_StdDevReq+0x112>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800330e:	2301      	movs	r3, #1
 8003310:	60e3      	str	r3, [r4, #12]
    if (pdev->dev_remote_wakeup) 
 8003312:	2381      	movs	r3, #129	; 0x81
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	58e3      	ldr	r3, [r4, r3]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <USBD_StdDevReq+0x1d8>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800331c:	2303      	movs	r3, #3
 800331e:	60e3      	str	r3, [r4, #12]
                      (uint8_t *)& pdev->dev_config_status,
 8003320:	0021      	movs	r1, r4
    USBD_CtlSendData (pdev, 
 8003322:	2202      	movs	r2, #2
                      (uint8_t *)& pdev->dev_config_status,
 8003324:	310c      	adds	r1, #12
 8003326:	e744      	b.n	80031b2 <USBD_StdDevReq+0x6a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003328:	884b      	ldrh	r3, [r1, #2]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d1a8      	bne.n	8003280 <USBD_StdDevReq+0x138>
    pdev->dev_remote_wakeup = 1;  
 800332e:	2281      	movs	r2, #129	; 0x81
 8003330:	0092      	lsls	r2, r2, #2
 8003332:	50a3      	str	r3, [r4, r2]
    pdev->pClass->Setup (pdev, req);   
 8003334:	2385      	movs	r3, #133	; 0x85
 8003336:	009b      	lsls	r3, r3, #2
      pdev->pClass->Setup (pdev, req);   
 8003338:	58e3      	ldr	r3, [r4, r3]
 800333a:	0029      	movs	r1, r5
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0020      	movs	r0, r4
 8003340:	4798      	blx	r3
 8003342:	e7b3      	b.n	80032ac <USBD_StdDevReq+0x164>
  switch (pdev->dev_state)
 8003344:	23fe      	movs	r3, #254	; 0xfe
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	5ce3      	ldrb	r3, [r4, r3]
 800334a:	3b02      	subs	r3, #2
 800334c:	2b01      	cmp	r3, #1
 800334e:	d900      	bls.n	8003352 <USBD_StdDevReq+0x20a>
 8003350:	e783      	b.n	800325a <USBD_StdDevReq+0x112>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003352:	884b      	ldrh	r3, [r1, #2]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d000      	beq.n	800335a <USBD_StdDevReq+0x212>
 8003358:	e792      	b.n	8003280 <USBD_StdDevReq+0x138>
      pdev->dev_remote_wakeup = 0; 
 800335a:	2381      	movs	r3, #129	; 0x81
 800335c:	2200      	movs	r2, #0
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	50e2      	str	r2, [r4, r3]
      pdev->pClass->Setup (pdev, req);   
 8003362:	3310      	adds	r3, #16
 8003364:	e7e8      	b.n	8003338 <USBD_StdDevReq+0x1f0>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	20000209 	.word	0x20000209

0800336c <USBD_StdItfReq>:
  switch (pdev->dev_state) 
 800336c:	23fe      	movs	r3, #254	; 0xfe
{
 800336e:	b570      	push	{r4, r5, r6, lr}
  switch (pdev->dev_state) 
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	5cc3      	ldrb	r3, [r0, r3]
{
 8003374:	0004      	movs	r4, r0
 8003376:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 8003378:	2b03      	cmp	r3, #3
 800337a:	d10f      	bne.n	800339c <USBD_StdItfReq+0x30>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800337c:	790b      	ldrb	r3, [r1, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d80c      	bhi.n	800339c <USBD_StdItfReq+0x30>
      pdev->pClass->Setup (pdev, req); 
 8003382:	2385      	movs	r3, #133	; 0x85
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	58c3      	ldr	r3, [r0, r3]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800338c:	88eb      	ldrh	r3, [r5, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <USBD_StdItfReq+0x2c>
         USBD_CtlSendStatus(pdev);
 8003392:	0020      	movs	r0, r4
 8003394:	f000 f8d3 	bl	800353e <USBD_CtlSendStatus>
}
 8003398:	2000      	movs	r0, #0
 800339a:	bd70      	pop	{r4, r5, r6, pc}
     USBD_CtlError(pdev , req);
 800339c:	0020      	movs	r0, r4
 800339e:	f7ff fec8 	bl	8003132 <USBD_CtlError.constprop.0>
    break;
 80033a2:	e7f9      	b.n	8003398 <USBD_StdItfReq+0x2c>

080033a4 <USBD_StdEPReq>:
{
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	000d      	movs	r5, r1
 80033a8:	0004      	movs	r4, r0
  if ((req->bmRequest & 0x60) == 0x20)
 80033aa:	2060      	movs	r0, #96	; 0x60
  ep_addr  = LOBYTE(req->wIndex);   
 80033ac:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80033ae:	782b      	ldrb	r3, [r5, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80033b0:	b2d1      	uxtb	r1, r2
  if ((req->bmRequest & 0x60) == 0x20)
 80033b2:	4003      	ands	r3, r0
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d108      	bne.n	80033ca <USBD_StdEPReq+0x26>
    pdev->pClass->Setup (pdev, req);
 80033b8:	33f5      	adds	r3, #245	; 0xf5
 80033ba:	33ff      	adds	r3, #255	; 0xff
 80033bc:	58e3      	ldr	r3, [r4, r3]
 80033be:	0029      	movs	r1, r5
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0020      	movs	r0, r4
 80033c4:	4798      	blx	r3
}
 80033c6:	2000      	movs	r0, #0
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80033ca:	786b      	ldrb	r3, [r5, #1]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d021      	beq.n	8003414 <USBD_StdEPReq+0x70>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02f      	beq.n	8003434 <USBD_StdEPReq+0x90>
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d1f6      	bne.n	80033c6 <USBD_StdEPReq+0x22>
    switch (pdev->dev_state) 
 80033d8:	33fa      	adds	r3, #250	; 0xfa
 80033da:	33ff      	adds	r3, #255	; 0xff
 80033dc:	5ce3      	ldrb	r3, [r4, r3]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d043      	beq.n	800346a <USBD_StdEPReq+0xc6>
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d003      	beq.n	80033ee <USBD_StdEPReq+0x4a>
      USBD_CtlError(pdev , req);
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7ff fea3 	bl	8003132 <USBD_CtlError.constprop.0>
      break;
 80033ec:	e7eb      	b.n	80033c6 <USBD_StdEPReq+0x22>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80033ee:	886b      	ldrh	r3, [r5, #2]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <USBD_StdEPReq+0x5a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80033f4:	064b      	lsls	r3, r1, #25
 80033f6:	d002      	beq.n	80033fe <USBD_StdEPReq+0x5a>
          USBD_LL_StallEP(pdev , ep_addr);
 80033f8:	0020      	movs	r0, r4
 80033fa:	f000 ff2f 	bl	800425c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80033fe:	2385      	movs	r3, #133	; 0x85
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	58e3      	ldr	r3, [r4, r3]
 8003404:	0029      	movs	r1, r5
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	0020      	movs	r0, r4
 800340a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800340c:	0020      	movs	r0, r4
 800340e:	f000 f896 	bl	800353e <USBD_CtlSendStatus>
 8003412:	e7d8      	b.n	80033c6 <USBD_StdEPReq+0x22>
    switch (pdev->dev_state) 
 8003414:	23fe      	movs	r3, #254	; 0xfe
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	5ce3      	ldrb	r3, [r4, r3]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d025      	beq.n	800346a <USBD_StdEPReq+0xc6>
 800341e:	2b03      	cmp	r3, #3
 8003420:	d1e1      	bne.n	80033e6 <USBD_StdEPReq+0x42>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003422:	886b      	ldrh	r3, [r5, #2]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ce      	bne.n	80033c6 <USBD_StdEPReq+0x22>
        if ((ep_addr & 0x7F) != 0x00) 
 8003428:	064b      	lsls	r3, r1, #25
 800342a:	d0ef      	beq.n	800340c <USBD_StdEPReq+0x68>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800342c:	0020      	movs	r0, r4
 800342e:	f000 ff25 	bl	800427c <USBD_LL_ClearStallEP>
 8003432:	e7e4      	b.n	80033fe <USBD_StdEPReq+0x5a>
    switch (pdev->dev_state) 
 8003434:	23fe      	movs	r3, #254	; 0xfe
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	5ce3      	ldrb	r3, [r4, r3]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d015      	beq.n	800346a <USBD_StdEPReq+0xc6>
 800343e:	2b03      	cmp	r3, #3
 8003440:	d1d1      	bne.n	80033e6 <USBD_StdEPReq+0x42>
 8003442:	257f      	movs	r5, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003444:	400d      	ands	r5, r1
 8003446:	012d      	lsls	r5, r5, #4
 8003448:	0613      	lsls	r3, r2, #24
 800344a:	d514      	bpl.n	8003476 <USBD_StdEPReq+0xd2>
 800344c:	3514      	adds	r5, #20
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800344e:	0020      	movs	r0, r4
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003450:	1965      	adds	r5, r4, r5
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003452:	f000 ff23 	bl	800429c <USBD_LL_IsStallEP>
 8003456:	2800      	cmp	r0, #0
 8003458:	d010      	beq.n	800347c <USBD_StdEPReq+0xd8>
        pep->status = 0x0001;     
 800345a:	2301      	movs	r3, #1
 800345c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800345e:	2202      	movs	r2, #2
 8003460:	0029      	movs	r1, r5
 8003462:	0020      	movs	r0, r4
 8003464:	f000 f83d 	bl	80034e2 <USBD_CtlSendData>
      break;
 8003468:	e7ad      	b.n	80033c6 <USBD_StdEPReq+0x22>
      if ((ep_addr & 0x7F) != 0x00) 
 800346a:	064b      	lsls	r3, r1, #25
 800346c:	d0ab      	beq.n	80033c6 <USBD_StdEPReq+0x22>
        USBD_LL_StallEP(pdev , ep_addr);
 800346e:	0020      	movs	r0, r4
 8003470:	f000 fef4 	bl	800425c <USBD_LL_StallEP>
 8003474:	e7a7      	b.n	80033c6 <USBD_StdEPReq+0x22>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003476:	3505      	adds	r5, #5
 8003478:	35ff      	adds	r5, #255	; 0xff
 800347a:	e7e8      	b.n	800344e <USBD_StdEPReq+0xaa>
        pep->status = 0x0000;  
 800347c:	6028      	str	r0, [r5, #0]
 800347e:	e7ee      	b.n	800345e <USBD_StdEPReq+0xba>

08003480 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003480:	780b      	ldrb	r3, [r1, #0]
 8003482:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003484:	784b      	ldrb	r3, [r1, #1]
 8003486:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003488:	78ca      	ldrb	r2, [r1, #3]
 800348a:	788b      	ldrb	r3, [r1, #2]
 800348c:	0212      	lsls	r2, r2, #8
 800348e:	189b      	adds	r3, r3, r2
 8003490:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003492:	794a      	ldrb	r2, [r1, #5]
 8003494:	790b      	ldrb	r3, [r1, #4]
 8003496:	0212      	lsls	r2, r2, #8
 8003498:	189b      	adds	r3, r3, r2
 800349a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800349c:	79ca      	ldrb	r2, [r1, #7]
 800349e:	798b      	ldrb	r3, [r1, #6]
 80034a0:	0212      	lsls	r2, r2, #8
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	80c3      	strh	r3, [r0, #6]
}
 80034a6:	4770      	bx	lr

080034a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80034a8:	2300      	movs	r3, #0
 80034aa:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80034ac:	4298      	cmp	r0, r3
 80034ae:	d101      	bne.n	80034b4 <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 80034b0:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80034b2:	002b      	movs	r3, r5
 80034b4:	5cc4      	ldrb	r4, [r0, r3]
 80034b6:	1c5d      	adds	r5, r3, #1
 80034b8:	2c00      	cmp	r4, #0
 80034ba:	d1fa      	bne.n	80034b2 <USBD_GetString+0xa>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	3302      	adds	r3, #2
 80034c2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80034c4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80034c6:	2303      	movs	r3, #3
 80034c8:	704b      	strb	r3, [r1, #1]
 80034ca:	3b01      	subs	r3, #1
    while (*desc != '\0') 
 80034cc:	7805      	ldrb	r5, [r0, #0]
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	d0ee      	beq.n	80034b0 <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	54cd      	strb	r5, [r1, r3]
 80034d6:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80034d8:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80034da:	3001      	adds	r0, #1
      unicode[idx++] =  0x00;
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	548c      	strb	r4, [r1, r2]
 80034e0:	e7f4      	b.n	80034cc <USBD_GetString+0x24>

080034e2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80034e2:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80034e4:	22fa      	movs	r2, #250	; 0xfa
{
 80034e6:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80034e8:	2402      	movs	r4, #2
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80034ee:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 80034f0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80034f2:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80034f4:	2100      	movs	r1, #0
 80034f6:	f000 fef5 	bl	80042e4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80034fa:	2000      	movs	r0, #0
 80034fc:	bd10      	pop	{r4, pc}

080034fe <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80034fe:	b510      	push	{r4, lr}
 8003500:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003502:	000a      	movs	r2, r1
 8003504:	2100      	movs	r1, #0
 8003506:	f000 feed 	bl	80042e4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800350a:	2000      	movs	r0, #0
 800350c:	bd10      	pop	{r4, pc}

0800350e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800350e:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003510:	22fa      	movs	r2, #250	; 0xfa
{
 8003512:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003514:	2403      	movs	r4, #3
 8003516:	0052      	lsls	r2, r2, #1
 8003518:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 800351a:	0002      	movs	r2, r0
 800351c:	32fc      	adds	r2, #252	; 0xfc
 800351e:	60d3      	str	r3, [r2, #12]
  pdev->ep_out[0].rem_length   = len;
 8003520:	6113      	str	r3, [r2, #16]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003522:	000a      	movs	r2, r1
 8003524:	2100      	movs	r1, #0
 8003526:	f000 feed 	bl	8004304 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800352a:	2000      	movs	r0, #0
 800352c:	bd10      	pop	{r4, pc}

0800352e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800352e:	b510      	push	{r4, lr}
 8003530:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8003532:	000a      	movs	r2, r1
 8003534:	2100      	movs	r1, #0
 8003536:	f000 fee5 	bl	8004304 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800353a:	2000      	movs	r0, #0
 800353c:	bd10      	pop	{r4, pc}

0800353e <USBD_CtlSendStatus>:
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800353e:	23fa      	movs	r3, #250	; 0xfa
 8003540:	2204      	movs	r2, #4
 8003542:	005b      	lsls	r3, r3, #1
{
 8003544:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003546:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003548:	2300      	movs	r3, #0
 800354a:	001a      	movs	r2, r3
 800354c:	0019      	movs	r1, r3
 800354e:	f000 fec9 	bl	80042e4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003552:	2000      	movs	r0, #0
 8003554:	bd10      	pop	{r4, pc}

08003556 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003556:	23fa      	movs	r3, #250	; 0xfa
 8003558:	2205      	movs	r2, #5
 800355a:	005b      	lsls	r3, r3, #1
{
 800355c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800355e:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003560:	2300      	movs	r3, #0
 8003562:	001a      	movs	r2, r3
 8003564:	0019      	movs	r1, r3
 8003566:	f000 fecd 	bl	8004304 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800356a:	2000      	movs	r0, #0
 800356c:	bd10      	pop	{r4, pc}

0800356e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800356e:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8003570:	f000 fb0a 	bl	8003b88 <vTaskStartScheduler>
  
  return osOK;
}
 8003574:	2000      	movs	r0, #0
 8003576:	bd10      	pop	{r4, pc}

08003578 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800357a:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800357c:	6846      	ldr	r6, [r0, #4]
 800357e:	6801      	ldr	r1, [r0, #0]
 8003580:	8a02      	ldrh	r2, [r0, #16]
 8003582:	2508      	movs	r5, #8
 8003584:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003586:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 8003588:	2d84      	cmp	r5, #132	; 0x84
 800358a:	d000      	beq.n	800358e <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 800358c:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800358e:	a803      	add	r0, sp, #12
 8003590:	9001      	str	r0, [sp, #4]
 8003592:	9400      	str	r4, [sp, #0]
 8003594:	0030      	movs	r0, r6
 8003596:	f000 fa33 	bl	8003a00 <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800359a:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800359c:	2801      	cmp	r0, #1
 800359e:	d100      	bne.n	80035a2 <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 80035a0:	9b03      	ldr	r3, [sp, #12]
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	b004      	add	sp, #16
 80035a6:	bd70      	pop	{r4, r5, r6, pc}

080035a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035a8:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d100      	bne.n	80035b0 <osDelay+0x8>
 80035ae:	3001      	adds	r0, #1
 80035b0:	f000 fc02 	bl	8003db8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	bd10      	pop	{r4, pc}

080035b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b8:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035ba:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035bc:	3308      	adds	r3, #8
 80035be:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035c4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035c6:	4252      	negs	r2, r2
 80035c8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035cc:	4770      	bx	lr

080035ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035d2:	4770      	bx	lr

080035d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80035d4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80035d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80035e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80035e6:	3301      	adds	r3, #1
 80035e8:	6003      	str	r3, [r0, #0]
}
 80035ea:	4770      	bx	lr

080035ec <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ec:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035ee:	680a      	ldr	r2, [r1, #0]
{
 80035f0:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f2:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 80035f4:	1c54      	adds	r4, r2, #1
 80035f6:	d10b      	bne.n	8003610 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 80035f8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035fe:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003600:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003602:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003604:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003606:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003608:	3301      	adds	r3, #1
 800360a:	6003      	str	r3, [r0, #0]
}
 800360c:	bd30      	pop	{r4, r5, pc}
 800360e:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003610:	685c      	ldr	r4, [r3, #4]
 8003612:	6825      	ldr	r5, [r4, #0]
 8003614:	42aa      	cmp	r2, r5
 8003616:	d2fa      	bcs.n	800360e <vListInsert+0x22>
 8003618:	e7ef      	b.n	80035fa <vListInsert+0xe>

0800361a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800361a:	6841      	ldr	r1, [r0, #4]
 800361c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800361e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003620:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003622:	6882      	ldr	r2, [r0, #8]
 8003624:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	4288      	cmp	r0, r1
 800362a:	d100      	bne.n	800362e <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800362c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800362e:	2200      	movs	r2, #0
 8003630:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	1e50      	subs	r0, r2, #1
 8003636:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003638:	4770      	bx	lr
	...

0800363c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <prvTaskExitError+0x10>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	d001      	beq.n	8003648 <prvTaskExitError+0xc>
 8003644:	b672      	cpsid	i
 8003646:	e7fe      	b.n	8003646 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8003648:	b672      	cpsid	i
 800364a:	e7fe      	b.n	800364a <prvTaskExitError+0xe>
 800364c:	20000120 	.word	0x20000120

08003650 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003650:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <pxCurrentTCBConst2>)
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	3020      	adds	r0, #32
 8003658:	f380 8809 	msr	PSP, r0
 800365c:	2002      	movs	r0, #2
 800365e:	f380 8814 	msr	CONTROL, r0
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003668:	46ae      	mov	lr, r5
 800366a:	bc08      	pop	{r3}
 800366c:	bc04      	pop	{r2}
 800366e:	b662      	cpsie	i
 8003670:	4718      	bx	r3
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46c0      	nop			; (mov r8, r8)

08003680 <pxCurrentTCBConst2>:
 8003680:	20000e24 	.word	0x20000e24

08003684 <pxPortInitialiseStack>:
{
 8003684:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003686:	2480      	movs	r4, #128	; 0x80
 8003688:	1f03      	subs	r3, r0, #4
 800368a:	0464      	lsls	r4, r4, #17
 800368c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800368e:	3b04      	subs	r3, #4
 8003690:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003692:	4903      	ldr	r1, [pc, #12]	; (80036a0 <pxPortInitialiseStack+0x1c>)
 8003694:	3b04      	subs	r3, #4
 8003696:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003698:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800369a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	bd10      	pop	{r4, pc}
 80036a0:	0800363d 	.word	0x0800363d

080036a4 <SVC_Handler>:
}
 80036a4:	4770      	bx	lr
	...

080036a8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <vPortYield+0x14>)
 80036ac:	0552      	lsls	r2, r2, #21
 80036ae:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80036b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80036b4:	f3bf 8f6f 	isb	sy
}
 80036b8:	4770      	bx	lr
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	e000ed04 	.word	0xe000ed04

080036c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 80036c0:	b672      	cpsid	i
    uxCriticalNesting++;
 80036c2:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <vPortEnterCritical+0x14>)
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 80036ca:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80036ce:	f3bf 8f6f 	isb	sy
}
 80036d2:	4770      	bx	lr
 80036d4:	20000120 	.word	0x20000120

080036d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80036d8:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <vPortExitCritical+0x18>)
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <vPortExitCritical+0xc>
 80036e0:	b672      	cpsid	i
 80036e2:	e7fe      	b.n	80036e2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80036e4:	3b01      	subs	r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d100      	bne.n	80036ee <vPortExitCritical+0x16>
    {
        portENABLE_INTERRUPTS();
 80036ec:	b662      	cpsie	i
    }
}
 80036ee:	4770      	bx	lr
 80036f0:	20000120 	.word	0x20000120

080036f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80036f4:	f3ef 8010 	mrs	r0, PRIMASK
 80036f8:	b672      	cpsid	i
 80036fa:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 80036fc:	2000      	movs	r0, #0

080036fe <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 80036fe:	f380 8810 	msr	PRIMASK, r0
 8003702:	4770      	bx	lr
	...

08003710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003710:	f3ef 8009 	mrs	r0, PSP
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <pxCurrentTCBConst>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	3820      	subs	r0, #32
 800371a:	6010      	str	r0, [r2, #0]
 800371c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800371e:	4644      	mov	r4, r8
 8003720:	464d      	mov	r5, r9
 8003722:	4656      	mov	r6, sl
 8003724:	465f      	mov	r7, fp
 8003726:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003728:	b508      	push	{r3, lr}
 800372a:	b672      	cpsid	i
 800372c:	f000 fb92 	bl	8003e54 <vTaskSwitchContext>
 8003730:	b662      	cpsie	i
 8003732:	bc0c      	pop	{r2, r3}
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	6808      	ldr	r0, [r1, #0]
 8003738:	3010      	adds	r0, #16
 800373a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800373c:	46a0      	mov	r8, r4
 800373e:	46a9      	mov	r9, r5
 8003740:	46b2      	mov	sl, r6
 8003742:	46bb      	mov	fp, r7
 8003744:	f380 8809 	msr	PSP, r0
 8003748:	3820      	subs	r0, #32
 800374a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800374c:	4718      	bx	r3
 800374e:	46c0      	nop			; (mov r8, r8)

08003750 <pxCurrentTCBConst>:
 8003750:	20000e24 	.word	0x20000e24

08003754 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003754:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003756:	f7ff ffcd 	bl	80036f4 <ulSetInterruptMaskFromISR>
 800375a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800375c:	f000 fa46 	bl	8003bec <xTaskIncrementTick>
 8003760:	2800      	cmp	r0, #0
 8003762:	d003      	beq.n	800376c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	4b03      	ldr	r3, [pc, #12]	; (8003774 <SysTick_Handler+0x20>)
 8003768:	0552      	lsls	r2, r2, #21
 800376a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800376c:	0020      	movs	r0, r4
 800376e:	f7ff ffc6 	bl	80036fe <vClearInterruptMaskFromISR>
}
 8003772:	bd10      	pop	{r4, pc}
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003778:	21fa      	movs	r1, #250	; 0xfa
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <vPortSetupTimerInterrupt+0x1c>)
{
 800377c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	0089      	lsls	r1, r1, #2
 8003782:	f7fc fcd5 	bl	8000130 <__udivsi3>
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003786:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <vPortSetupTimerInterrupt+0x20>)
 800378a:	3801      	subs	r0, #1
 800378c:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800378e:	4b03      	ldr	r3, [pc, #12]	; (800379c <vPortSetupTimerInterrupt+0x24>)
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bd10      	pop	{r4, pc}
 8003794:	2000000c 	.word	0x2000000c
 8003798:	e000e014 	.word	0xe000e014
 800379c:	e000e010 	.word	0xe000e010

080037a0 <xPortStartScheduler>:
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80037a0:	22ff      	movs	r2, #255	; 0xff
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <xPortStartScheduler+0x2c>)
 80037a4:	0412      	lsls	r2, r2, #16
 80037a6:	6819      	ldr	r1, [r3, #0]
{
 80037a8:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80037ae:	22ff      	movs	r2, #255	; 0xff
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	0612      	lsls	r2, r2, #24
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80037b8:	f7ff ffde 	bl	8003778 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80037bc:	2200      	movs	r2, #0
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <xPortStartScheduler+0x30>)
 80037c0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80037c2:	f7ff ff45 	bl	8003650 <vPortStartFirstTask>
	prvTaskExitError();
 80037c6:	f7ff ff39 	bl	800363c <prvTaskExitError>
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	e000ed20 	.word	0xe000ed20
 80037d0:	20000120 	.word	0x20000120

080037d4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80037d4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <prvInsertBlockIntoFreeList+0x40>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4282      	cmp	r2, r0
 80037dc:	d318      	bcc.n	8003810 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037de:	685c      	ldr	r4, [r3, #4]
 80037e0:	1919      	adds	r1, r3, r4
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d103      	bne.n	80037ee <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037e6:	6841      	ldr	r1, [r0, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	1909      	adds	r1, r1, r4
 80037ec:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037ee:	6841      	ldr	r1, [r0, #4]
 80037f0:	1844      	adds	r4, r0, r1
 80037f2:	42a2      	cmp	r2, r4
 80037f4:	d107      	bne.n	8003806 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037f6:	4c08      	ldr	r4, [pc, #32]	; (8003818 <prvInsertBlockIntoFreeList+0x44>)
 80037f8:	6824      	ldr	r4, [r4, #0]
 80037fa:	42a2      	cmp	r2, r4
 80037fc:	d003      	beq.n	8003806 <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037fe:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003800:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003802:	1861      	adds	r1, r4, r1
 8003804:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003806:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003808:	4298      	cmp	r0, r3
 800380a:	d000      	beq.n	800380e <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800380c:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800380e:	bd10      	pop	{r4, pc}
 8003810:	0013      	movs	r3, r2
 8003812:	e7e1      	b.n	80037d8 <prvInsertBlockIntoFreeList+0x4>
 8003814:	20000e1c 	.word	0x20000e1c
 8003818:	2000020c 	.word	0x2000020c

0800381c <pvPortMalloc>:
{
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8003820:	f000 f9dc 	bl	8003bdc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <pvPortMalloc+0xec>)
 8003826:	4839      	ldr	r0, [pc, #228]	; (800390c <pvPortMalloc+0xf0>)
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11e      	bne.n	800386c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800382e:	4938      	ldr	r1, [pc, #224]	; (8003910 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003830:	3307      	adds	r3, #7
 8003832:	4219      	tst	r1, r3
 8003834:	d036      	beq.n	80038a4 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003836:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003838:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	18c9      	adds	r1, r1, r3
 8003840:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003842:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 8003844:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003846:	4e33      	ldr	r6, [pc, #204]	; (8003914 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003848:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800384a:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800384c:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800384e:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8003850:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003852:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8003854:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003856:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003858:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 800385a:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800385c:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <pvPortMalloc+0xfc>)
 8003860:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003862:	4b2e      	ldr	r3, [pc, #184]	; (800391c <pvPortMalloc+0x100>)
 8003864:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800386c:	6806      	ldr	r6, [r0, #0]
 800386e:	4234      	tst	r4, r6
 8003870:	d116      	bne.n	80038a0 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8003872:	2c00      	cmp	r4, #0
 8003874:	d014      	beq.n	80038a0 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 8003876:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003878:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 800387a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800387c:	420b      	tst	r3, r1
 800387e:	d001      	beq.n	8003884 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003880:	438b      	bics	r3, r1
 8003882:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <pvPortMalloc+0x84>
 8003888:	4924      	ldr	r1, [pc, #144]	; (800391c <pvPortMalloc+0x100>)
 800388a:	680d      	ldr	r5, [r1, #0]
 800388c:	42ab      	cmp	r3, r5
 800388e:	d807      	bhi.n	80038a0 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8003890:	4920      	ldr	r1, [pc, #128]	; (8003914 <pvPortMalloc+0xf8>)
 8003892:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003894:	6860      	ldr	r0, [r4, #4]
 8003896:	4283      	cmp	r3, r0
 8003898:	d807      	bhi.n	80038aa <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4294      	cmp	r4, r2
 800389e:	d10b      	bne.n	80038b8 <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 80038a0:	2500      	movs	r5, #0
 80038a2:	e028      	b.n	80038f6 <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038a4:	23c0      	movs	r3, #192	; 0xc0
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	e7cc      	b.n	8003844 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038aa:	6827      	ldr	r7, [r4, #0]
 80038ac:	46bc      	mov	ip, r7
 80038ae:	2f00      	cmp	r7, #0
 80038b0:	d0f3      	beq.n	800389a <pvPortMalloc+0x7e>
 80038b2:	0021      	movs	r1, r4
 80038b4:	4664      	mov	r4, ip
 80038b6:	e7ed      	b.n	8003894 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038b8:	680a      	ldr	r2, [r1, #0]
 80038ba:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038c0:	1ac2      	subs	r2, r0, r3
 80038c2:	2a10      	cmp	r2, #16
 80038c4:	d908      	bls.n	80038d8 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038c6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c8:	0741      	lsls	r1, r0, #29
 80038ca:	d001      	beq.n	80038d0 <pvPortMalloc+0xb4>
 80038cc:	b672      	cpsid	i
 80038ce:	e7fe      	b.n	80038ce <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038d0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038d2:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038d4:	f7ff ff7e 	bl	80037d4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <pvPortMalloc+0x100>)
 80038dc:	1aed      	subs	r5, r5, r3
 80038de:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <pvPortMalloc+0xfc>)
 80038e2:	6811      	ldr	r1, [r2, #0]
 80038e4:	428d      	cmp	r5, r1
 80038e6:	d200      	bcs.n	80038ea <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038e8:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038ea:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038ec:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 80038ee:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038f0:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038f2:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038f4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80038f6:	f000 f9f7 	bl	8003ce8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038fa:	076b      	lsls	r3, r5, #29
 80038fc:	d001      	beq.n	8003902 <pvPortMalloc+0xe6>
 80038fe:	b672      	cpsid	i
 8003900:	e7fe      	b.n	8003900 <pvPortMalloc+0xe4>
}
 8003902:	0028      	movs	r0, r5
 8003904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	2000020c 	.word	0x2000020c
 800390c:	20000e10 	.word	0x20000e10
 8003910:	20000210 	.word	0x20000210
 8003914:	20000e1c 	.word	0x20000e1c
 8003918:	20000e18 	.word	0x20000e18
 800391c:	20000e14 	.word	0x20000e14

08003920 <vPortFree>:
{
 8003920:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003922:	2800      	cmp	r0, #0
 8003924:	d01b      	beq.n	800395e <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003926:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <vPortFree+0x40>)
 8003928:	3808      	subs	r0, #8
 800392a:	6843      	ldr	r3, [r0, #4]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	0004      	movs	r4, r0
 8003930:	421a      	tst	r2, r3
 8003932:	d101      	bne.n	8003938 <vPortFree+0x18>
 8003934:	b672      	cpsid	i
 8003936:	e7fe      	b.n	8003936 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003938:	6801      	ldr	r1, [r0, #0]
 800393a:	2900      	cmp	r1, #0
 800393c:	d001      	beq.n	8003942 <vPortFree+0x22>
 800393e:	b672      	cpsid	i
 8003940:	e7fe      	b.n	8003940 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003942:	4393      	bics	r3, r2
 8003944:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8003946:	f000 f949 	bl	8003bdc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800394a:	4a06      	ldr	r2, [pc, #24]	; (8003964 <vPortFree+0x44>)
 800394c:	6863      	ldr	r3, [r4, #4]
 800394e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003950:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003952:	185b      	adds	r3, r3, r1
 8003954:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003956:	f7ff ff3d 	bl	80037d4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800395a:	f000 f9c5 	bl	8003ce8 <xTaskResumeAll>
}
 800395e:	bd10      	pop	{r4, pc}
 8003960:	20000e10 	.word	0x20000e10
 8003964:	20000e14 	.word	0x20000e14

08003968 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <prvResetNextTaskUnblockTime+0x20>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <prvResetNextTaskUnblockTime+0x24>)
 8003970:	2900      	cmp	r1, #0
 8003972:	d103      	bne.n	800397c <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003974:	2201      	movs	r2, #1
 8003976:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003978:	601a      	str	r2, [r3, #0]
	}
}
 800397a:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	6852      	ldr	r2, [r2, #4]
 8003984:	e7f8      	b.n	8003978 <prvResetNextTaskUnblockTime+0x10>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	20000e28 	.word	0x20000e28
 800398c:	20000f00 	.word	0x20000f00

08003990 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003996:	4d15      	ldr	r5, [pc, #84]	; (80039ec <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8003998:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800399a:	6828      	ldr	r0, [r5, #0]
{
 800399c:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800399e:	3004      	adds	r0, #4
 80039a0:	f7ff fe3b 	bl	800361a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039a4:	1c63      	adds	r3, r4, #1
 80039a6:	d107      	bne.n	80039b8 <prvAddCurrentTaskToDelayedList+0x28>
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	d005      	beq.n	80039b8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ac:	6829      	ldr	r1, [r5, #0]
 80039ae:	4810      	ldr	r0, [pc, #64]	; (80039f0 <prvAddCurrentTaskToDelayedList+0x60>)
 80039b0:	3104      	adds	r1, #4
 80039b2:	f7ff fe0f 	bl	80035d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039b8:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ba:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039bc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039be:	42a6      	cmp	r6, r4
 80039c0:	d906      	bls.n	80039d0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <prvAddCurrentTaskToDelayedList+0x64>)
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	6829      	ldr	r1, [r5, #0]
 80039c8:	3104      	adds	r1, #4
 80039ca:	f7ff fe0f 	bl	80035ec <vListInsert>
 80039ce:	e7f2      	b.n	80039b6 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <prvAddCurrentTaskToDelayedList+0x68>)
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	6829      	ldr	r1, [r5, #0]
 80039d6:	3104      	adds	r1, #4
 80039d8:	f7ff fe08 	bl	80035ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <prvAddCurrentTaskToDelayedList+0x6c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4294      	cmp	r4, r2
 80039e2:	d2e8      	bcs.n	80039b6 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 80039e4:	601c      	str	r4, [r3, #0]
}
 80039e6:	e7e6      	b.n	80039b6 <prvAddCurrentTaskToDelayedList+0x26>
 80039e8:	20000f48 	.word	0x20000f48
 80039ec:	20000e24 	.word	0x20000e24
 80039f0:	20000f20 	.word	0x20000f20
 80039f4:	20000e2c 	.word	0x20000e2c
 80039f8:	20000e28 	.word	0x20000e28
 80039fc:	20000f00 	.word	0x20000f00

08003a00 <xTaskCreate>:
	{
 8003a00:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a02:	0095      	lsls	r5, r2, #2
	{
 8003a04:	b085      	sub	sp, #20
 8003a06:	9002      	str	r0, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a08:	0028      	movs	r0, r5
	{
 8003a0a:	000f      	movs	r7, r1
 8003a0c:	9303      	str	r3, [sp, #12]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a0e:	f7ff ff05 	bl	800381c <pvPortMalloc>
 8003a12:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8003a14:	d100      	bne.n	8003a18 <xTaskCreate+0x18>
 8003a16:	e08e      	b.n	8003b36 <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a18:	2054      	movs	r0, #84	; 0x54
 8003a1a:	f7ff feff 	bl	800381c <pvPortMalloc>
 8003a1e:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8003a20:	d100      	bne.n	8003a24 <xTaskCreate+0x24>
 8003a22:	e085      	b.n	8003b30 <xTaskCreate+0x130>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a24:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a26:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
 8003a28:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a2a:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a2c:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a2e:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a30:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a32:	001a      	movs	r2, r3
 8003a34:	5cf9      	ldrb	r1, [r7, r3]
 8003a36:	3234      	adds	r2, #52	; 0x34
 8003a38:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8003a3a:	5cfa      	ldrb	r2, [r7, r3]
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	d002      	beq.n	8003a46 <xTaskCreate+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a40:	3301      	adds	r3, #1
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d1f5      	bne.n	8003a32 <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a46:	0023      	movs	r3, r4
 8003a48:	2500      	movs	r5, #0
 8003a4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003a4c:	3343      	adds	r3, #67	; 0x43
 8003a4e:	701d      	strb	r5, [r3, #0]
 8003a50:	2e06      	cmp	r6, #6
 8003a52:	d900      	bls.n	8003a56 <xTaskCreate+0x56>
 8003a54:	2606      	movs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a56:	1d23      	adds	r3, r4, #4
 8003a58:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
 8003a5a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003a5c:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a5e:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	f7ff fdb4 	bl	80035ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a66:	0020      	movs	r0, r4
 8003a68:	3018      	adds	r0, #24
 8003a6a:	f7ff fdb0 	bl	80035ce <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6e:	2307      	movs	r3, #7
 8003a70:	1b9e      	subs	r6, r3, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a72:	0023      	movs	r3, r4
 8003a74:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a76:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a78:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a7a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003a7c:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a7e:	9a03      	ldr	r2, [sp, #12]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a80:	701d      	strb	r5, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a82:	9902      	ldr	r1, [sp, #8]
 8003a84:	9800      	ldr	r0, [sp, #0]
 8003a86:	f7ff fdfd 	bl	8003684 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8003a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a8c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d000      	beq.n	8003a94 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a92:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8003a94:	f7ff fe14 	bl	80036c0 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <xTaskCreate+0x154>)
		if( pxCurrentTCB == NULL )
 8003a9a:	4d2f      	ldr	r5, [pc, #188]	; (8003b58 <xTaskCreate+0x158>)
		uxCurrentNumberOfTasks++;
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	3201      	adds	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003aa2:	682a      	ldr	r2, [r5, #0]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d149      	bne.n	8003b3c <xTaskCreate+0x13c>
			pxCurrentTCB = pxNewTCB;
 8003aa8:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d11d      	bne.n	8003aec <xTaskCreate+0xec>
 8003ab0:	4e2a      	ldr	r6, [pc, #168]	; (8003b5c <xTaskCreate+0x15c>)
 8003ab2:	0037      	movs	r7, r6
 8003ab4:	378c      	adds	r7, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ab6:	0030      	movs	r0, r6
 8003ab8:	3614      	adds	r6, #20
 8003aba:	f7ff fd7d 	bl	80035b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003abe:	42b7      	cmp	r7, r6
 8003ac0:	d1f9      	bne.n	8003ab6 <xTaskCreate+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 8003ac2:	4e27      	ldr	r6, [pc, #156]	; (8003b60 <xTaskCreate+0x160>)
 8003ac4:	0030      	movs	r0, r6
 8003ac6:	f7ff fd77 	bl	80035b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003aca:	4f26      	ldr	r7, [pc, #152]	; (8003b64 <xTaskCreate+0x164>)
 8003acc:	0038      	movs	r0, r7
 8003ace:	f7ff fd73 	bl	80035b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ad2:	4825      	ldr	r0, [pc, #148]	; (8003b68 <xTaskCreate+0x168>)
 8003ad4:	f7ff fd70 	bl	80035b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003ad8:	4824      	ldr	r0, [pc, #144]	; (8003b6c <xTaskCreate+0x16c>)
 8003ada:	f7ff fd6d 	bl	80035b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003ade:	4824      	ldr	r0, [pc, #144]	; (8003b70 <xTaskCreate+0x170>)
 8003ae0:	f7ff fd6a 	bl	80035b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <xTaskCreate+0x174>)
 8003ae6:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ae8:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <xTaskCreate+0x178>)
 8003aea:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8003aec:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <xTaskCreate+0x17c>)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	3301      	adds	r3, #1
 8003af2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <xTaskCreate+0x180>)
 8003af6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	428b      	cmp	r3, r1
 8003afc:	d900      	bls.n	8003b00 <xTaskCreate+0x100>
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	2014      	movs	r0, #20
 8003b02:	4358      	muls	r0, r3
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <xTaskCreate+0x15c>)
 8003b06:	9901      	ldr	r1, [sp, #4]
 8003b08:	1818      	adds	r0, r3, r0
 8003b0a:	f7ff fd63 	bl	80035d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003b0e:	f7ff fde3 	bl	80036d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003b12:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <xTaskCreate+0x184>)
			xReturn = pdPASS;
 8003b14:	2601      	movs	r6, #1
	if( xSchedulerRunning != pdFALSE )
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d006      	beq.n	8003b2a <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d201      	bcs.n	8003b2a <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 8003b26:	f7ff fdbf 	bl	80036a8 <vPortYield>
	}
 8003b2a:	0030      	movs	r0, r6
 8003b2c:	b005      	add	sp, #20
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8003b30:	0030      	movs	r0, r6
 8003b32:	f7ff fef5 	bl	8003920 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b36:	2601      	movs	r6, #1
 8003b38:	4276      	negs	r6, r6
 8003b3a:	e7f6      	b.n	8003b2a <xTaskCreate+0x12a>
			if( xSchedulerRunning == pdFALSE )
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <xTaskCreate+0x184>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1d3      	bne.n	8003aec <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b44:	682b      	ldr	r3, [r5, #0]
 8003b46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d8ce      	bhi.n	8003aec <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
 8003b4e:	602c      	str	r4, [r5, #0]
 8003b50:	e7cc      	b.n	8003aec <xTaskCreate+0xec>
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	20000ebc 	.word	0x20000ebc
 8003b58:	20000e24 	.word	0x20000e24
 8003b5c:	20000e30 	.word	0x20000e30
 8003b60:	20000ed4 	.word	0x20000ed4
 8003b64:	20000ee8 	.word	0x20000ee8
 8003b68:	20000f08 	.word	0x20000f08
 8003b6c:	20000f34 	.word	0x20000f34
 8003b70:	20000f20 	.word	0x20000f20
 8003b74:	20000e28 	.word	0x20000e28
 8003b78:	20000e2c 	.word	0x20000e2c
 8003b7c:	20000ecc 	.word	0x20000ecc
 8003b80:	20000ed0 	.word	0x20000ed0
 8003b84:	20000f1c 	.word	0x20000f1c

08003b88 <vTaskStartScheduler>:
{
 8003b88:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003b8a:	2400      	movs	r4, #0
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <vTaskStartScheduler+0x3c>)
 8003b8e:	9400      	str	r4, [sp, #0]
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	0023      	movs	r3, r4
 8003b96:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <vTaskStartScheduler+0x40>)
 8003b98:	480c      	ldr	r0, [pc, #48]	; (8003bcc <vTaskStartScheduler+0x44>)
 8003b9a:	f7ff ff31 	bl	8003a00 <xTaskCreate>
	if( xReturn == pdPASS )
 8003b9e:	2801      	cmp	r0, #1
 8003ba0:	d10b      	bne.n	8003bba <vTaskStartScheduler+0x32>
		portDISABLE_INTERRUPTS();
 8003ba2:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <vTaskStartScheduler+0x48>)
 8003ba8:	4252      	negs	r2, r2
 8003baa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <vTaskStartScheduler+0x4c>)
 8003bae:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <vTaskStartScheduler+0x50>)
 8003bb2:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003bb4:	f7ff fdf4 	bl	80037a0 <xPortStartScheduler>
}
 8003bb8:	bd13      	pop	{r0, r1, r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d1fc      	bne.n	8003bb8 <vTaskStartScheduler+0x30>
 8003bbe:	b672      	cpsid	i
 8003bc0:	e7fe      	b.n	8003bc0 <vTaskStartScheduler+0x38>
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	20000efc 	.word	0x20000efc
 8003bc8:	08004dff 	.word	0x08004dff
 8003bcc:	08003ded 	.word	0x08003ded
 8003bd0:	20000f00 	.word	0x20000f00
 8003bd4:	20000f1c 	.word	0x20000f1c
 8003bd8:	20000f48 	.word	0x20000f48

08003bdc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003bdc:	4a02      	ldr	r2, [pc, #8]	; (8003be8 <vTaskSuspendAll+0xc>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	4770      	bx	lr
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20000ec8 	.word	0x20000ec8

08003bec <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bec:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <xTaskIncrementTick+0xd0>)
{
 8003bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d135      	bne.n	8003c62 <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003bf6:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <xTaskIncrementTick+0xd4>)
 8003bf8:	681c      	ldr	r4, [r3, #0]
 8003bfa:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003bfc:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003bfe:	2c00      	cmp	r4, #0
 8003c00:	d111      	bne.n	8003c26 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <xTaskIncrementTick+0xd8>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	d001      	beq.n	8003c10 <xTaskIncrementTick+0x24>
 8003c0c:	b672      	cpsid	i
 8003c0e:	e7fe      	b.n	8003c0e <xTaskIncrementTick+0x22>
 8003c10:	4a2d      	ldr	r2, [pc, #180]	; (8003cc8 <xTaskIncrementTick+0xdc>)
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	6810      	ldr	r0, [r2, #0]
 8003c16:	6018      	str	r0, [r3, #0]
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	; (8003ccc <xTaskIncrementTick+0xe0>)
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	f7ff fea1 	bl	8003968 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c26:	4f2a      	ldr	r7, [pc, #168]	; (8003cd0 <xTaskIncrementTick+0xe4>)
BaseType_t xSwitchRequired = pdFALSE;
 8003c28:	2600      	movs	r6, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	429c      	cmp	r4, r3
 8003c2e:	d307      	bcc.n	8003c40 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <xTaskIncrementTick+0xd8>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	d119      	bne.n	8003c6e <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	425b      	negs	r3, r3
 8003c3e:	603b      	str	r3, [r7, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <xTaskIncrementTick+0xe8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	2314      	movs	r3, #20
 8003c48:	4353      	muls	r3, r2
 8003c4a:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <xTaskIncrementTick+0xec>)
 8003c4c:	58d3      	ldr	r3, [r2, r3]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d900      	bls.n	8003c54 <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
 8003c52:	2601      	movs	r6, #1
		if( xYieldPending != pdFALSE )
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <xTaskIncrementTick+0xf0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d000      	beq.n	8003c5e <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
 8003c5c:	2601      	movs	r6, #1
}
 8003c5e:	0030      	movs	r0, r6
 8003c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <xTaskIncrementTick+0xf4>)
BaseType_t xSwitchRequired = pdFALSE;
 8003c64:	2600      	movs	r6, #0
		++uxPendedTicks;
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	e7f2      	b.n	8003c54 <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c74:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8003c76:	429c      	cmp	r4, r3
 8003c78:	d3e1      	bcc.n	8003c3e <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7a:	1d2b      	adds	r3, r5, #4
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	f7ff fccb 	bl	800361a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c84:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8a:	0028      	movs	r0, r5
 8003c8c:	3018      	adds	r0, #24
 8003c8e:	f7ff fcc4 	bl	800361a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <xTaskIncrementTick+0xf8>)
 8003c94:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4290      	cmp	r0, r2
 8003c9a:	d900      	bls.n	8003c9e <xTaskIncrementTick+0xb2>
 8003c9c:	6018      	str	r0, [r3, #0]
 8003c9e:	2314      	movs	r3, #20
 8003ca0:	4358      	muls	r0, r3
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <xTaskIncrementTick+0xec>)
 8003ca4:	1d29      	adds	r1, r5, #4
 8003ca6:	1818      	adds	r0, r3, r0
 8003ca8:	f7ff fc94 	bl	80035d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <xTaskIncrementTick+0xe8>)
 8003cae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3bb      	bcc.n	8003c30 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
 8003cb8:	2601      	movs	r6, #1
 8003cba:	e7b9      	b.n	8003c30 <xTaskIncrementTick+0x44>
 8003cbc:	20000ec8 	.word	0x20000ec8
 8003cc0:	20000f48 	.word	0x20000f48
 8003cc4:	20000e28 	.word	0x20000e28
 8003cc8:	20000e2c 	.word	0x20000e2c
 8003ccc:	20000f04 	.word	0x20000f04
 8003cd0:	20000f00 	.word	0x20000f00
 8003cd4:	20000e24 	.word	0x20000e24
 8003cd8:	20000e30 	.word	0x20000e30
 8003cdc:	20000f4c 	.word	0x20000f4c
 8003ce0:	20000ec4 	.word	0x20000ec4
 8003ce4:	20000ed0 	.word	0x20000ed0

08003ce8 <xTaskResumeAll>:
{
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8003cea:	4c2b      	ldr	r4, [pc, #172]	; (8003d98 <xTaskResumeAll+0xb0>)
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <xTaskResumeAll+0xe>
 8003cf2:	b672      	cpsid	i
 8003cf4:	e7fe      	b.n	8003cf4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8003cf6:	f7ff fce3 	bl	80036c0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d00:	6824      	ldr	r4, [r4, #0]
 8003d02:	2c00      	cmp	r4, #0
 8003d04:	d004      	beq.n	8003d10 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8003d06:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003d08:	f7ff fce6 	bl	80036d8 <vPortExitCritical>
}
 8003d0c:	0020      	movs	r0, r4
 8003d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <xTaskResumeAll+0xb4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f6      	beq.n	8003d06 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8003d18:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 8003d1a:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <xTaskResumeAll+0xb8>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d11a      	bne.n	8003d5a <xTaskResumeAll+0x72>
				if( pxTCB != NULL )
 8003d24:	2c00      	cmp	r4, #0
 8003d26:	d001      	beq.n	8003d2c <xTaskResumeAll+0x44>
					prvResetNextTaskUnblockTime();
 8003d28:	f7ff fe1e 	bl	8003968 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d2c:	4d1d      	ldr	r5, [pc, #116]	; (8003da4 <xTaskResumeAll+0xbc>)
 8003d2e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d30:	2c00      	cmp	r4, #0
 8003d32:	d00a      	beq.n	8003d4a <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8003d34:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003d36:	f7ff ff59 	bl	8003bec <xTaskIncrementTick>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d001      	beq.n	8003d42 <xTaskResumeAll+0x5a>
								xYieldPending = pdTRUE;
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <xTaskResumeAll+0xc0>)
 8003d40:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8003d42:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d1f6      	bne.n	8003d36 <xTaskResumeAll+0x4e>
						uxPendedTicks = 0;
 8003d48:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003d4a:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <xTaskResumeAll+0xc0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0d9      	beq.n	8003d06 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8003d52:	f7ff fca9 	bl	80036a8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8003d56:	2401      	movs	r4, #1
 8003d58:	e7d6      	b.n	8003d08 <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d5e:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d60:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d62:	3018      	adds	r0, #24
 8003d64:	f7ff fc59 	bl	800361a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d68:	0028      	movs	r0, r5
 8003d6a:	f7ff fc56 	bl	800361a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xTaskResumeAll+0xc4>)
 8003d70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4290      	cmp	r0, r2
 8003d76:	d900      	bls.n	8003d7a <xTaskResumeAll+0x92>
 8003d78:	6018      	str	r0, [r3, #0]
 8003d7a:	4370      	muls	r0, r6
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <xTaskResumeAll+0xc8>)
 8003d7e:	0029      	movs	r1, r5
 8003d80:	1818      	adds	r0, r3, r0
 8003d82:	f7ff fc27 	bl	80035d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <xTaskResumeAll+0xcc>)
 8003d88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3c4      	bcc.n	8003d1c <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <xTaskResumeAll+0xc0>)
 8003d94:	601f      	str	r7, [r3, #0]
 8003d96:	e7c1      	b.n	8003d1c <xTaskResumeAll+0x34>
 8003d98:	20000ec8 	.word	0x20000ec8
 8003d9c:	20000ebc 	.word	0x20000ebc
 8003da0:	20000f08 	.word	0x20000f08
 8003da4:	20000ec4 	.word	0x20000ec4
 8003da8:	20000f4c 	.word	0x20000f4c
 8003dac:	20000ed0 	.word	0x20000ed0
 8003db0:	20000e30 	.word	0x20000e30
 8003db4:	20000e24 	.word	0x20000e24

08003db8 <vTaskDelay>:
	{
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dbc:	d102      	bne.n	8003dc4 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8003dbe:	f7ff fc73 	bl	80036a8 <vPortYield>
	}
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <vTaskDelay+0x30>)
 8003dc6:	681d      	ldr	r5, [r3, #0]
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	d001      	beq.n	8003dd0 <vTaskDelay+0x18>
 8003dcc:	b672      	cpsid	i
 8003dce:	e7fe      	b.n	8003dce <vTaskDelay+0x16>
			vTaskSuspendAll();
 8003dd0:	f7ff ff04 	bl	8003bdc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dd4:	0029      	movs	r1, r5
 8003dd6:	0020      	movs	r0, r4
 8003dd8:	f7ff fdda 	bl	8003990 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003ddc:	f7ff ff84 	bl	8003ce8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d1ee      	bne.n	8003dc2 <vTaskDelay+0xa>
 8003de4:	e7eb      	b.n	8003dbe <vTaskDelay+0x6>
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000ec8 	.word	0x20000ec8

08003dec <prvIdleTask>:
{
 8003dec:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dee:	4c15      	ldr	r4, [pc, #84]	; (8003e44 <prvIdleTask+0x58>)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <prvIdleTask+0x5c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d9f7      	bls.n	8003dee <prvIdleTask+0x2>
				taskYIELD();
 8003dfe:	f7ff fc53 	bl	80036a8 <vPortYield>
 8003e02:	e7f4      	b.n	8003dee <prvIdleTask+0x2>
			vTaskSuspendAll();
 8003e04:	f7ff feea 	bl	8003bdc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003e08:	4d10      	ldr	r5, [pc, #64]	; (8003e4c <prvIdleTask+0x60>)
 8003e0a:	682e      	ldr	r6, [r5, #0]
			( void ) xTaskResumeAll();
 8003e0c:	f7ff ff6c 	bl	8003ce8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003e10:	2e00      	cmp	r6, #0
 8003e12:	d0ec      	beq.n	8003dee <prvIdleTask+0x2>
				taskENTER_CRITICAL();
 8003e14:	f7ff fc54 	bl	80036c0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e18:	68eb      	ldr	r3, [r5, #12]
 8003e1a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e1c:	1d28      	adds	r0, r5, #4
 8003e1e:	f7ff fbfc 	bl	800361a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <prvIdleTask+0x64>)
 8003e24:	6813      	ldr	r3, [r2, #0]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003e30:	f7ff fc52 	bl	80036d8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003e34:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003e36:	f7ff fd73 	bl	8003920 <vPortFree>
			vPortFree( pxTCB );
 8003e3a:	0028      	movs	r0, r5
 8003e3c:	f7ff fd70 	bl	8003920 <vPortFree>
 8003e40:	e7d5      	b.n	8003dee <prvIdleTask+0x2>
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	20000ec0 	.word	0x20000ec0
 8003e48:	20000e30 	.word	0x20000e30
 8003e4c:	20000f34 	.word	0x20000f34
 8003e50:	20000ebc 	.word	0x20000ebc

08003e54 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e54:	4b15      	ldr	r3, [pc, #84]	; (8003eac <vTaskSwitchContext+0x58>)
{
 8003e56:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <vTaskSwitchContext+0x5c>)
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	d002      	beq.n	8003e66 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
}
 8003e64:	bd30      	pop	{r4, r5, pc}
 8003e66:	2414      	movs	r4, #20
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e68:	4812      	ldr	r0, [pc, #72]	; (8003eb4 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 8003e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e6c:	6802      	ldr	r2, [r0, #0]
 8003e6e:	4912      	ldr	r1, [pc, #72]	; (8003eb8 <vTaskSwitchContext+0x64>)
 8003e70:	0023      	movs	r3, r4
 8003e72:	4353      	muls	r3, r2
 8003e74:	585d      	ldr	r5, [r3, r1]
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	d012      	beq.n	8003ea0 <vTaskSwitchContext+0x4c>
 8003e7a:	18cc      	adds	r4, r1, r3
 8003e7c:	6865      	ldr	r5, [r4, #4]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	686d      	ldr	r5, [r5, #4]
 8003e82:	18cb      	adds	r3, r1, r3
 8003e84:	6065      	str	r5, [r4, #4]
 8003e86:	429d      	cmp	r5, r3
 8003e88:	d101      	bne.n	8003e8e <vTaskSwitchContext+0x3a>
 8003e8a:	686b      	ldr	r3, [r5, #4]
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	2314      	movs	r3, #20
 8003e90:	4353      	muls	r3, r2
 8003e92:	18c9      	adds	r1, r1, r3
 8003e94:	684b      	ldr	r3, [r1, #4]
 8003e96:	68d9      	ldr	r1, [r3, #12]
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <vTaskSwitchContext+0x68>)
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	6002      	str	r2, [r0, #0]
}
 8003e9e:	e7e1      	b.n	8003e64 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	d101      	bne.n	8003ea8 <vTaskSwitchContext+0x54>
 8003ea4:	b672      	cpsid	i
 8003ea6:	e7fe      	b.n	8003ea6 <vTaskSwitchContext+0x52>
 8003ea8:	3a01      	subs	r2, #1
 8003eaa:	e7e1      	b.n	8003e70 <vTaskSwitchContext+0x1c>
 8003eac:	20000ec8 	.word	0x20000ec8
 8003eb0:	20000f4c 	.word	0x20000f4c
 8003eb4:	20000ed0 	.word	0x20000ed0
 8003eb8:	20000e30 	.word	0x20000e30
 8003ebc:	20000e24 	.word	0x20000e24

08003ec0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003ec0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003ec2:	4c11      	ldr	r4, [pc, #68]	; (8003f08 <MX_USB_DEVICE_Init+0x48>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4911      	ldr	r1, [pc, #68]	; (8003f0c <MX_USB_DEVICE_Init+0x4c>)
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f7fe ffe9 	bl	8002ea0 <USBD_Init>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8003ed2:	f7fc fc53 	bl	800077c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003ed6:	490e      	ldr	r1, [pc, #56]	; (8003f10 <MX_USB_DEVICE_Init+0x50>)
 8003ed8:	0020      	movs	r0, r4
 8003eda:	f7fe fffb 	bl	8002ed4 <USBD_RegisterClass>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8003ee2:	f7fc fc4b 	bl	800077c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003ee6:	490b      	ldr	r1, [pc, #44]	; (8003f14 <MX_USB_DEVICE_Init+0x54>)
 8003ee8:	0020      	movs	r0, r4
 8003eea:	f7fe ff89 	bl	8002e00 <USBD_CDC_RegisterInterface>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8003ef2:	f7fc fc43 	bl	800077c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	f7fe fff5 	bl	8002ee6 <USBD_Start>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d001      	beq.n	8003f04 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8003f00:	f7fc fc3c 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003f04:	bd10      	pop	{r4, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	200012f4 	.word	0x200012f4
 8003f0c:	20000134 	.word	0x20000134
 8003f10:	20000010 	.word	0x20000010
 8003f14:	20000124 	.word	0x20000124

08003f18 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003f18:	2000      	movs	r0, #0
 8003f1a:	4770      	bx	lr

08003f1c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	4770      	bx	lr

08003f20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003f20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003f22:	4c05      	ldr	r4, [pc, #20]	; (8003f38 <CDC_Receive_FS+0x18>)
{
 8003f24:	0001      	movs	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003f26:	0020      	movs	r0, r4
 8003f28:	f7fe ff7e 	bl	8002e28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003f2c:	0020      	movs	r0, r4
 8003f2e:	f7fe ff9d 	bl	8002e6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003f32:	2000      	movs	r0, #0
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	200012f4 	.word	0x200012f4

08003f3c <CDC_Init_FS>:
{
 8003f3c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003f3e:	4c06      	ldr	r4, [pc, #24]	; (8003f58 <CDC_Init_FS+0x1c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	4906      	ldr	r1, [pc, #24]	; (8003f5c <CDC_Init_FS+0x20>)
 8003f44:	0020      	movs	r0, r4
 8003f46:	f7fe ff64 	bl	8002e12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003f4a:	4905      	ldr	r1, [pc, #20]	; (8003f60 <CDC_Init_FS+0x24>)
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f7fe ff6b 	bl	8002e28 <USBD_CDC_SetRxBuffer>
}
 8003f52:	2000      	movs	r0, #0
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	200012f4 	.word	0x200012f4
 8003f5c:	20001900 	.word	0x20001900
 8003f60:	20001518 	.word	0x20001518

08003f64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003f64:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003f66:	2186      	movs	r1, #134	; 0x86
{
 8003f68:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003f6a:	4c08      	ldr	r4, [pc, #32]	; (8003f8c <CDC_Transmit_FS+0x28>)
 8003f6c:	0089      	lsls	r1, r1, #2
{
 8003f6e:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003f70:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 8003f72:	3904      	subs	r1, #4
 8003f74:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 8003f76:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8003f78:	2900      	cmp	r1, #0
 8003f7a:	d106      	bne.n	8003f8a <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	0020      	movs	r0, r4
 8003f80:	f7fe ff47 	bl	8002e12 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003f84:	0020      	movs	r0, r4
 8003f86:	f7fe ff56 	bl	8002e36 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	200012f4 	.word	0x200012f4

08003f90 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003f90:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003f92:	4801      	ldr	r0, [pc, #4]	; (8003f98 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003f94:	800b      	strh	r3, [r1, #0]
}
 8003f96:	4770      	bx	lr
 8003f98:	20000150 	.word	0x20000150

08003f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003f9c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003f9e:	4801      	ldr	r0, [pc, #4]	; (8003fa4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003fa0:	800b      	strh	r3, [r1, #0]
}
 8003fa2:	4770      	bx	lr
 8003fa4:	20000164 	.word	0x20000164

08003fa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003fa8:	b510      	push	{r4, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003faa:	2400      	movs	r4, #0
 8003fac:	0052      	lsls	r2, r2, #1
 8003fae:	188a      	adds	r2, r1, r2
  for (idx = 0; idx < len; idx++)
 8003fb0:	4291      	cmp	r1, r2
 8003fb2:	d100      	bne.n	8003fb6 <IntToUnicode+0xe>
  }
}
 8003fb4:	bd10      	pop	{r4, pc}
    if (((value >> 28)) < 0xA)
 8003fb6:	0f03      	lsrs	r3, r0, #28
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d805      	bhi.n	8003fc8 <IntToUnicode+0x20>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003fbc:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fbe:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8003fc0:	704c      	strb	r4, [r1, #1]
    value = value << 4;
 8003fc2:	0100      	lsls	r0, r0, #4
 8003fc4:	3102      	adds	r1, #2
 8003fc6:	e7f3      	b.n	8003fb0 <IntToUnicode+0x8>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003fc8:	3337      	adds	r3, #55	; 0x37
 8003fca:	e7f8      	b.n	8003fbe <IntToUnicode+0x16>

08003fcc <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003fcc:	231a      	movs	r3, #26
{
 8003fce:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003fd0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <USBD_FS_SerialStrDescriptor+0x34>)
 8003fd4:	4c0b      	ldr	r4, [pc, #44]	; (8004004 <USBD_FS_SerialStrDescriptor+0x38>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d00b      	beq.n	8003ffa <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003fe4:	1ca1      	adds	r1, r4, #2
 8003fe6:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003fe8:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003fea:	f7ff ffdd 	bl	8003fa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003fee:	0021      	movs	r1, r4
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	3112      	adds	r1, #18
 8003ff4:	0028      	movs	r0, r5
 8003ff6:	f7ff ffd7 	bl	8003fa8 <IntToUnicode>
}
 8003ffa:	0020      	movs	r0, r4
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	1ffff7ac 	.word	0x1ffff7ac
 8004004:	20000168 	.word	0x20000168
 8004008:	1ffff7b4 	.word	0x1ffff7b4
 800400c:	1ffff7b0 	.word	0x1ffff7b0

08004010 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004010:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004012:	4c04      	ldr	r4, [pc, #16]	; (8004024 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8004014:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004016:	4804      	ldr	r0, [pc, #16]	; (8004028 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004018:	0021      	movs	r1, r4
 800401a:	f7ff fa45 	bl	80034a8 <USBD_GetString>
}
 800401e:	0020      	movs	r0, r4
 8004020:	bd10      	pop	{r4, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	20001ce8 	.word	0x20001ce8
 8004028:	08004e1d 	.word	0x08004e1d

0800402c <USBD_FS_ProductStrDescriptor>:
{
 800402c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800402e:	4c04      	ldr	r4, [pc, #16]	; (8004040 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8004030:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004032:	4804      	ldr	r0, [pc, #16]	; (8004044 <USBD_FS_ProductStrDescriptor+0x18>)
 8004034:	0021      	movs	r1, r4
 8004036:	f7ff fa37 	bl	80034a8 <USBD_GetString>
}
 800403a:	0020      	movs	r0, r4
 800403c:	bd10      	pop	{r4, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	20001ce8 	.word	0x20001ce8
 8004044:	08004e30 	.word	0x08004e30

08004048 <USBD_FS_ConfigStrDescriptor>:
{
 8004048:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800404a:	4c04      	ldr	r4, [pc, #16]	; (800405c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800404c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800404e:	4804      	ldr	r0, [pc, #16]	; (8004060 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004050:	0021      	movs	r1, r4
 8004052:	f7ff fa29 	bl	80034a8 <USBD_GetString>
}
 8004056:	0020      	movs	r0, r4
 8004058:	bd10      	pop	{r4, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	20001ce8 	.word	0x20001ce8
 8004060:	08004e04 	.word	0x08004e04

08004064 <USBD_FS_InterfaceStrDescriptor>:
{
 8004064:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004066:	4c04      	ldr	r4, [pc, #16]	; (8004078 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8004068:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800406a:	4804      	ldr	r0, [pc, #16]	; (800407c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800406c:	0021      	movs	r1, r4
 800406e:	f7ff fa1b 	bl	80034a8 <USBD_GetString>
}
 8004072:	0020      	movs	r0, r4
 8004074:	bd10      	pop	{r4, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20001ce8 	.word	0x20001ce8
 800407c:	08004e0f 	.word	0x08004e0f

08004080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004080:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_PCD_MspInit+0x30>)
 8004084:	6802      	ldr	r2, [r0, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d111      	bne.n	80040ae <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800408a:	2080      	movs	r0, #128	; 0x80
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <HAL_PCD_MspInit+0x34>)
 800408e:	0400      	lsls	r0, r0, #16
 8004090:	69d1      	ldr	r1, [r2, #28]
 8004092:	4301      	orrs	r1, r0
 8004094:	61d1      	str	r1, [r2, #28]
 8004096:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 8004098:	2103      	movs	r1, #3
    __HAL_RCC_USB_CLK_ENABLE();
 800409a:	4003      	ands	r3, r0
 800409c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 800409e:	201f      	movs	r0, #31
 80040a0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80040a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 80040a4:	f7fc fcf0 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80040a8:	201f      	movs	r0, #31
 80040aa:	f7fc fd1d 	bl	8000ae8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80040ae:	bd07      	pop	{r0, r1, r2, pc}
 80040b0:	40005c00 	.word	0x40005c00
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80040b8:	0001      	movs	r1, r0
 80040ba:	2387      	movs	r3, #135	; 0x87
{
 80040bc:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	31ed      	adds	r1, #237	; 0xed
 80040c2:	31ff      	adds	r1, #255	; 0xff
 80040c4:	58c0      	ldr	r0, [r0, r3]
 80040c6:	f7fe ff29 	bl	8002f1c <USBD_LL_SetupStage>
}
 80040ca:	bd10      	pop	{r4, pc}

080040cc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80040cc:	231c      	movs	r3, #28
 80040ce:	434b      	muls	r3, r1
 80040d0:	18c3      	adds	r3, r0, r3
 80040d2:	33fc      	adds	r3, #252	; 0xfc
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	2387      	movs	r3, #135	; 0x87
{
 80040d8:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	58c0      	ldr	r0, [r0, r3]
 80040de:	f7fe ff51 	bl	8002f84 <USBD_LL_DataOutStage>
}
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80040e4:	231c      	movs	r3, #28
 80040e6:	434b      	muls	r3, r1
 80040e8:	18c3      	adds	r3, r0, r3
 80040ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ec:	2387      	movs	r3, #135	; 0x87
{
 80040ee:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	58c0      	ldr	r0, [r0, r3]
 80040f4:	f7fe ff80 	bl	8002ff8 <USBD_LL_DataInStage>
}
 80040f8:	bd10      	pop	{r4, pc}

080040fa <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80040fa:	2387      	movs	r3, #135	; 0x87
{
 80040fc:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	58c0      	ldr	r0, [r0, r3]
 8004102:	f7ff f807 	bl	8003114 <USBD_LL_SOF>
}
 8004106:	bd10      	pop	{r4, pc}

08004108 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004108:	6883      	ldr	r3, [r0, #8]
{ 
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800410e:	2b02      	cmp	r3, #2
 8004110:	d001      	beq.n	8004116 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004112:	f7fc fb33 	bl	800077c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004116:	2587      	movs	r5, #135	; 0x87
 8004118:	00ad      	lsls	r5, r5, #2
 800411a:	2101      	movs	r1, #1
 800411c:	5960      	ldr	r0, [r4, r5]
 800411e:	f7fe ffe4 	bl	80030ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004122:	5960      	ldr	r0, [r4, r5]
 8004124:	f7fe ffbe 	bl	80030a4 <USBD_LL_Reset>
}
 8004128:	bd70      	pop	{r4, r5, r6, pc}
	...

0800412c <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800412c:	2387      	movs	r3, #135	; 0x87
{
 800412e:	b510      	push	{r4, lr}
 8004130:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	58c0      	ldr	r0, [r0, r3]
 8004136:	f7fe ffdb 	bl	80030f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800413a:	69a3      	ldr	r3, [r4, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004140:	2306      	movs	r3, #6
 8004142:	4a02      	ldr	r2, [pc, #8]	; (800414c <HAL_PCD_SuspendCallback+0x20>)
 8004144:	6911      	ldr	r1, [r2, #16]
 8004146:	430b      	orrs	r3, r1
 8004148:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800414a:	bd10      	pop	{r4, pc}
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8004150:	6983      	ldr	r3, [r0, #24]
{
 8004152:	b510      	push	{r4, lr}
 8004154:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800415a:	2106      	movs	r1, #6
 800415c:	4a05      	ldr	r2, [pc, #20]	; (8004174 <HAL_PCD_ResumeCallback+0x24>)
 800415e:	6913      	ldr	r3, [r2, #16]
 8004160:	438b      	bics	r3, r1
 8004162:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8004164:	f7fc faae 	bl	80006c4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004168:	2387      	movs	r3, #135	; 0x87
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	58e0      	ldr	r0, [r4, r3]
 800416e:	f7fe ffca 	bl	8003106 <USBD_LL_Resume>
}
 8004172:	bd10      	pop	{r4, pc}
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8004178:	2387      	movs	r3, #135	; 0x87
{
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 800417e:	481c      	ldr	r0, [pc, #112]	; (80041f0 <USBD_LL_Init+0x78>)
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8004186:	2488      	movs	r4, #136	; 0x88
  hpcd_USB_FS.Instance = USB;
 8004188:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800418a:	2308      	movs	r3, #8
 800418c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800418e:	3b06      	subs	r3, #6
 8004190:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004192:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004194:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8004196:	00a4      	lsls	r4, r4, #2
 8004198:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800419a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800419c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800419e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80041a0:	f7fc fe26 	bl	8000df0 <HAL_PCD_Init>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d001      	beq.n	80041ac <USBD_LL_Init+0x34>
    Error_Handler( );
 80041a8:	f7fc fae8 	bl	800077c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80041ac:	2200      	movs	r2, #0
 80041ae:	5928      	ldr	r0, [r5, r4]
 80041b0:	0011      	movs	r1, r2
 80041b2:	2318      	movs	r3, #24
 80041b4:	f7fd fd0a 	bl	8001bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80041b8:	5928      	ldr	r0, [r5, r4]
 80041ba:	2358      	movs	r3, #88	; 0x58
 80041bc:	2200      	movs	r2, #0
 80041be:	2180      	movs	r1, #128	; 0x80
 80041c0:	f7fd fd04 	bl	8001bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80041c4:	5928      	ldr	r0, [r5, r4]
 80041c6:	23c0      	movs	r3, #192	; 0xc0
 80041c8:	2200      	movs	r2, #0
 80041ca:	2181      	movs	r1, #129	; 0x81
 80041cc:	f7fd fcfe 	bl	8001bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80041d0:	2388      	movs	r3, #136	; 0x88
 80041d2:	5928      	ldr	r0, [r5, r4]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2200      	movs	r2, #0
 80041d8:	2101      	movs	r1, #1
 80041da:	f7fd fcf7 	bl	8001bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	5928      	ldr	r0, [r5, r4]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2200      	movs	r2, #0
 80041e6:	2182      	movs	r1, #130	; 0x82
 80041e8:	f7fd fcf0 	bl	8001bcc <HAL_PCDEx_PMAConfig>
}
 80041ec:	2000      	movs	r0, #0
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	20001ee8 	.word	0x20001ee8
 80041f4:	40005c00 	.word	0x40005c00

080041f8 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 80041f8:	2388      	movs	r3, #136	; 0x88
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	58c0      	ldr	r0, [r0, r3]
{
 80041fe:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004200:	f7fc fe3c 	bl	8000e7c <HAL_PCD_Start>
 8004204:	2302      	movs	r3, #2
 8004206:	2803      	cmp	r0, #3
 8004208:	d801      	bhi.n	800420e <USBD_LL_Start+0x16>
 800420a:	4b02      	ldr	r3, [pc, #8]	; (8004214 <USBD_LL_Start+0x1c>)
 800420c:	5c1b      	ldrb	r3, [r3, r0]
}
 800420e:	0018      	movs	r0, r3
 8004210:	bd10      	pop	{r4, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	08004e46 	.word	0x08004e46

08004218 <USBD_LL_OpenEP>:
{
 8004218:	b510      	push	{r4, lr}
 800421a:	0014      	movs	r4, r2
 800421c:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800421e:	0023      	movs	r3, r4
 8004220:	2488      	movs	r4, #136	; 0x88
 8004222:	00a4      	lsls	r4, r4, #2
 8004224:	5900      	ldr	r0, [r0, r4]
 8004226:	f7fc fe49 	bl	8000ebc <HAL_PCD_EP_Open>
 800422a:	2302      	movs	r3, #2
 800422c:	2803      	cmp	r0, #3
 800422e:	d801      	bhi.n	8004234 <USBD_LL_OpenEP+0x1c>
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <USBD_LL_OpenEP+0x20>)
 8004232:	5c1b      	ldrb	r3, [r3, r0]
}
 8004234:	0018      	movs	r0, r3
 8004236:	bd10      	pop	{r4, pc}
 8004238:	08004e46 	.word	0x08004e46

0800423c <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800423c:	2388      	movs	r3, #136	; 0x88
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	58c0      	ldr	r0, [r0, r3]
{
 8004242:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004244:	f7fc ff8c 	bl	8001160 <HAL_PCD_EP_Close>
 8004248:	2302      	movs	r3, #2
 800424a:	2803      	cmp	r0, #3
 800424c:	d801      	bhi.n	8004252 <USBD_LL_CloseEP+0x16>
 800424e:	4b02      	ldr	r3, [pc, #8]	; (8004258 <USBD_LL_CloseEP+0x1c>)
 8004250:	5c1b      	ldrb	r3, [r3, r0]
}
 8004252:	0018      	movs	r0, r3
 8004254:	bd10      	pop	{r4, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	08004e46 	.word	0x08004e46

0800425c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800425c:	2388      	movs	r3, #136	; 0x88
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	58c0      	ldr	r0, [r0, r3]
{
 8004262:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004264:	f7fd f8c6 	bl	80013f4 <HAL_PCD_EP_SetStall>
 8004268:	2302      	movs	r3, #2
 800426a:	2803      	cmp	r0, #3
 800426c:	d801      	bhi.n	8004272 <USBD_LL_StallEP+0x16>
 800426e:	4b02      	ldr	r3, [pc, #8]	; (8004278 <USBD_LL_StallEP+0x1c>)
 8004270:	5c1b      	ldrb	r3, [r3, r0]
}
 8004272:	0018      	movs	r0, r3
 8004274:	bd10      	pop	{r4, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	08004e46 	.word	0x08004e46

0800427c <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800427c:	2388      	movs	r3, #136	; 0x88
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	58c0      	ldr	r0, [r0, r3]
{
 8004282:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004284:	f7fd f900 	bl	8001488 <HAL_PCD_EP_ClrStall>
 8004288:	2302      	movs	r3, #2
 800428a:	2803      	cmp	r0, #3
 800428c:	d801      	bhi.n	8004292 <USBD_LL_ClearStallEP+0x16>
 800428e:	4b02      	ldr	r3, [pc, #8]	; (8004298 <USBD_LL_ClearStallEP+0x1c>)
 8004290:	5c1b      	ldrb	r3, [r3, r0]
}
 8004292:	0018      	movs	r0, r3
 8004294:	bd10      	pop	{r4, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	08004e46 	.word	0x08004e46

0800429c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800429c:	2388      	movs	r3, #136	; 0x88
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80042a2:	b248      	sxtb	r0, r1
 80042a4:	221c      	movs	r2, #28
 80042a6:	2800      	cmp	r0, #0
 80042a8:	da06      	bge.n	80042b8 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80042aa:	207f      	movs	r0, #127	; 0x7f
 80042ac:	4001      	ands	r1, r0
 80042ae:	434a      	muls	r2, r1
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	332a      	adds	r3, #42	; 0x2a
 80042b4:	7818      	ldrb	r0, [r3, #0]
}
 80042b6:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80042b8:	434a      	muls	r2, r1
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	33ff      	adds	r3, #255	; 0xff
 80042be:	7ad8      	ldrb	r0, [r3, #11]
 80042c0:	e7f9      	b.n	80042b6 <USBD_LL_IsStallEP+0x1a>
	...

080042c4 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80042c4:	2388      	movs	r3, #136	; 0x88
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	58c0      	ldr	r0, [r0, r3]
{
 80042ca:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80042cc:	f7fc fddf 	bl	8000e8e <HAL_PCD_SetAddress>
 80042d0:	2302      	movs	r3, #2
 80042d2:	2803      	cmp	r0, #3
 80042d4:	d801      	bhi.n	80042da <USBD_LL_SetUSBAddress+0x16>
 80042d6:	4b02      	ldr	r3, [pc, #8]	; (80042e0 <USBD_LL_SetUSBAddress+0x1c>)
 80042d8:	5c1b      	ldrb	r3, [r3, r0]
}
 80042da:	0018      	movs	r0, r3
 80042dc:	bd10      	pop	{r4, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	08004e46 	.word	0x08004e46

080042e4 <USBD_LL_Transmit>:
{
 80042e4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80042e6:	2488      	movs	r4, #136	; 0x88
 80042e8:	00a4      	lsls	r4, r4, #2
 80042ea:	5900      	ldr	r0, [r0, r4]
 80042ec:	f7fd f93a 	bl	8001564 <HAL_PCD_EP_Transmit>
 80042f0:	2302      	movs	r3, #2
 80042f2:	2803      	cmp	r0, #3
 80042f4:	d801      	bhi.n	80042fa <USBD_LL_Transmit+0x16>
 80042f6:	4b02      	ldr	r3, [pc, #8]	; (8004300 <USBD_LL_Transmit+0x1c>)
 80042f8:	5c1b      	ldrb	r3, [r3, r0]
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	08004e46 	.word	0x08004e46

08004304 <USBD_LL_PrepareReceive>:
{
 8004304:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004306:	2488      	movs	r4, #136	; 0x88
 8004308:	00a4      	lsls	r4, r4, #2
 800430a:	5900      	ldr	r0, [r0, r4]
 800430c:	f7fc ffc8 	bl	80012a0 <HAL_PCD_EP_Receive>
 8004310:	2302      	movs	r3, #2
 8004312:	2803      	cmp	r0, #3
 8004314:	d801      	bhi.n	800431a <USBD_LL_PrepareReceive+0x16>
 8004316:	4b02      	ldr	r3, [pc, #8]	; (8004320 <USBD_LL_PrepareReceive+0x1c>)
 8004318:	5c1b      	ldrb	r3, [r3, r0]
}
 800431a:	0018      	movs	r0, r3
 800431c:	bd10      	pop	{r4, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	08004e46 	.word	0x08004e46

08004324 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004324:	2388      	movs	r3, #136	; 0x88
{
 8004326:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	58c0      	ldr	r0, [r0, r3]
 800432c:	f7fd f858 	bl	80013e0 <HAL_PCD_EP_GetRxCount>
}
 8004330:	bd10      	pop	{r4, pc}
	...

08004334 <USBD_static_malloc>:
}
 8004334:	4800      	ldr	r0, [pc, #0]	; (8004338 <USBD_static_malloc+0x4>)
 8004336:	4770      	bx	lr
 8004338:	20000f50 	.word	0x20000f50

0800433c <USBD_static_free>:
}
 800433c:	4770      	bx	lr
	...

08004340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004342:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004344:	480d      	ldr	r0, [pc, #52]	; (800437c <LoopForever+0x6>)
  ldr r1, =_edata
 8004346:	490e      	ldr	r1, [pc, #56]	; (8004380 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004348:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <LoopForever+0xe>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800434c:	e002      	b.n	8004354 <LoopCopyDataInit>

0800434e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800434e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004352:	3304      	adds	r3, #4

08004354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004358:	d3f9      	bcc.n	800434e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435a:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <LoopForever+0x12>)
  ldr r4, =_ebss
 800435c:	4c0b      	ldr	r4, [pc, #44]	; (800438c <LoopForever+0x16>)
  movs r3, #0
 800435e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004360:	e001      	b.n	8004366 <LoopFillZerobss>

08004362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004364:	3204      	adds	r2, #4

08004366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004368:	d3fb      	bcc.n	8004362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800436a:	f7fc fa9f 	bl	80008ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800436e:	f000 f817 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004372:	f7fc f9e1 	bl	8000738 <main>

08004376 <LoopForever>:

LoopForever:
    b LoopForever
 8004376:	e7fe      	b.n	8004376 <LoopForever>
  ldr   r0, =_estack
 8004378:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800437c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004380:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004384:	08004e88 	.word	0x08004e88
  ldr r2, =_sbss
 8004388:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800438c:	2000210c 	.word	0x2000210c

08004390 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004390:	e7fe      	b.n	8004390 <ADC1_IRQHandler>
	...

08004394 <__errno>:
 8004394:	4b01      	ldr	r3, [pc, #4]	; (800439c <__errno+0x8>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	4770      	bx	lr
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000184 	.word	0x20000184

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	2600      	movs	r6, #0
 80043a4:	4d0c      	ldr	r5, [pc, #48]	; (80043d8 <__libc_init_array+0x38>)
 80043a6:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	2600      	movs	r6, #0
 80043b2:	f000 fc5b 	bl	8004c6c <_init>
 80043b6:	4d0a      	ldr	r5, [pc, #40]	; (80043e0 <__libc_init_array+0x40>)
 80043b8:	4c0a      	ldr	r4, [pc, #40]	; (80043e4 <__libc_init_array+0x44>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	00b3      	lsls	r3, r6, #2
 80043c6:	58eb      	ldr	r3, [r5, r3]
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	00b3      	lsls	r3, r6, #2
 80043d0:	58eb      	ldr	r3, [r5, r3]
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	08004e80 	.word	0x08004e80
 80043dc:	08004e80 	.word	0x08004e80
 80043e0:	08004e80 	.word	0x08004e80
 80043e4:	08004e84 	.word	0x08004e84

080043e8 <memcpy>:
 80043e8:	2300      	movs	r3, #0
 80043ea:	b510      	push	{r4, lr}
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d100      	bne.n	80043f2 <memcpy+0xa>
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	5ccc      	ldrb	r4, [r1, r3]
 80043f4:	54c4      	strb	r4, [r0, r3]
 80043f6:	3301      	adds	r3, #1
 80043f8:	e7f8      	b.n	80043ec <memcpy+0x4>

080043fa <memset>:
 80043fa:	0003      	movs	r3, r0
 80043fc:	1882      	adds	r2, r0, r2
 80043fe:	4293      	cmp	r3, r2
 8004400:	d100      	bne.n	8004404 <memset+0xa>
 8004402:	4770      	bx	lr
 8004404:	7019      	strb	r1, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	e7f9      	b.n	80043fe <memset+0x4>
	...

0800440c <siprintf>:
 800440c:	b40e      	push	{r1, r2, r3}
 800440e:	b510      	push	{r4, lr}
 8004410:	b09d      	sub	sp, #116	; 0x74
 8004412:	a902      	add	r1, sp, #8
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	6108      	str	r0, [r1, #16]
 8004418:	480b      	ldr	r0, [pc, #44]	; (8004448 <siprintf+0x3c>)
 800441a:	2482      	movs	r4, #130	; 0x82
 800441c:	6088      	str	r0, [r1, #8]
 800441e:	6148      	str	r0, [r1, #20]
 8004420:	2001      	movs	r0, #1
 8004422:	4240      	negs	r0, r0
 8004424:	ab1f      	add	r3, sp, #124	; 0x7c
 8004426:	81c8      	strh	r0, [r1, #14]
 8004428:	4808      	ldr	r0, [pc, #32]	; (800444c <siprintf+0x40>)
 800442a:	cb04      	ldmia	r3!, {r2}
 800442c:	00a4      	lsls	r4, r4, #2
 800442e:	6800      	ldr	r0, [r0, #0]
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	818c      	strh	r4, [r1, #12]
 8004434:	f000 f886 	bl	8004544 <_svfiprintf_r>
 8004438:	2300      	movs	r3, #0
 800443a:	9a02      	ldr	r2, [sp, #8]
 800443c:	7013      	strb	r3, [r2, #0]
 800443e:	b01d      	add	sp, #116	; 0x74
 8004440:	bc10      	pop	{r4}
 8004442:	bc08      	pop	{r3}
 8004444:	b003      	add	sp, #12
 8004446:	4718      	bx	r3
 8004448:	7fffffff 	.word	0x7fffffff
 800444c:	20000184 	.word	0x20000184

08004450 <strstr>:
 8004450:	b510      	push	{r4, lr}
 8004452:	0002      	movs	r2, r0
 8004454:	7800      	ldrb	r0, [r0, #0]
 8004456:	2800      	cmp	r0, #0
 8004458:	d104      	bne.n	8004464 <strstr+0x14>
 800445a:	7809      	ldrb	r1, [r1, #0]
 800445c:	2900      	cmp	r1, #0
 800445e:	d00d      	beq.n	800447c <strstr+0x2c>
 8004460:	bd10      	pop	{r4, pc}
 8004462:	3201      	adds	r2, #1
 8004464:	7810      	ldrb	r0, [r2, #0]
 8004466:	2800      	cmp	r0, #0
 8004468:	d0fa      	beq.n	8004460 <strstr+0x10>
 800446a:	2300      	movs	r3, #0
 800446c:	5cc8      	ldrb	r0, [r1, r3]
 800446e:	2800      	cmp	r0, #0
 8004470:	d004      	beq.n	800447c <strstr+0x2c>
 8004472:	5cd4      	ldrb	r4, [r2, r3]
 8004474:	4284      	cmp	r4, r0
 8004476:	d1f4      	bne.n	8004462 <strstr+0x12>
 8004478:	3301      	adds	r3, #1
 800447a:	e7f7      	b.n	800446c <strstr+0x1c>
 800447c:	0010      	movs	r0, r2
 800447e:	e7ef      	b.n	8004460 <strstr+0x10>

08004480 <__ssputs_r>:
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	688e      	ldr	r6, [r1, #8]
 8004484:	b085      	sub	sp, #20
 8004486:	0007      	movs	r7, r0
 8004488:	000c      	movs	r4, r1
 800448a:	9203      	str	r2, [sp, #12]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	429e      	cmp	r6, r3
 8004490:	d839      	bhi.n	8004506 <__ssputs_r+0x86>
 8004492:	2390      	movs	r3, #144	; 0x90
 8004494:	898a      	ldrh	r2, [r1, #12]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	421a      	tst	r2, r3
 800449a:	d034      	beq.n	8004506 <__ssputs_r+0x86>
 800449c:	2503      	movs	r5, #3
 800449e:	6909      	ldr	r1, [r1, #16]
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	1a5b      	subs	r3, r3, r1
 80044a4:	9302      	str	r3, [sp, #8]
 80044a6:	6963      	ldr	r3, [r4, #20]
 80044a8:	9802      	ldr	r0, [sp, #8]
 80044aa:	435d      	muls	r5, r3
 80044ac:	0feb      	lsrs	r3, r5, #31
 80044ae:	195d      	adds	r5, r3, r5
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	106d      	asrs	r5, r5, #1
 80044b4:	3301      	adds	r3, #1
 80044b6:	181b      	adds	r3, r3, r0
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	d900      	bls.n	80044be <__ssputs_r+0x3e>
 80044bc:	001d      	movs	r5, r3
 80044be:	0553      	lsls	r3, r2, #21
 80044c0:	d532      	bpl.n	8004528 <__ssputs_r+0xa8>
 80044c2:	0029      	movs	r1, r5
 80044c4:	0038      	movs	r0, r7
 80044c6:	f000 fb31 	bl	8004b2c <_malloc_r>
 80044ca:	1e06      	subs	r6, r0, #0
 80044cc:	d109      	bne.n	80044e2 <__ssputs_r+0x62>
 80044ce:	230c      	movs	r3, #12
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	2340      	movs	r3, #64	; 0x40
 80044d4:	2001      	movs	r0, #1
 80044d6:	89a2      	ldrh	r2, [r4, #12]
 80044d8:	4240      	negs	r0, r0
 80044da:	4313      	orrs	r3, r2
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	b005      	add	sp, #20
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e2:	9a02      	ldr	r2, [sp, #8]
 80044e4:	6921      	ldr	r1, [r4, #16]
 80044e6:	f7ff ff7f 	bl	80043e8 <memcpy>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <__ssputs_r+0xc0>)
 80044ee:	401a      	ands	r2, r3
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	4313      	orrs	r3, r2
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	9b02      	ldr	r3, [sp, #8]
 80044f8:	6126      	str	r6, [r4, #16]
 80044fa:	18f6      	adds	r6, r6, r3
 80044fc:	6026      	str	r6, [r4, #0]
 80044fe:	6165      	str	r5, [r4, #20]
 8004500:	9e01      	ldr	r6, [sp, #4]
 8004502:	1aed      	subs	r5, r5, r3
 8004504:	60a5      	str	r5, [r4, #8]
 8004506:	9b01      	ldr	r3, [sp, #4]
 8004508:	42b3      	cmp	r3, r6
 800450a:	d200      	bcs.n	800450e <__ssputs_r+0x8e>
 800450c:	001e      	movs	r6, r3
 800450e:	0032      	movs	r2, r6
 8004510:	9903      	ldr	r1, [sp, #12]
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	f000 faad 	bl	8004a72 <memmove>
 8004518:	68a3      	ldr	r3, [r4, #8]
 800451a:	2000      	movs	r0, #0
 800451c:	1b9b      	subs	r3, r3, r6
 800451e:	60a3      	str	r3, [r4, #8]
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	199e      	adds	r6, r3, r6
 8004524:	6026      	str	r6, [r4, #0]
 8004526:	e7da      	b.n	80044de <__ssputs_r+0x5e>
 8004528:	002a      	movs	r2, r5
 800452a:	0038      	movs	r0, r7
 800452c:	f000 fb5c 	bl	8004be8 <_realloc_r>
 8004530:	1e06      	subs	r6, r0, #0
 8004532:	d1e0      	bne.n	80044f6 <__ssputs_r+0x76>
 8004534:	6921      	ldr	r1, [r4, #16]
 8004536:	0038      	movs	r0, r7
 8004538:	f000 faae 	bl	8004a98 <_free_r>
 800453c:	e7c7      	b.n	80044ce <__ssputs_r+0x4e>
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	fffffb7f 	.word	0xfffffb7f

08004544 <_svfiprintf_r>:
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	b09f      	sub	sp, #124	; 0x7c
 8004548:	9002      	str	r0, [sp, #8]
 800454a:	9305      	str	r3, [sp, #20]
 800454c:	898b      	ldrh	r3, [r1, #12]
 800454e:	000f      	movs	r7, r1
 8004550:	0016      	movs	r6, r2
 8004552:	061b      	lsls	r3, r3, #24
 8004554:	d511      	bpl.n	800457a <_svfiprintf_r+0x36>
 8004556:	690b      	ldr	r3, [r1, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10e      	bne.n	800457a <_svfiprintf_r+0x36>
 800455c:	2140      	movs	r1, #64	; 0x40
 800455e:	f000 fae5 	bl	8004b2c <_malloc_r>
 8004562:	6038      	str	r0, [r7, #0]
 8004564:	6138      	str	r0, [r7, #16]
 8004566:	2800      	cmp	r0, #0
 8004568:	d105      	bne.n	8004576 <_svfiprintf_r+0x32>
 800456a:	230c      	movs	r3, #12
 800456c:	9a02      	ldr	r2, [sp, #8]
 800456e:	3801      	subs	r0, #1
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	b01f      	add	sp, #124	; 0x7c
 8004574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004576:	2340      	movs	r3, #64	; 0x40
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	2300      	movs	r3, #0
 800457c:	ad06      	add	r5, sp, #24
 800457e:	616b      	str	r3, [r5, #20]
 8004580:	3320      	adds	r3, #32
 8004582:	766b      	strb	r3, [r5, #25]
 8004584:	3310      	adds	r3, #16
 8004586:	76ab      	strb	r3, [r5, #26]
 8004588:	0034      	movs	r4, r6
 800458a:	7823      	ldrb	r3, [r4, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d147      	bne.n	8004620 <_svfiprintf_r+0xdc>
 8004590:	1ba3      	subs	r3, r4, r6
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	d00d      	beq.n	80045b2 <_svfiprintf_r+0x6e>
 8004596:	1ba3      	subs	r3, r4, r6
 8004598:	0032      	movs	r2, r6
 800459a:	0039      	movs	r1, r7
 800459c:	9802      	ldr	r0, [sp, #8]
 800459e:	f7ff ff6f 	bl	8004480 <__ssputs_r>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	d100      	bne.n	80045a8 <_svfiprintf_r+0x64>
 80045a6:	e0b5      	b.n	8004714 <_svfiprintf_r+0x1d0>
 80045a8:	696a      	ldr	r2, [r5, #20]
 80045aa:	9b04      	ldr	r3, [sp, #16]
 80045ac:	4694      	mov	ip, r2
 80045ae:	4463      	add	r3, ip
 80045b0:	616b      	str	r3, [r5, #20]
 80045b2:	7823      	ldrb	r3, [r4, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d100      	bne.n	80045ba <_svfiprintf_r+0x76>
 80045b8:	e0ac      	b.n	8004714 <_svfiprintf_r+0x1d0>
 80045ba:	2201      	movs	r2, #1
 80045bc:	2300      	movs	r3, #0
 80045be:	4252      	negs	r2, r2
 80045c0:	606a      	str	r2, [r5, #4]
 80045c2:	a902      	add	r1, sp, #8
 80045c4:	3254      	adds	r2, #84	; 0x54
 80045c6:	1852      	adds	r2, r2, r1
 80045c8:	3401      	adds	r4, #1
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	60eb      	str	r3, [r5, #12]
 80045ce:	60ab      	str	r3, [r5, #8]
 80045d0:	7013      	strb	r3, [r2, #0]
 80045d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80045d4:	4e58      	ldr	r6, [pc, #352]	; (8004738 <_svfiprintf_r+0x1f4>)
 80045d6:	2205      	movs	r2, #5
 80045d8:	7821      	ldrb	r1, [r4, #0]
 80045da:	0030      	movs	r0, r6
 80045dc:	f000 fa3e 	bl	8004a5c <memchr>
 80045e0:	1c62      	adds	r2, r4, #1
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d120      	bne.n	8004628 <_svfiprintf_r+0xe4>
 80045e6:	6829      	ldr	r1, [r5, #0]
 80045e8:	06cb      	lsls	r3, r1, #27
 80045ea:	d504      	bpl.n	80045f6 <_svfiprintf_r+0xb2>
 80045ec:	2353      	movs	r3, #83	; 0x53
 80045ee:	ae02      	add	r6, sp, #8
 80045f0:	3020      	adds	r0, #32
 80045f2:	199b      	adds	r3, r3, r6
 80045f4:	7018      	strb	r0, [r3, #0]
 80045f6:	070b      	lsls	r3, r1, #28
 80045f8:	d504      	bpl.n	8004604 <_svfiprintf_r+0xc0>
 80045fa:	2353      	movs	r3, #83	; 0x53
 80045fc:	202b      	movs	r0, #43	; 0x2b
 80045fe:	ae02      	add	r6, sp, #8
 8004600:	199b      	adds	r3, r3, r6
 8004602:	7018      	strb	r0, [r3, #0]
 8004604:	7823      	ldrb	r3, [r4, #0]
 8004606:	2b2a      	cmp	r3, #42	; 0x2a
 8004608:	d016      	beq.n	8004638 <_svfiprintf_r+0xf4>
 800460a:	2000      	movs	r0, #0
 800460c:	210a      	movs	r1, #10
 800460e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004610:	7822      	ldrb	r2, [r4, #0]
 8004612:	3a30      	subs	r2, #48	; 0x30
 8004614:	2a09      	cmp	r2, #9
 8004616:	d955      	bls.n	80046c4 <_svfiprintf_r+0x180>
 8004618:	2800      	cmp	r0, #0
 800461a:	d015      	beq.n	8004648 <_svfiprintf_r+0x104>
 800461c:	9309      	str	r3, [sp, #36]	; 0x24
 800461e:	e013      	b.n	8004648 <_svfiprintf_r+0x104>
 8004620:	2b25      	cmp	r3, #37	; 0x25
 8004622:	d0b5      	beq.n	8004590 <_svfiprintf_r+0x4c>
 8004624:	3401      	adds	r4, #1
 8004626:	e7b0      	b.n	800458a <_svfiprintf_r+0x46>
 8004628:	2301      	movs	r3, #1
 800462a:	1b80      	subs	r0, r0, r6
 800462c:	4083      	lsls	r3, r0
 800462e:	6829      	ldr	r1, [r5, #0]
 8004630:	0014      	movs	r4, r2
 8004632:	430b      	orrs	r3, r1
 8004634:	602b      	str	r3, [r5, #0]
 8004636:	e7cd      	b.n	80045d4 <_svfiprintf_r+0x90>
 8004638:	9b05      	ldr	r3, [sp, #20]
 800463a:	1d18      	adds	r0, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	9005      	str	r0, [sp, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db39      	blt.n	80046b8 <_svfiprintf_r+0x174>
 8004644:	9309      	str	r3, [sp, #36]	; 0x24
 8004646:	0014      	movs	r4, r2
 8004648:	7823      	ldrb	r3, [r4, #0]
 800464a:	2b2e      	cmp	r3, #46	; 0x2e
 800464c:	d10b      	bne.n	8004666 <_svfiprintf_r+0x122>
 800464e:	7863      	ldrb	r3, [r4, #1]
 8004650:	1c62      	adds	r2, r4, #1
 8004652:	2b2a      	cmp	r3, #42	; 0x2a
 8004654:	d13e      	bne.n	80046d4 <_svfiprintf_r+0x190>
 8004656:	9b05      	ldr	r3, [sp, #20]
 8004658:	3402      	adds	r4, #2
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	9205      	str	r2, [sp, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	db34      	blt.n	80046ce <_svfiprintf_r+0x18a>
 8004664:	9307      	str	r3, [sp, #28]
 8004666:	4e35      	ldr	r6, [pc, #212]	; (800473c <_svfiprintf_r+0x1f8>)
 8004668:	7821      	ldrb	r1, [r4, #0]
 800466a:	2203      	movs	r2, #3
 800466c:	0030      	movs	r0, r6
 800466e:	f000 f9f5 	bl	8004a5c <memchr>
 8004672:	2800      	cmp	r0, #0
 8004674:	d006      	beq.n	8004684 <_svfiprintf_r+0x140>
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	1b80      	subs	r0, r0, r6
 800467a:	4083      	lsls	r3, r0
 800467c:	682a      	ldr	r2, [r5, #0]
 800467e:	3401      	adds	r4, #1
 8004680:	4313      	orrs	r3, r2
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	7821      	ldrb	r1, [r4, #0]
 8004686:	2206      	movs	r2, #6
 8004688:	482d      	ldr	r0, [pc, #180]	; (8004740 <_svfiprintf_r+0x1fc>)
 800468a:	1c66      	adds	r6, r4, #1
 800468c:	7629      	strb	r1, [r5, #24]
 800468e:	f000 f9e5 	bl	8004a5c <memchr>
 8004692:	2800      	cmp	r0, #0
 8004694:	d046      	beq.n	8004724 <_svfiprintf_r+0x1e0>
 8004696:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <_svfiprintf_r+0x200>)
 8004698:	2b00      	cmp	r3, #0
 800469a:	d12f      	bne.n	80046fc <_svfiprintf_r+0x1b8>
 800469c:	6829      	ldr	r1, [r5, #0]
 800469e:	9b05      	ldr	r3, [sp, #20]
 80046a0:	2207      	movs	r2, #7
 80046a2:	05c9      	lsls	r1, r1, #23
 80046a4:	d528      	bpl.n	80046f8 <_svfiprintf_r+0x1b4>
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	4393      	bics	r3, r2
 80046aa:	3308      	adds	r3, #8
 80046ac:	9305      	str	r3, [sp, #20]
 80046ae:	696b      	ldr	r3, [r5, #20]
 80046b0:	9a03      	ldr	r2, [sp, #12]
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	616b      	str	r3, [r5, #20]
 80046b6:	e767      	b.n	8004588 <_svfiprintf_r+0x44>
 80046b8:	425b      	negs	r3, r3
 80046ba:	60eb      	str	r3, [r5, #12]
 80046bc:	2302      	movs	r3, #2
 80046be:	430b      	orrs	r3, r1
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	e7c0      	b.n	8004646 <_svfiprintf_r+0x102>
 80046c4:	434b      	muls	r3, r1
 80046c6:	3401      	adds	r4, #1
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	2001      	movs	r0, #1
 80046cc:	e7a0      	b.n	8004610 <_svfiprintf_r+0xcc>
 80046ce:	2301      	movs	r3, #1
 80046d0:	425b      	negs	r3, r3
 80046d2:	e7c7      	b.n	8004664 <_svfiprintf_r+0x120>
 80046d4:	2300      	movs	r3, #0
 80046d6:	0014      	movs	r4, r2
 80046d8:	200a      	movs	r0, #10
 80046da:	001a      	movs	r2, r3
 80046dc:	606b      	str	r3, [r5, #4]
 80046de:	7821      	ldrb	r1, [r4, #0]
 80046e0:	3930      	subs	r1, #48	; 0x30
 80046e2:	2909      	cmp	r1, #9
 80046e4:	d903      	bls.n	80046ee <_svfiprintf_r+0x1aa>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0bd      	beq.n	8004666 <_svfiprintf_r+0x122>
 80046ea:	9207      	str	r2, [sp, #28]
 80046ec:	e7bb      	b.n	8004666 <_svfiprintf_r+0x122>
 80046ee:	4342      	muls	r2, r0
 80046f0:	3401      	adds	r4, #1
 80046f2:	1852      	adds	r2, r2, r1
 80046f4:	2301      	movs	r3, #1
 80046f6:	e7f2      	b.n	80046de <_svfiprintf_r+0x19a>
 80046f8:	3307      	adds	r3, #7
 80046fa:	e7d5      	b.n	80046a8 <_svfiprintf_r+0x164>
 80046fc:	ab05      	add	r3, sp, #20
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	003a      	movs	r2, r7
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <_svfiprintf_r+0x204>)
 8004704:	0029      	movs	r1, r5
 8004706:	9802      	ldr	r0, [sp, #8]
 8004708:	e000      	b.n	800470c <_svfiprintf_r+0x1c8>
 800470a:	bf00      	nop
 800470c:	9003      	str	r0, [sp, #12]
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	d1cc      	bne.n	80046ae <_svfiprintf_r+0x16a>
 8004714:	89bb      	ldrh	r3, [r7, #12]
 8004716:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004718:	065b      	lsls	r3, r3, #25
 800471a:	d400      	bmi.n	800471e <_svfiprintf_r+0x1da>
 800471c:	e729      	b.n	8004572 <_svfiprintf_r+0x2e>
 800471e:	2001      	movs	r0, #1
 8004720:	4240      	negs	r0, r0
 8004722:	e726      	b.n	8004572 <_svfiprintf_r+0x2e>
 8004724:	ab05      	add	r3, sp, #20
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	003a      	movs	r2, r7
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <_svfiprintf_r+0x204>)
 800472c:	0029      	movs	r1, r5
 800472e:	9802      	ldr	r0, [sp, #8]
 8004730:	f000 f87a 	bl	8004828 <_printf_i>
 8004734:	e7ea      	b.n	800470c <_svfiprintf_r+0x1c8>
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	08004e4a 	.word	0x08004e4a
 800473c:	08004e50 	.word	0x08004e50
 8004740:	08004e54 	.word	0x08004e54
 8004744:	00000000 	.word	0x00000000
 8004748:	08004481 	.word	0x08004481

0800474c <_printf_common>:
 800474c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800474e:	0015      	movs	r5, r2
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	688a      	ldr	r2, [r1, #8]
 8004754:	690b      	ldr	r3, [r1, #16]
 8004756:	9000      	str	r0, [sp, #0]
 8004758:	000c      	movs	r4, r1
 800475a:	4293      	cmp	r3, r2
 800475c:	da00      	bge.n	8004760 <_printf_common+0x14>
 800475e:	0013      	movs	r3, r2
 8004760:	0022      	movs	r2, r4
 8004762:	602b      	str	r3, [r5, #0]
 8004764:	3243      	adds	r2, #67	; 0x43
 8004766:	7812      	ldrb	r2, [r2, #0]
 8004768:	2a00      	cmp	r2, #0
 800476a:	d001      	beq.n	8004770 <_printf_common+0x24>
 800476c:	3301      	adds	r3, #1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	069b      	lsls	r3, r3, #26
 8004774:	d502      	bpl.n	800477c <_printf_common+0x30>
 8004776:	682b      	ldr	r3, [r5, #0]
 8004778:	3302      	adds	r3, #2
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	2706      	movs	r7, #6
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	401f      	ands	r7, r3
 8004782:	d027      	beq.n	80047d4 <_printf_common+0x88>
 8004784:	0023      	movs	r3, r4
 8004786:	3343      	adds	r3, #67	; 0x43
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	1e5a      	subs	r2, r3, #1
 800478c:	4193      	sbcs	r3, r2
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	0692      	lsls	r2, r2, #26
 8004792:	d430      	bmi.n	80047f6 <_printf_common+0xaa>
 8004794:	0022      	movs	r2, r4
 8004796:	9901      	ldr	r1, [sp, #4]
 8004798:	3243      	adds	r2, #67	; 0x43
 800479a:	9800      	ldr	r0, [sp, #0]
 800479c:	9e08      	ldr	r6, [sp, #32]
 800479e:	47b0      	blx	r6
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d025      	beq.n	80047f0 <_printf_common+0xa4>
 80047a4:	2306      	movs	r3, #6
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	682a      	ldr	r2, [r5, #0]
 80047aa:	68e1      	ldr	r1, [r4, #12]
 80047ac:	4003      	ands	r3, r0
 80047ae:	2500      	movs	r5, #0
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d103      	bne.n	80047bc <_printf_common+0x70>
 80047b4:	1a8d      	subs	r5, r1, r2
 80047b6:	43eb      	mvns	r3, r5
 80047b8:	17db      	asrs	r3, r3, #31
 80047ba:	401d      	ands	r5, r3
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	6922      	ldr	r2, [r4, #16]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	dd01      	ble.n	80047c8 <_printf_common+0x7c>
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	18ed      	adds	r5, r5, r3
 80047c8:	2700      	movs	r7, #0
 80047ca:	42bd      	cmp	r5, r7
 80047cc:	d120      	bne.n	8004810 <_printf_common+0xc4>
 80047ce:	2000      	movs	r0, #0
 80047d0:	e010      	b.n	80047f4 <_printf_common+0xa8>
 80047d2:	3701      	adds	r7, #1
 80047d4:	68e3      	ldr	r3, [r4, #12]
 80047d6:	682a      	ldr	r2, [r5, #0]
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	429f      	cmp	r7, r3
 80047dc:	dad2      	bge.n	8004784 <_printf_common+0x38>
 80047de:	0022      	movs	r2, r4
 80047e0:	2301      	movs	r3, #1
 80047e2:	3219      	adds	r2, #25
 80047e4:	9901      	ldr	r1, [sp, #4]
 80047e6:	9800      	ldr	r0, [sp, #0]
 80047e8:	9e08      	ldr	r6, [sp, #32]
 80047ea:	47b0      	blx	r6
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d1f0      	bne.n	80047d2 <_printf_common+0x86>
 80047f0:	2001      	movs	r0, #1
 80047f2:	4240      	negs	r0, r0
 80047f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047f6:	2030      	movs	r0, #48	; 0x30
 80047f8:	18e1      	adds	r1, r4, r3
 80047fa:	3143      	adds	r1, #67	; 0x43
 80047fc:	7008      	strb	r0, [r1, #0]
 80047fe:	0021      	movs	r1, r4
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	3145      	adds	r1, #69	; 0x45
 8004804:	7809      	ldrb	r1, [r1, #0]
 8004806:	18a2      	adds	r2, r4, r2
 8004808:	3243      	adds	r2, #67	; 0x43
 800480a:	3302      	adds	r3, #2
 800480c:	7011      	strb	r1, [r2, #0]
 800480e:	e7c1      	b.n	8004794 <_printf_common+0x48>
 8004810:	0022      	movs	r2, r4
 8004812:	2301      	movs	r3, #1
 8004814:	321a      	adds	r2, #26
 8004816:	9901      	ldr	r1, [sp, #4]
 8004818:	9800      	ldr	r0, [sp, #0]
 800481a:	9e08      	ldr	r6, [sp, #32]
 800481c:	47b0      	blx	r6
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	d0e6      	beq.n	80047f0 <_printf_common+0xa4>
 8004822:	3701      	adds	r7, #1
 8004824:	e7d1      	b.n	80047ca <_printf_common+0x7e>
	...

08004828 <_printf_i>:
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	b08b      	sub	sp, #44	; 0x2c
 800482c:	9206      	str	r2, [sp, #24]
 800482e:	000a      	movs	r2, r1
 8004830:	3243      	adds	r2, #67	; 0x43
 8004832:	9307      	str	r3, [sp, #28]
 8004834:	9005      	str	r0, [sp, #20]
 8004836:	9204      	str	r2, [sp, #16]
 8004838:	7e0a      	ldrb	r2, [r1, #24]
 800483a:	000c      	movs	r4, r1
 800483c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800483e:	2a6e      	cmp	r2, #110	; 0x6e
 8004840:	d100      	bne.n	8004844 <_printf_i+0x1c>
 8004842:	e08f      	b.n	8004964 <_printf_i+0x13c>
 8004844:	d817      	bhi.n	8004876 <_printf_i+0x4e>
 8004846:	2a63      	cmp	r2, #99	; 0x63
 8004848:	d02c      	beq.n	80048a4 <_printf_i+0x7c>
 800484a:	d808      	bhi.n	800485e <_printf_i+0x36>
 800484c:	2a00      	cmp	r2, #0
 800484e:	d100      	bne.n	8004852 <_printf_i+0x2a>
 8004850:	e099      	b.n	8004986 <_printf_i+0x15e>
 8004852:	2a58      	cmp	r2, #88	; 0x58
 8004854:	d054      	beq.n	8004900 <_printf_i+0xd8>
 8004856:	0026      	movs	r6, r4
 8004858:	3642      	adds	r6, #66	; 0x42
 800485a:	7032      	strb	r2, [r6, #0]
 800485c:	e029      	b.n	80048b2 <_printf_i+0x8a>
 800485e:	2a64      	cmp	r2, #100	; 0x64
 8004860:	d001      	beq.n	8004866 <_printf_i+0x3e>
 8004862:	2a69      	cmp	r2, #105	; 0x69
 8004864:	d1f7      	bne.n	8004856 <_printf_i+0x2e>
 8004866:	6821      	ldr	r1, [r4, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	0608      	lsls	r0, r1, #24
 800486c:	d523      	bpl.n	80048b6 <_printf_i+0x8e>
 800486e:	1d11      	adds	r1, r2, #4
 8004870:	6019      	str	r1, [r3, #0]
 8004872:	6815      	ldr	r5, [r2, #0]
 8004874:	e025      	b.n	80048c2 <_printf_i+0x9a>
 8004876:	2a73      	cmp	r2, #115	; 0x73
 8004878:	d100      	bne.n	800487c <_printf_i+0x54>
 800487a:	e088      	b.n	800498e <_printf_i+0x166>
 800487c:	d808      	bhi.n	8004890 <_printf_i+0x68>
 800487e:	2a6f      	cmp	r2, #111	; 0x6f
 8004880:	d029      	beq.n	80048d6 <_printf_i+0xae>
 8004882:	2a70      	cmp	r2, #112	; 0x70
 8004884:	d1e7      	bne.n	8004856 <_printf_i+0x2e>
 8004886:	2220      	movs	r2, #32
 8004888:	6809      	ldr	r1, [r1, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	e003      	b.n	8004898 <_printf_i+0x70>
 8004890:	2a75      	cmp	r2, #117	; 0x75
 8004892:	d020      	beq.n	80048d6 <_printf_i+0xae>
 8004894:	2a78      	cmp	r2, #120	; 0x78
 8004896:	d1de      	bne.n	8004856 <_printf_i+0x2e>
 8004898:	0022      	movs	r2, r4
 800489a:	2178      	movs	r1, #120	; 0x78
 800489c:	3245      	adds	r2, #69	; 0x45
 800489e:	7011      	strb	r1, [r2, #0]
 80048a0:	4a6c      	ldr	r2, [pc, #432]	; (8004a54 <_printf_i+0x22c>)
 80048a2:	e030      	b.n	8004906 <_printf_i+0xde>
 80048a4:	000e      	movs	r6, r1
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	3642      	adds	r6, #66	; 0x42
 80048aa:	1d11      	adds	r1, r2, #4
 80048ac:	6019      	str	r1, [r3, #0]
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	7033      	strb	r3, [r6, #0]
 80048b2:	2301      	movs	r3, #1
 80048b4:	e079      	b.n	80049aa <_printf_i+0x182>
 80048b6:	0649      	lsls	r1, r1, #25
 80048b8:	d5d9      	bpl.n	800486e <_printf_i+0x46>
 80048ba:	1d11      	adds	r1, r2, #4
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	5ed5      	ldrsh	r5, [r2, r3]
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	da03      	bge.n	80048ce <_printf_i+0xa6>
 80048c6:	232d      	movs	r3, #45	; 0x2d
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	426d      	negs	r5, r5
 80048cc:	7013      	strb	r3, [r2, #0]
 80048ce:	4b62      	ldr	r3, [pc, #392]	; (8004a58 <_printf_i+0x230>)
 80048d0:	270a      	movs	r7, #10
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	e02f      	b.n	8004936 <_printf_i+0x10e>
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	0605      	lsls	r5, r0, #24
 80048dc:	d503      	bpl.n	80048e6 <_printf_i+0xbe>
 80048de:	1d08      	adds	r0, r1, #4
 80048e0:	6018      	str	r0, [r3, #0]
 80048e2:	680d      	ldr	r5, [r1, #0]
 80048e4:	e005      	b.n	80048f2 <_printf_i+0xca>
 80048e6:	0640      	lsls	r0, r0, #25
 80048e8:	d5f9      	bpl.n	80048de <_printf_i+0xb6>
 80048ea:	680d      	ldr	r5, [r1, #0]
 80048ec:	1d08      	adds	r0, r1, #4
 80048ee:	6018      	str	r0, [r3, #0]
 80048f0:	b2ad      	uxth	r5, r5
 80048f2:	4b59      	ldr	r3, [pc, #356]	; (8004a58 <_printf_i+0x230>)
 80048f4:	2708      	movs	r7, #8
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	2a6f      	cmp	r2, #111	; 0x6f
 80048fa:	d018      	beq.n	800492e <_printf_i+0x106>
 80048fc:	270a      	movs	r7, #10
 80048fe:	e016      	b.n	800492e <_printf_i+0x106>
 8004900:	3145      	adds	r1, #69	; 0x45
 8004902:	700a      	strb	r2, [r1, #0]
 8004904:	4a54      	ldr	r2, [pc, #336]	; (8004a58 <_printf_i+0x230>)
 8004906:	9203      	str	r2, [sp, #12]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6821      	ldr	r1, [r4, #0]
 800490c:	1d10      	adds	r0, r2, #4
 800490e:	6018      	str	r0, [r3, #0]
 8004910:	6815      	ldr	r5, [r2, #0]
 8004912:	0608      	lsls	r0, r1, #24
 8004914:	d522      	bpl.n	800495c <_printf_i+0x134>
 8004916:	07cb      	lsls	r3, r1, #31
 8004918:	d502      	bpl.n	8004920 <_printf_i+0xf8>
 800491a:	2320      	movs	r3, #32
 800491c:	4319      	orrs	r1, r3
 800491e:	6021      	str	r1, [r4, #0]
 8004920:	2710      	movs	r7, #16
 8004922:	2d00      	cmp	r5, #0
 8004924:	d103      	bne.n	800492e <_printf_i+0x106>
 8004926:	2320      	movs	r3, #32
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	439a      	bics	r2, r3
 800492c:	6022      	str	r2, [r4, #0]
 800492e:	0023      	movs	r3, r4
 8004930:	2200      	movs	r2, #0
 8004932:	3343      	adds	r3, #67	; 0x43
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	60a3      	str	r3, [r4, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db5c      	blt.n	80049f8 <_printf_i+0x1d0>
 800493e:	2204      	movs	r2, #4
 8004940:	6821      	ldr	r1, [r4, #0]
 8004942:	4391      	bics	r1, r2
 8004944:	6021      	str	r1, [r4, #0]
 8004946:	2d00      	cmp	r5, #0
 8004948:	d158      	bne.n	80049fc <_printf_i+0x1d4>
 800494a:	9e04      	ldr	r6, [sp, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d064      	beq.n	8004a1a <_printf_i+0x1f2>
 8004950:	0026      	movs	r6, r4
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	3642      	adds	r6, #66	; 0x42
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	7033      	strb	r3, [r6, #0]
 800495a:	e05e      	b.n	8004a1a <_printf_i+0x1f2>
 800495c:	0648      	lsls	r0, r1, #25
 800495e:	d5da      	bpl.n	8004916 <_printf_i+0xee>
 8004960:	b2ad      	uxth	r5, r5
 8004962:	e7d8      	b.n	8004916 <_printf_i+0xee>
 8004964:	6809      	ldr	r1, [r1, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	0608      	lsls	r0, r1, #24
 800496a:	d505      	bpl.n	8004978 <_printf_i+0x150>
 800496c:	1d11      	adds	r1, r2, #4
 800496e:	6019      	str	r1, [r3, #0]
 8004970:	6813      	ldr	r3, [r2, #0]
 8004972:	6962      	ldr	r2, [r4, #20]
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e006      	b.n	8004986 <_printf_i+0x15e>
 8004978:	0649      	lsls	r1, r1, #25
 800497a:	d5f7      	bpl.n	800496c <_printf_i+0x144>
 800497c:	1d11      	adds	r1, r2, #4
 800497e:	6019      	str	r1, [r3, #0]
 8004980:	6813      	ldr	r3, [r2, #0]
 8004982:	8aa2      	ldrh	r2, [r4, #20]
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	9e04      	ldr	r6, [sp, #16]
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	e054      	b.n	8004a38 <_printf_i+0x210>
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	1d11      	adds	r1, r2, #4
 8004992:	6019      	str	r1, [r3, #0]
 8004994:	6816      	ldr	r6, [r2, #0]
 8004996:	2100      	movs	r1, #0
 8004998:	6862      	ldr	r2, [r4, #4]
 800499a:	0030      	movs	r0, r6
 800499c:	f000 f85e 	bl	8004a5c <memchr>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d001      	beq.n	80049a8 <_printf_i+0x180>
 80049a4:	1b80      	subs	r0, r0, r6
 80049a6:	6060      	str	r0, [r4, #4]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2300      	movs	r3, #0
 80049ae:	9a04      	ldr	r2, [sp, #16]
 80049b0:	7013      	strb	r3, [r2, #0]
 80049b2:	e041      	b.n	8004a38 <_printf_i+0x210>
 80049b4:	6923      	ldr	r3, [r4, #16]
 80049b6:	0032      	movs	r2, r6
 80049b8:	9906      	ldr	r1, [sp, #24]
 80049ba:	9805      	ldr	r0, [sp, #20]
 80049bc:	9d07      	ldr	r5, [sp, #28]
 80049be:	47a8      	blx	r5
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d043      	beq.n	8004a4c <_printf_i+0x224>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	2500      	movs	r5, #0
 80049c8:	079b      	lsls	r3, r3, #30
 80049ca:	d40f      	bmi.n	80049ec <_printf_i+0x1c4>
 80049cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ce:	68e0      	ldr	r0, [r4, #12]
 80049d0:	4298      	cmp	r0, r3
 80049d2:	da3d      	bge.n	8004a50 <_printf_i+0x228>
 80049d4:	0018      	movs	r0, r3
 80049d6:	e03b      	b.n	8004a50 <_printf_i+0x228>
 80049d8:	0022      	movs	r2, r4
 80049da:	2301      	movs	r3, #1
 80049dc:	3219      	adds	r2, #25
 80049de:	9906      	ldr	r1, [sp, #24]
 80049e0:	9805      	ldr	r0, [sp, #20]
 80049e2:	9e07      	ldr	r6, [sp, #28]
 80049e4:	47b0      	blx	r6
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	d030      	beq.n	8004a4c <_printf_i+0x224>
 80049ea:	3501      	adds	r5, #1
 80049ec:	68e3      	ldr	r3, [r4, #12]
 80049ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	429d      	cmp	r5, r3
 80049f4:	dbf0      	blt.n	80049d8 <_printf_i+0x1b0>
 80049f6:	e7e9      	b.n	80049cc <_printf_i+0x1a4>
 80049f8:	2d00      	cmp	r5, #0
 80049fa:	d0a9      	beq.n	8004950 <_printf_i+0x128>
 80049fc:	9e04      	ldr	r6, [sp, #16]
 80049fe:	0028      	movs	r0, r5
 8004a00:	0039      	movs	r1, r7
 8004a02:	f7fb fc1b 	bl	800023c <__aeabi_uidivmod>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	3e01      	subs	r6, #1
 8004a0a:	5c5b      	ldrb	r3, [r3, r1]
 8004a0c:	0028      	movs	r0, r5
 8004a0e:	7033      	strb	r3, [r6, #0]
 8004a10:	0039      	movs	r1, r7
 8004a12:	f7fb fb8d 	bl	8000130 <__udivsi3>
 8004a16:	1e05      	subs	r5, r0, #0
 8004a18:	d1f1      	bne.n	80049fe <_printf_i+0x1d6>
 8004a1a:	2f08      	cmp	r7, #8
 8004a1c:	d109      	bne.n	8004a32 <_printf_i+0x20a>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	07db      	lsls	r3, r3, #31
 8004a22:	d506      	bpl.n	8004a32 <_printf_i+0x20a>
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	6922      	ldr	r2, [r4, #16]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	dc02      	bgt.n	8004a32 <_printf_i+0x20a>
 8004a2c:	2330      	movs	r3, #48	; 0x30
 8004a2e:	3e01      	subs	r6, #1
 8004a30:	7033      	strb	r3, [r6, #0]
 8004a32:	9b04      	ldr	r3, [sp, #16]
 8004a34:	1b9b      	subs	r3, r3, r6
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	9b07      	ldr	r3, [sp, #28]
 8004a3a:	aa09      	add	r2, sp, #36	; 0x24
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	0021      	movs	r1, r4
 8004a40:	9b06      	ldr	r3, [sp, #24]
 8004a42:	9805      	ldr	r0, [sp, #20]
 8004a44:	f7ff fe82 	bl	800474c <_printf_common>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d1b3      	bne.n	80049b4 <_printf_i+0x18c>
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	4240      	negs	r0, r0
 8004a50:	b00b      	add	sp, #44	; 0x2c
 8004a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a54:	08004e6c 	.word	0x08004e6c
 8004a58:	08004e5b 	.word	0x08004e5b

08004a5c <memchr>:
 8004a5c:	b2c9      	uxtb	r1, r1
 8004a5e:	1882      	adds	r2, r0, r2
 8004a60:	4290      	cmp	r0, r2
 8004a62:	d101      	bne.n	8004a68 <memchr+0xc>
 8004a64:	2000      	movs	r0, #0
 8004a66:	4770      	bx	lr
 8004a68:	7803      	ldrb	r3, [r0, #0]
 8004a6a:	428b      	cmp	r3, r1
 8004a6c:	d0fb      	beq.n	8004a66 <memchr+0xa>
 8004a6e:	3001      	adds	r0, #1
 8004a70:	e7f6      	b.n	8004a60 <memchr+0x4>

08004a72 <memmove>:
 8004a72:	b510      	push	{r4, lr}
 8004a74:	4288      	cmp	r0, r1
 8004a76:	d902      	bls.n	8004a7e <memmove+0xc>
 8004a78:	188b      	adds	r3, r1, r2
 8004a7a:	4298      	cmp	r0, r3
 8004a7c:	d308      	bcc.n	8004a90 <memmove+0x1e>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d007      	beq.n	8004a94 <memmove+0x22>
 8004a84:	5ccc      	ldrb	r4, [r1, r3]
 8004a86:	54c4      	strb	r4, [r0, r3]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	e7f9      	b.n	8004a80 <memmove+0xe>
 8004a8c:	5c8b      	ldrb	r3, [r1, r2]
 8004a8e:	5483      	strb	r3, [r0, r2]
 8004a90:	3a01      	subs	r2, #1
 8004a92:	d2fb      	bcs.n	8004a8c <memmove+0x1a>
 8004a94:	bd10      	pop	{r4, pc}
	...

08004a98 <_free_r>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	0005      	movs	r5, r0
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	d010      	beq.n	8004ac2 <_free_r+0x2a>
 8004aa0:	1f0c      	subs	r4, r1, #4
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da00      	bge.n	8004aaa <_free_r+0x12>
 8004aa8:	18e4      	adds	r4, r4, r3
 8004aaa:	0028      	movs	r0, r5
 8004aac:	f000 f8d4 	bl	8004c58 <__malloc_lock>
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <_free_r+0x90>)
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <_free_r+0x2c>
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	6014      	str	r4, [r2, #0]
 8004abc:	0028      	movs	r0, r5
 8004abe:	f000 f8cc 	bl	8004c5a <__malloc_unlock>
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d909      	bls.n	8004adc <_free_r+0x44>
 8004ac8:	6821      	ldr	r1, [r4, #0]
 8004aca:	1860      	adds	r0, r4, r1
 8004acc:	4283      	cmp	r3, r0
 8004ace:	d1f3      	bne.n	8004ab8 <_free_r+0x20>
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	1841      	adds	r1, r0, r1
 8004ad6:	6021      	str	r1, [r4, #0]
 8004ad8:	e7ee      	b.n	8004ab8 <_free_r+0x20>
 8004ada:	0013      	movs	r3, r2
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d001      	beq.n	8004ae6 <_free_r+0x4e>
 8004ae2:	42a2      	cmp	r2, r4
 8004ae4:	d9f9      	bls.n	8004ada <_free_r+0x42>
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	1858      	adds	r0, r3, r1
 8004aea:	42a0      	cmp	r0, r4
 8004aec:	d10b      	bne.n	8004b06 <_free_r+0x6e>
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	1809      	adds	r1, r1, r0
 8004af2:	1858      	adds	r0, r3, r1
 8004af4:	6019      	str	r1, [r3, #0]
 8004af6:	4282      	cmp	r2, r0
 8004af8:	d1e0      	bne.n	8004abc <_free_r+0x24>
 8004afa:	6810      	ldr	r0, [r2, #0]
 8004afc:	6852      	ldr	r2, [r2, #4]
 8004afe:	1841      	adds	r1, r0, r1
 8004b00:	6019      	str	r1, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e7da      	b.n	8004abc <_free_r+0x24>
 8004b06:	42a0      	cmp	r0, r4
 8004b08:	d902      	bls.n	8004b10 <_free_r+0x78>
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	602b      	str	r3, [r5, #0]
 8004b0e:	e7d5      	b.n	8004abc <_free_r+0x24>
 8004b10:	6821      	ldr	r1, [r4, #0]
 8004b12:	1860      	adds	r0, r4, r1
 8004b14:	4282      	cmp	r2, r0
 8004b16:	d103      	bne.n	8004b20 <_free_r+0x88>
 8004b18:	6810      	ldr	r0, [r2, #0]
 8004b1a:	6852      	ldr	r2, [r2, #4]
 8004b1c:	1841      	adds	r1, r0, r1
 8004b1e:	6021      	str	r1, [r4, #0]
 8004b20:	6062      	str	r2, [r4, #4]
 8004b22:	605c      	str	r4, [r3, #4]
 8004b24:	e7ca      	b.n	8004abc <_free_r+0x24>
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	20001170 	.word	0x20001170

08004b2c <_malloc_r>:
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	b570      	push	{r4, r5, r6, lr}
 8004b30:	1ccd      	adds	r5, r1, #3
 8004b32:	439d      	bics	r5, r3
 8004b34:	3508      	adds	r5, #8
 8004b36:	0006      	movs	r6, r0
 8004b38:	2d0c      	cmp	r5, #12
 8004b3a:	d21e      	bcs.n	8004b7a <_malloc_r+0x4e>
 8004b3c:	250c      	movs	r5, #12
 8004b3e:	42a9      	cmp	r1, r5
 8004b40:	d81d      	bhi.n	8004b7e <_malloc_r+0x52>
 8004b42:	0030      	movs	r0, r6
 8004b44:	f000 f888 	bl	8004c58 <__malloc_lock>
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <_malloc_r+0xb4>)
 8004b4a:	6814      	ldr	r4, [r2, #0]
 8004b4c:	0021      	movs	r1, r4
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d119      	bne.n	8004b86 <_malloc_r+0x5a>
 8004b52:	4c24      	ldr	r4, [pc, #144]	; (8004be4 <_malloc_r+0xb8>)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <_malloc_r+0x36>
 8004b5a:	0030      	movs	r0, r6
 8004b5c:	f000 f86a 	bl	8004c34 <_sbrk_r>
 8004b60:	6020      	str	r0, [r4, #0]
 8004b62:	0029      	movs	r1, r5
 8004b64:	0030      	movs	r0, r6
 8004b66:	f000 f865 	bl	8004c34 <_sbrk_r>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d12c      	bne.n	8004bc8 <_malloc_r+0x9c>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	0030      	movs	r0, r6
 8004b72:	6033      	str	r3, [r6, #0]
 8004b74:	f000 f871 	bl	8004c5a <__malloc_unlock>
 8004b78:	e003      	b.n	8004b82 <_malloc_r+0x56>
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	dadf      	bge.n	8004b3e <_malloc_r+0x12>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	6033      	str	r3, [r6, #0]
 8004b82:	2000      	movs	r0, #0
 8004b84:	bd70      	pop	{r4, r5, r6, pc}
 8004b86:	680b      	ldr	r3, [r1, #0]
 8004b88:	1b5b      	subs	r3, r3, r5
 8004b8a:	d41a      	bmi.n	8004bc2 <_malloc_r+0x96>
 8004b8c:	2b0b      	cmp	r3, #11
 8004b8e:	d903      	bls.n	8004b98 <_malloc_r+0x6c>
 8004b90:	600b      	str	r3, [r1, #0]
 8004b92:	18cc      	adds	r4, r1, r3
 8004b94:	6025      	str	r5, [r4, #0]
 8004b96:	e003      	b.n	8004ba0 <_malloc_r+0x74>
 8004b98:	428c      	cmp	r4, r1
 8004b9a:	d10e      	bne.n	8004bba <_malloc_r+0x8e>
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	0030      	movs	r0, r6
 8004ba2:	f000 f85a 	bl	8004c5a <__malloc_unlock>
 8004ba6:	0020      	movs	r0, r4
 8004ba8:	2207      	movs	r2, #7
 8004baa:	300b      	adds	r0, #11
 8004bac:	1d23      	adds	r3, r4, #4
 8004bae:	4390      	bics	r0, r2
 8004bb0:	1ac3      	subs	r3, r0, r3
 8004bb2:	d0e7      	beq.n	8004b84 <_malloc_r+0x58>
 8004bb4:	425a      	negs	r2, r3
 8004bb6:	50e2      	str	r2, [r4, r3]
 8004bb8:	e7e4      	b.n	8004b84 <_malloc_r+0x58>
 8004bba:	684b      	ldr	r3, [r1, #4]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	000c      	movs	r4, r1
 8004bc0:	e7ee      	b.n	8004ba0 <_malloc_r+0x74>
 8004bc2:	000c      	movs	r4, r1
 8004bc4:	6849      	ldr	r1, [r1, #4]
 8004bc6:	e7c2      	b.n	8004b4e <_malloc_r+0x22>
 8004bc8:	2303      	movs	r3, #3
 8004bca:	1cc4      	adds	r4, r0, #3
 8004bcc:	439c      	bics	r4, r3
 8004bce:	42a0      	cmp	r0, r4
 8004bd0:	d0e0      	beq.n	8004b94 <_malloc_r+0x68>
 8004bd2:	1a21      	subs	r1, r4, r0
 8004bd4:	0030      	movs	r0, r6
 8004bd6:	f000 f82d 	bl	8004c34 <_sbrk_r>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	d1da      	bne.n	8004b94 <_malloc_r+0x68>
 8004bde:	e7c6      	b.n	8004b6e <_malloc_r+0x42>
 8004be0:	20001170 	.word	0x20001170
 8004be4:	20001174 	.word	0x20001174

08004be8 <_realloc_r>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	0007      	movs	r7, r0
 8004bec:	000d      	movs	r5, r1
 8004bee:	0016      	movs	r6, r2
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	d105      	bne.n	8004c00 <_realloc_r+0x18>
 8004bf4:	0011      	movs	r1, r2
 8004bf6:	f7ff ff99 	bl	8004b2c <_malloc_r>
 8004bfa:	0004      	movs	r4, r0
 8004bfc:	0020      	movs	r0, r4
 8004bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	d103      	bne.n	8004c0c <_realloc_r+0x24>
 8004c04:	f7ff ff48 	bl	8004a98 <_free_r>
 8004c08:	0034      	movs	r4, r6
 8004c0a:	e7f7      	b.n	8004bfc <_realloc_r+0x14>
 8004c0c:	f000 f826 	bl	8004c5c <_malloc_usable_size_r>
 8004c10:	002c      	movs	r4, r5
 8004c12:	4286      	cmp	r6, r0
 8004c14:	d9f2      	bls.n	8004bfc <_realloc_r+0x14>
 8004c16:	0031      	movs	r1, r6
 8004c18:	0038      	movs	r0, r7
 8004c1a:	f7ff ff87 	bl	8004b2c <_malloc_r>
 8004c1e:	1e04      	subs	r4, r0, #0
 8004c20:	d0ec      	beq.n	8004bfc <_realloc_r+0x14>
 8004c22:	0029      	movs	r1, r5
 8004c24:	0032      	movs	r2, r6
 8004c26:	f7ff fbdf 	bl	80043e8 <memcpy>
 8004c2a:	0029      	movs	r1, r5
 8004c2c:	0038      	movs	r0, r7
 8004c2e:	f7ff ff33 	bl	8004a98 <_free_r>
 8004c32:	e7e3      	b.n	8004bfc <_realloc_r+0x14>

08004c34 <_sbrk_r>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b570      	push	{r4, r5, r6, lr}
 8004c38:	4c06      	ldr	r4, [pc, #24]	; (8004c54 <_sbrk_r+0x20>)
 8004c3a:	0005      	movs	r5, r0
 8004c3c:	0008      	movs	r0, r1
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	f7fb fe1a 	bl	8000878 <_sbrk>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d103      	bne.n	8004c50 <_sbrk_r+0x1c>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d000      	beq.n	8004c50 <_sbrk_r+0x1c>
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	20002108 	.word	0x20002108

08004c58 <__malloc_lock>:
 8004c58:	4770      	bx	lr

08004c5a <__malloc_unlock>:
 8004c5a:	4770      	bx	lr

08004c5c <_malloc_usable_size_r>:
 8004c5c:	1f0b      	subs	r3, r1, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1f18      	subs	r0, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da01      	bge.n	8004c6a <_malloc_usable_size_r+0xe>
 8004c66:	580b      	ldr	r3, [r1, r0]
 8004c68:	18c0      	adds	r0, r0, r3
 8004c6a:	4770      	bx	lr

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
